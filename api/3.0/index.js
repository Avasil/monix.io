Index.PACKAGES = {"monix.execution.atomic" : [{"name" : "monix.execution.atomic.Atomic", "shortDescription" : "Base trait of all atomic references, no matter the type.", "object" : "monix\/execution\/atomic\/Atomic$.html", "members_class" : [{"label" : "transform", "tail" : "(cb: (A) ⇒ A): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/Atomic.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (A) ⇒ A): A", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/Atomic.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (A) ⇒ A): A", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/Atomic.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (A) ⇒ (U, A)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/Atomic.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/Atomic.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/Atomic.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/Atomic.html#apply():A", "kind" : "final macro def"}, {"member" : "monix.execution.atomic.Atomic#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/Atomic.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/Atomic.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/Atomic.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/Atomic.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/Atomic.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/Atomic.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/Atomic.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/Atomic.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/Atomic.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/Atomic.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/Atomic.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/Atomic.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/Atomic.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/Atomic.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/Atomic.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/Atomic.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "lazySet", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.Atomic.lazySet", "link" : "monix\/execution\/atomic\/Atomic.html#lazySet(update:A):Unit", "kind" : "abstract def"}, {"label" : "getAndSet", "tail" : "(update: A): A", "member" : "monix.execution.atomic.Atomic.getAndSet", "link" : "monix\/execution\/atomic\/Atomic.html#getAndSet(update:A):A", "kind" : "abstract def"}, {"label" : "compareAndSet", "tail" : "(expect: A, update: A): Boolean", "member" : "monix.execution.atomic.Atomic.compareAndSet", "link" : "monix\/execution\/atomic\/Atomic.html#compareAndSet(expect:A,update:A):Boolean", "kind" : "abstract def"}, {"label" : "set", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.Atomic.set", "link" : "monix\/execution\/atomic\/Atomic.html#set(update:A):Unit", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.get", "link" : "monix\/execution\/atomic\/Atomic.html#get:A", "kind" : "abstract def"}], "members_object" : [{"label" : "Macros", "tail" : "", "member" : "monix.execution.atomic.Atomic.Macros", "link" : "monix\/execution\/atomic\/Atomic$.html#MacrosextendsHygieneUtilMacroswithInlineMacros", "kind" : "class"}, {"label" : "builderFor", "tail" : "(initialValue: A)(builder: AtomicBuilder[A, R]): AtomicBuilder[A, R]", "member" : "monix.execution.atomic.Atomic.builderFor", "link" : "monix\/execution\/atomic\/Atomic$.html#builderFor[A,R<:monix.execution.atomic.Atomic[A]](initialValue:A)(implicitbuilder:monix.execution.atomic.AtomicBuilder[A,R]):monix.execution.atomic.AtomicBuilder[A,R]", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: A, padding: PaddingStrategy)(builder: AtomicBuilder[A, R]): R", "member" : "monix.execution.atomic.Atomic.withPadding", "link" : "monix\/execution\/atomic\/Atomic$.html#withPadding[A,R<:monix.execution.atomic.Atomic[A]](initialValue:A,padding:monix.execution.atomic.PaddingStrategy)(implicitbuilder:monix.execution.atomic.AtomicBuilder[A,R]):R", "kind" : "macro def"}, {"label" : "apply", "tail" : "(initialValue: A)(builder: AtomicBuilder[A, R]): R", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/Atomic$.html#apply[A,R<:monix.execution.atomic.Atomic[A]](initialValue:A)(implicitbuilder:monix.execution.atomic.AtomicBuilder[A,R]):R", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/Atomic$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/Atomic$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/Atomic$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/Atomic$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/Atomic$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/Atomic$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/Atomic$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/Atomic$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/Atomic$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/Atomic$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/Atomic$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/Atomic$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/Atomic$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/Atomic$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/Atomic$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/Atomic$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/Atomic.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicAny", "shortDescription" : "Atomic references wrapping AnyRef values.", "object" : "monix\/execution\/atomic\/AtomicAny$.html", "members_class" : [{"label" : "lazySet", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.AtomicAny.lazySet", "link" : "monix\/execution\/atomic\/AtomicAny.html#lazySet(update:A):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: A): A", "member" : "monix.execution.atomic.AtomicAny.getAndSet", "link" : "monix\/execution\/atomic\/AtomicAny.html#getAndSet(update:A):A", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: A, update: A): Boolean", "member" : "monix.execution.atomic.AtomicAny.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicAny.html#compareAndSet(expect:A,update:A):Boolean", "kind" : "def"}, {"label" : "set", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.AtomicAny.set", "link" : "monix\/execution\/atomic\/AtomicAny.html#set(update:A):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.atomic.AtomicAny.get", "link" : "monix\/execution\/atomic\/AtomicAny.html#get:A", "kind" : "def"}, {"label" : "transform", "tail" : "(cb: (A) ⇒ A): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicAny.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (A) ⇒ A): A", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicAny.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (A) ⇒ A): A", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicAny.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (A) ⇒ (U, A)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicAny.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicAny.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicAny.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicAny.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicAny.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicAny.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicAny.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicAny.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicAny.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicAny.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicAny.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicAny.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicAny.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicAny.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicAny.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicAny.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicAny.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicAny.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicAny.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicAny.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: A, padding: PaddingStrategy): AtomicAny[A]", "member" : "monix.execution.atomic.AtomicAny.safe", "link" : "monix\/execution\/atomic\/AtomicAny$.html#safe[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicAny[A]", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: A, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicAny[A]", "member" : "monix.execution.atomic.AtomicAny.create", "link" : "monix\/execution\/atomic\/AtomicAny$.html#create[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicAny[A]", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: A, padding: PaddingStrategy): AtomicAny[A]", "member" : "monix.execution.atomic.AtomicAny.withPadding", "link" : "monix\/execution\/atomic\/AtomicAny$.html#withPadding[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicAny[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: A): AtomicAny[A]", "member" : "monix.execution.atomic.AtomicAny.apply", "link" : "monix\/execution\/atomic\/AtomicAny$.html#apply[A<:AnyRef](initialValue:A):monix.execution.atomic.AtomicAny[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicAny$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicAny$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicAny$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicAny$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicAny$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicAny$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicAny$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicAny$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicAny$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicAny$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicAny$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicAny$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicAny$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicAny$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicAny$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicAny$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicAny.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicBoolean", "shortDescription" : "Atomic references wrapping Boolean values.", "object" : "monix\/execution\/atomic\/AtomicBoolean$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.execution.atomic.AtomicBoolean.toString", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#toString():String", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Boolean): Unit", "member" : "monix.execution.atomic.AtomicBoolean.lazySet", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#lazySet(update:Boolean):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Boolean): Boolean", "member" : "monix.execution.atomic.AtomicBoolean.getAndSet", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#getAndSet(update:Boolean):Boolean", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Boolean, update: Boolean): Boolean", "member" : "monix.execution.atomic.AtomicBoolean.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#compareAndSet(expect:Boolean,update:Boolean):Boolean", "kind" : "def"}, {"label" : "flip", "tail" : "(update: Boolean): Boolean", "member" : "monix.execution.atomic.AtomicBoolean.flip", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#flip(update:Boolean):Boolean", "kind" : "def"}, {"label" : "set", "tail" : "(update: Boolean): Unit", "member" : "monix.execution.atomic.AtomicBoolean.set", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#set(update:Boolean):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Boolean", "member" : "monix.execution.atomic.AtomicBoolean.get", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#get:Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(cb: (Boolean) ⇒ Boolean): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Boolean) ⇒ Boolean): Boolean", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Boolean) ⇒ Boolean): Boolean", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Boolean) ⇒ (U, Boolean)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: Boolean): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Boolean): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Boolean", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicBoolean.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Boolean, padding: PaddingStrategy): AtomicBoolean", "member" : "monix.execution.atomic.AtomicBoolean.safe", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#safe(initialValue:Boolean,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicBoolean", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Boolean, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicBoolean", "member" : "monix.execution.atomic.AtomicBoolean.create", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#create(initialValue:Boolean,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicBoolean", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Boolean, padding: PaddingStrategy): AtomicBoolean", "member" : "monix.execution.atomic.AtomicBoolean.withPadding", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#withPadding(initialValue:Boolean,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicBoolean", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Boolean): AtomicBoolean", "member" : "monix.execution.atomic.AtomicBoolean.apply", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#apply(initialValue:Boolean):monix.execution.atomic.AtomicBoolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicBoolean.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicBuilder", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicBuilder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "buildSafeInstance", "tail" : "(initialValue: A, padding: PaddingStrategy): R", "member" : "monix.execution.atomic.AtomicBuilder.buildSafeInstance", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#buildSafeInstance(initialValue:A,padding:monix.execution.atomic.PaddingStrategy):R", "kind" : "abstract def"}, {"label" : "buildInstance", "tail" : "(initialValue: A, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): R", "member" : "monix.execution.atomic.AtomicBuilder.buildInstance", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#buildInstance(initialValue:A,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):R", "kind" : "abstract def"}], "shortDescription" : "For a given A indicates the most specific Atomic[A]reference type to use.", "object" : "monix\/execution\/atomic\/AtomicBuilder$.html", "members_object" : [{"label" : "AtomicDoubleBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicDoubleBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicDoubleBuilder", "kind" : "implicit object"}, {"label" : "AtomicFloatBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicFloatBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicFloatBuilder", "kind" : "implicit object"}, {"label" : "AtomicShortBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicShortBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicShortBuilder", "kind" : "implicit object"}, {"label" : "AtomicCharBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicCharBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicCharBuilder", "kind" : "implicit object"}, {"label" : "AtomicByteBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicByteBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicByteBuilder", "kind" : "implicit object"}, {"label" : "AtomicBooleanBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicBooleanBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicBooleanBuilder", "kind" : "implicit object"}, {"label" : "AtomicLongBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicLongBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicLongBuilder", "kind" : "implicit object"}, {"label" : "AtomicIntBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicIntBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicIntBuilder", "kind" : "implicit object"}, {"label" : "AtomicNumberBuilder", "tail" : "(arg0: Numeric[A]): AtomicBuilder[A, AtomicNumberAny[A]]", "member" : "monix.execution.atomic.Implicits.Level2.AtomicNumberBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicNumberBuilder[A<:AnyRef](implicitevidence$1:Numeric[A]):monix.execution.atomic.AtomicBuilder[A,monix.execution.atomic.AtomicNumberAny[A]]", "kind" : "implicit def"}, {"label" : "AtomicRefBuilder", "tail" : "(): AtomicBuilder[A, AtomicAny[A]]", "member" : "monix.execution.atomic.Implicits.Level1.AtomicRefBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicRefBuilder[A<:AnyRef]:monix.execution.atomic.AtomicBuilder[A,monix.execution.atomic.AtomicAny[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/atomic\/AtomicBuilder.html", "kind" : "trait"}, {"name" : "monix.execution.atomic.AtomicByte", "shortDescription" : "Atomic references wrapping Byte values.", "object" : "monix\/execution\/atomic\/AtomicByte$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): Byte", "member" : "monix.execution.atomic.AtomicByte.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndDecrement(v:Int):Byte", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Byte", "member" : "monix.execution.atomic.AtomicByte.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicByte.html#decrementAndGet(v:Int):Byte", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicByte.decrement", "link" : "monix\/execution\/atomic\/AtomicByte.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Byte): Byte", "member" : "monix.execution.atomic.AtomicByte.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndSubtract(v:Byte):Byte", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Byte): Byte", "member" : "monix.execution.atomic.AtomicByte.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicByte.html#subtractAndGet(v:Byte):Byte", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Byte): Unit", "member" : "monix.execution.atomic.AtomicByte.subtract", "link" : "monix\/execution\/atomic\/AtomicByte.html#subtract(v:Byte):Unit", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Byte): Byte", "member" : "monix.execution.atomic.AtomicByte.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndAdd(v:Byte):Byte", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Byte", "member" : "monix.execution.atomic.AtomicByte.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndIncrement(v:Int):Byte", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Byte): Byte", "member" : "monix.execution.atomic.AtomicByte.addAndGet", "link" : "monix\/execution\/atomic\/AtomicByte.html#addAndGet(v:Byte):Byte", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Byte", "member" : "monix.execution.atomic.AtomicByte.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicByte.html#incrementAndGet(v:Int):Byte", "kind" : "def"}, {"label" : "add", "tail" : "(v: Byte): Unit", "member" : "monix.execution.atomic.AtomicByte.add", "link" : "monix\/execution\/atomic\/AtomicByte.html#add(v:Byte):Unit", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicByte.increment", "link" : "monix\/execution\/atomic\/AtomicByte.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Byte): Byte", "member" : "monix.execution.atomic.AtomicByte.getAndSet", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndSet(update:Byte):Byte", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Byte, update: Byte): Boolean", "member" : "monix.execution.atomic.AtomicByte.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicByte.html#compareAndSet(expect:Byte,update:Byte):Boolean", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Byte): Unit", "member" : "monix.execution.atomic.AtomicByte.lazySet", "link" : "monix\/execution\/atomic\/AtomicByte.html#lazySet(update:Byte):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(update: Byte): Unit", "member" : "monix.execution.atomic.AtomicByte.set", "link" : "monix\/execution\/atomic\/AtomicByte.html#set(update:Byte):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Byte", "member" : "monix.execution.atomic.AtomicByte.get", "link" : "monix\/execution\/atomic\/AtomicByte.html#get:Byte", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Byte): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicByte.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Byte): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicByte.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Byte) ⇒ Byte): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicByte.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Byte) ⇒ Byte): Byte", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Byte) ⇒ Byte): Byte", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicByte.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Byte) ⇒ (U, Byte)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicByte.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: Byte): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicByte.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Byte): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicByte.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Byte", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicByte.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicByte.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicByte.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicByte.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicByte.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicByte.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicByte.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicByte.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicByte.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicByte.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicByte.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicByte.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicByte.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicByte.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicByte.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicByte.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicByte.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Byte, padding: PaddingStrategy): AtomicByte", "member" : "monix.execution.atomic.AtomicByte.safe", "link" : "monix\/execution\/atomic\/AtomicByte$.html#safe(initialValue:Byte,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicByte", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Byte, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicByte", "member" : "monix.execution.atomic.AtomicByte.create", "link" : "monix\/execution\/atomic\/AtomicByte$.html#create(initialValue:Byte,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicByte", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Byte, padding: PaddingStrategy): AtomicByte", "member" : "monix.execution.atomic.AtomicByte.withPadding", "link" : "monix\/execution\/atomic\/AtomicByte$.html#withPadding(initialValue:Byte,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicByte", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Byte): AtomicByte", "member" : "monix.execution.atomic.AtomicByte.apply", "link" : "monix\/execution\/atomic\/AtomicByte$.html#apply(initialValue:Byte):monix.execution.atomic.AtomicByte", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicByte$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicByte$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicByte$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicByte$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicByte$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicByte$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicByte$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicByte$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicByte$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicByte$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicByte$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicByte$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicByte$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicByte$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicByte$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicByte$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicByte.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicChar", "shortDescription" : "Atomic references wrapping Char values.", "object" : "monix\/execution\/atomic\/AtomicChar$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): Char", "member" : "monix.execution.atomic.AtomicChar.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndDecrement(v:Int):Char", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Char", "member" : "monix.execution.atomic.AtomicChar.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicChar.html#decrementAndGet(v:Int):Char", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicChar.decrement", "link" : "monix\/execution\/atomic\/AtomicChar.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Char): Char", "member" : "monix.execution.atomic.AtomicChar.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndSubtract(v:Char):Char", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Char): Char", "member" : "monix.execution.atomic.AtomicChar.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicChar.html#subtractAndGet(v:Char):Char", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Char): Unit", "member" : "monix.execution.atomic.AtomicChar.subtract", "link" : "monix\/execution\/atomic\/AtomicChar.html#subtract(v:Char):Unit", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Char): Char", "member" : "monix.execution.atomic.AtomicChar.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndAdd(v:Char):Char", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Char", "member" : "monix.execution.atomic.AtomicChar.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndIncrement(v:Int):Char", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Char): Char", "member" : "monix.execution.atomic.AtomicChar.addAndGet", "link" : "monix\/execution\/atomic\/AtomicChar.html#addAndGet(v:Char):Char", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Char", "member" : "monix.execution.atomic.AtomicChar.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicChar.html#incrementAndGet(v:Int):Char", "kind" : "def"}, {"label" : "add", "tail" : "(v: Char): Unit", "member" : "monix.execution.atomic.AtomicChar.add", "link" : "monix\/execution\/atomic\/AtomicChar.html#add(v:Char):Unit", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicChar.increment", "link" : "monix\/execution\/atomic\/AtomicChar.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Char): Char", "member" : "monix.execution.atomic.AtomicChar.getAndSet", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndSet(update:Char):Char", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Char, update: Char): Boolean", "member" : "monix.execution.atomic.AtomicChar.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicChar.html#compareAndSet(expect:Char,update:Char):Boolean", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Char): Unit", "member" : "monix.execution.atomic.AtomicChar.lazySet", "link" : "monix\/execution\/atomic\/AtomicChar.html#lazySet(update:Char):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(update: Char): Unit", "member" : "monix.execution.atomic.AtomicChar.set", "link" : "monix\/execution\/atomic\/AtomicChar.html#set(update:Char):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Char", "member" : "monix.execution.atomic.AtomicChar.get", "link" : "monix\/execution\/atomic\/AtomicChar.html#get:Char", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Char): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicChar.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Char): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicChar.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Char) ⇒ Char): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicChar.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Char) ⇒ Char): Char", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Char) ⇒ Char): Char", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicChar.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Char) ⇒ (U, Char)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicChar.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: Char): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicChar.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Char): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicChar.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Char", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicChar.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicChar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicChar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicChar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicChar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicChar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicChar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicChar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicChar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicChar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicChar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicChar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicChar.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicChar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicChar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicChar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicChar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Char, padding: PaddingStrategy): AtomicChar", "member" : "monix.execution.atomic.AtomicChar.safe", "link" : "monix\/execution\/atomic\/AtomicChar$.html#safe(initialValue:Char,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicChar", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Char, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicChar", "member" : "monix.execution.atomic.AtomicChar.create", "link" : "monix\/execution\/atomic\/AtomicChar$.html#create(initialValue:Char,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicChar", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Char, padding: PaddingStrategy): AtomicChar", "member" : "monix.execution.atomic.AtomicChar.withPadding", "link" : "monix\/execution\/atomic\/AtomicChar$.html#withPadding(initialValue:Char,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicChar", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Char): AtomicChar", "member" : "monix.execution.atomic.AtomicChar.apply", "link" : "monix\/execution\/atomic\/AtomicChar$.html#apply(initialValue:Char):monix.execution.atomic.AtomicChar", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicChar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicChar$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicChar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicChar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicChar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicChar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicChar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicChar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicChar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicChar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicChar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicChar$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicChar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicChar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicChar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicChar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicChar.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicDouble", "shortDescription" : "Atomic references wrapping Double values.", "object" : "monix\/execution\/atomic\/AtomicDouble$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): Double", "member" : "monix.execution.atomic.AtomicDouble.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndDecrement(v:Int):Double", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Double", "member" : "monix.execution.atomic.AtomicDouble.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#decrementAndGet(v:Int):Double", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicDouble.decrement", "link" : "monix\/execution\/atomic\/AtomicDouble.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Double): Double", "member" : "monix.execution.atomic.AtomicDouble.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndSubtract(v:Double):Double", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Double): Double", "member" : "monix.execution.atomic.AtomicDouble.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#subtractAndGet(v:Double):Double", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Double): Unit", "member" : "monix.execution.atomic.AtomicDouble.subtract", "link" : "monix\/execution\/atomic\/AtomicDouble.html#subtract(v:Double):Unit", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Double): Double", "member" : "monix.execution.atomic.AtomicDouble.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndAdd(v:Double):Double", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Double", "member" : "monix.execution.atomic.AtomicDouble.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndIncrement(v:Int):Double", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Double): Double", "member" : "monix.execution.atomic.AtomicDouble.addAndGet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#addAndGet(v:Double):Double", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Double", "member" : "monix.execution.atomic.AtomicDouble.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#incrementAndGet(v:Int):Double", "kind" : "def"}, {"label" : "add", "tail" : "(v: Double): Unit", "member" : "monix.execution.atomic.AtomicDouble.add", "link" : "monix\/execution\/atomic\/AtomicDouble.html#add(v:Double):Unit", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicDouble.increment", "link" : "monix\/execution\/atomic\/AtomicDouble.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Double): Double", "member" : "monix.execution.atomic.AtomicDouble.getAndSet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndSet(update:Double):Double", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Double, update: Double): Boolean", "member" : "monix.execution.atomic.AtomicDouble.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#compareAndSet(expect:Double,update:Double):Boolean", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Double): Unit", "member" : "monix.execution.atomic.AtomicDouble.lazySet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#lazySet(update:Double):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(update: Double): Unit", "member" : "monix.execution.atomic.AtomicDouble.set", "link" : "monix\/execution\/atomic\/AtomicDouble.html#set(update:Double):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Double", "member" : "monix.execution.atomic.AtomicDouble.get", "link" : "monix\/execution\/atomic\/AtomicDouble.html#get:Double", "kind" : "def"}, {"label" : "ref", "tail" : ": BoxedLong", "member" : "monix.execution.atomic.AtomicDouble.ref", "link" : "monix\/execution\/atomic\/AtomicDouble.html#ref:monix.execution.internal.atomic.BoxedLong", "kind" : "val"}, {"label" : "+=", "tail" : "(value: Double): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicDouble.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Double): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicDouble.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Double) ⇒ Double): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicDouble.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Double) ⇒ Double): Double", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Double) ⇒ Double): Double", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Double) ⇒ (U, Double)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicDouble.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: Double): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicDouble.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Double): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicDouble.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Double", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicDouble.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicDouble.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicDouble.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicDouble.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicDouble.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicDouble.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicDouble.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicDouble.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicDouble.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicDouble.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicDouble.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicDouble.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicDouble.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicDouble.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicDouble.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicDouble.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Double, padding: PaddingStrategy): AtomicDouble", "member" : "monix.execution.atomic.AtomicDouble.safe", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#safe(initialValue:Double,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicDouble", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Double, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicDouble", "member" : "monix.execution.atomic.AtomicDouble.create", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#create(initialValue:Double,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicDouble", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Double, padding: PaddingStrategy): AtomicDouble", "member" : "monix.execution.atomic.AtomicDouble.withPadding", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#withPadding(initialValue:Double,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicDouble", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Double): AtomicDouble", "member" : "monix.execution.atomic.AtomicDouble.apply", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#apply(initialValue:Double):monix.execution.atomic.AtomicDouble", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicDouble$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicDouble.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicFloat", "shortDescription" : "Atomic references wrapping Float values.", "object" : "monix\/execution\/atomic\/AtomicFloat$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): Float", "member" : "monix.execution.atomic.AtomicFloat.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndDecrement(v:Int):Float", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Float", "member" : "monix.execution.atomic.AtomicFloat.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#decrementAndGet(v:Int):Float", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicFloat.decrement", "link" : "monix\/execution\/atomic\/AtomicFloat.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Float): Float", "member" : "monix.execution.atomic.AtomicFloat.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndSubtract(v:Float):Float", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Float): Float", "member" : "monix.execution.atomic.AtomicFloat.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#subtractAndGet(v:Float):Float", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Float): Unit", "member" : "monix.execution.atomic.AtomicFloat.subtract", "link" : "monix\/execution\/atomic\/AtomicFloat.html#subtract(v:Float):Unit", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Float): Float", "member" : "monix.execution.atomic.AtomicFloat.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndAdd(v:Float):Float", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Float", "member" : "monix.execution.atomic.AtomicFloat.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndIncrement(v:Int):Float", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Float): Float", "member" : "monix.execution.atomic.AtomicFloat.addAndGet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#addAndGet(v:Float):Float", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Float", "member" : "monix.execution.atomic.AtomicFloat.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#incrementAndGet(v:Int):Float", "kind" : "def"}, {"label" : "add", "tail" : "(v: Float): Unit", "member" : "monix.execution.atomic.AtomicFloat.add", "link" : "monix\/execution\/atomic\/AtomicFloat.html#add(v:Float):Unit", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicFloat.increment", "link" : "monix\/execution\/atomic\/AtomicFloat.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Float): Float", "member" : "monix.execution.atomic.AtomicFloat.getAndSet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndSet(update:Float):Float", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Float, update: Float): Boolean", "member" : "monix.execution.atomic.AtomicFloat.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#compareAndSet(expect:Float,update:Float):Boolean", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Float): Unit", "member" : "monix.execution.atomic.AtomicFloat.lazySet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#lazySet(update:Float):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(update: Float): Unit", "member" : "monix.execution.atomic.AtomicFloat.set", "link" : "monix\/execution\/atomic\/AtomicFloat.html#set(update:Float):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Float", "member" : "monix.execution.atomic.AtomicFloat.get", "link" : "monix\/execution\/atomic\/AtomicFloat.html#get:Float", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Float): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicFloat.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Float): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicFloat.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Float) ⇒ Float): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicFloat.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Float) ⇒ Float): Float", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Float) ⇒ Float): Float", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Float) ⇒ (U, Float)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicFloat.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: Float): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicFloat.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Float): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicFloat.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Float", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicFloat.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicFloat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicFloat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicFloat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicFloat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicFloat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicFloat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicFloat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicFloat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicFloat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicFloat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicFloat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicFloat.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicFloat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicFloat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicFloat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Float, padding: PaddingStrategy): AtomicFloat", "member" : "monix.execution.atomic.AtomicFloat.safe", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#safe(initialValue:Float,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicFloat", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Float, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicFloat", "member" : "monix.execution.atomic.AtomicFloat.create", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#create(initialValue:Float,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicFloat", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Float, padding: PaddingStrategy): AtomicFloat", "member" : "monix.execution.atomic.AtomicFloat.withPadding", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#withPadding(initialValue:Float,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicFloat", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Float): AtomicFloat", "member" : "monix.execution.atomic.AtomicFloat.apply", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#apply(initialValue:Float):monix.execution.atomic.AtomicFloat", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicFloat$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicFloat.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicInt", "shortDescription" : "Atomic references wrapping Int values.", "object" : "monix\/execution\/atomic\/AtomicInt$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.execution.atomic.AtomicInt.toString", "link" : "monix\/execution\/atomic\/AtomicInt.html#toString():String", "kind" : "def"}, {"label" : "getAndDecrement", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndDecrement(v:Int):Int", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicInt.html#decrementAndGet(v:Int):Int", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.decrement", "link" : "monix\/execution\/atomic\/AtomicInt.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicInt.html#subtractAndGet(v:Int):Int", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndSubtract(v:Int):Int", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.subtract", "link" : "monix\/execution\/atomic\/AtomicInt.html#subtract(v:Int):Unit", "kind" : "def"}, {"label" : "add", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.add", "link" : "monix\/execution\/atomic\/AtomicInt.html#add(v:Int):Unit", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.addAndGet", "link" : "monix\/execution\/atomic\/AtomicInt.html#addAndGet(v:Int):Int", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndAdd(v:Int):Int", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndIncrement(v:Int):Int", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicInt.html#incrementAndGet(v:Int):Int", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.increment", "link" : "monix\/execution\/atomic\/AtomicInt.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.lazySet", "link" : "monix\/execution\/atomic\/AtomicInt.html#lazySet(update:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Int): Int", "member" : "monix.execution.atomic.AtomicInt.getAndSet", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndSet(update:Int):Int", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Int, update: Int): Boolean", "member" : "monix.execution.atomic.AtomicInt.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicInt.html#compareAndSet(expect:Int,update:Int):Boolean", "kind" : "def"}, {"label" : "set", "tail" : "(update: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.set", "link" : "monix\/execution\/atomic\/AtomicInt.html#set(update:Int):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Int", "member" : "monix.execution.atomic.AtomicInt.get", "link" : "monix\/execution\/atomic\/AtomicInt.html#get:Int", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Int): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicInt.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Int): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicInt.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Int) ⇒ Int): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicInt.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Int) ⇒ Int): Int", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Int) ⇒ Int): Int", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicInt.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Int) ⇒ (U, Int)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicInt.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: Int): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicInt.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Int): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicInt.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Int", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicInt.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicInt.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicInt.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicInt.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicInt.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicInt.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicInt.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicInt.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicInt.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicInt.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicInt.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicInt.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicInt.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicInt.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicInt.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicInt.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Int, padding: PaddingStrategy): AtomicInt", "member" : "monix.execution.atomic.AtomicInt.safe", "link" : "monix\/execution\/atomic\/AtomicInt$.html#safe(initialValue:Int,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicInt", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Int, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicInt", "member" : "monix.execution.atomic.AtomicInt.create", "link" : "monix\/execution\/atomic\/AtomicInt$.html#create(initialValue:Int,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicInt", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Int, padding: PaddingStrategy): AtomicInt", "member" : "monix.execution.atomic.AtomicInt.withPadding", "link" : "monix\/execution\/atomic\/AtomicInt$.html#withPadding(initialValue:Int,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicInt", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Int): AtomicInt", "member" : "monix.execution.atomic.AtomicInt.apply", "link" : "monix\/execution\/atomic\/AtomicInt$.html#apply(initialValue:Int):monix.execution.atomic.AtomicInt", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicInt$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicInt$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicInt$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicInt$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicInt$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicInt$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicInt$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicInt$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicInt$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicInt$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicInt$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicInt$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicInt$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicInt$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicInt$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicInt$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicInt.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicLong", "shortDescription" : "Atomic references wrapping Long values.", "object" : "monix\/execution\/atomic\/AtomicLong$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.execution.atomic.AtomicLong.toString", "link" : "monix\/execution\/atomic\/AtomicLong.html#toString():String", "kind" : "def"}, {"label" : "getAndDecrement", "tail" : "(v: Int): Long", "member" : "monix.execution.atomic.AtomicLong.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndDecrement(v:Int):Long", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Long", "member" : "monix.execution.atomic.AtomicLong.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicLong.html#decrementAndGet(v:Int):Long", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicLong.decrement", "link" : "monix\/execution\/atomic\/AtomicLong.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Long): Long", "member" : "monix.execution.atomic.AtomicLong.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicLong.html#subtractAndGet(v:Long):Long", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Long): Long", "member" : "monix.execution.atomic.AtomicLong.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndSubtract(v:Long):Long", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Long): Unit", "member" : "monix.execution.atomic.AtomicLong.subtract", "link" : "monix\/execution\/atomic\/AtomicLong.html#subtract(v:Long):Unit", "kind" : "def"}, {"label" : "add", "tail" : "(v: Long): Unit", "member" : "monix.execution.atomic.AtomicLong.add", "link" : "monix\/execution\/atomic\/AtomicLong.html#add(v:Long):Unit", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Long): Long", "member" : "monix.execution.atomic.AtomicLong.addAndGet", "link" : "monix\/execution\/atomic\/AtomicLong.html#addAndGet(v:Long):Long", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Long): Long", "member" : "monix.execution.atomic.AtomicLong.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndAdd(v:Long):Long", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Long", "member" : "monix.execution.atomic.AtomicLong.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndIncrement(v:Int):Long", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Long", "member" : "monix.execution.atomic.AtomicLong.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicLong.html#incrementAndGet(v:Int):Long", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicLong.increment", "link" : "monix\/execution\/atomic\/AtomicLong.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Long): Unit", "member" : "monix.execution.atomic.AtomicLong.lazySet", "link" : "monix\/execution\/atomic\/AtomicLong.html#lazySet(update:Long):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Long): Long", "member" : "monix.execution.atomic.AtomicLong.getAndSet", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndSet(update:Long):Long", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Long, update: Long): Boolean", "member" : "monix.execution.atomic.AtomicLong.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicLong.html#compareAndSet(expect:Long,update:Long):Boolean", "kind" : "def"}, {"label" : "set", "tail" : "(update: Long): Unit", "member" : "monix.execution.atomic.AtomicLong.set", "link" : "monix\/execution\/atomic\/AtomicLong.html#set(update:Long):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Long", "member" : "monix.execution.atomic.AtomicLong.get", "link" : "monix\/execution\/atomic\/AtomicLong.html#get:Long", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Long): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicLong.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Long): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicLong.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Long) ⇒ Long): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicLong.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Long) ⇒ Long): Long", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Long) ⇒ Long): Long", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicLong.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Long) ⇒ (U, Long)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicLong.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: Long): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicLong.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Long): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicLong.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Long", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicLong.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicLong.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicLong.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicLong.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicLong.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicLong.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicLong.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicLong.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicLong.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicLong.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicLong.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicLong.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicLong.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicLong.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicLong.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicLong.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Long, padding: PaddingStrategy): AtomicLong", "member" : "monix.execution.atomic.AtomicLong.safe", "link" : "monix\/execution\/atomic\/AtomicLong$.html#safe(initialValue:Long,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicLong", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Long, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicLong", "member" : "monix.execution.atomic.AtomicLong.create", "link" : "monix\/execution\/atomic\/AtomicLong$.html#create(initialValue:Long,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicLong", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Long, padding: PaddingStrategy): AtomicLong", "member" : "monix.execution.atomic.AtomicLong.withPadding", "link" : "monix\/execution\/atomic\/AtomicLong$.html#withPadding(initialValue:Long,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicLong", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Long): AtomicLong", "member" : "monix.execution.atomic.AtomicLong.apply", "link" : "monix\/execution\/atomic\/AtomicLong$.html#apply(initialValue:Long):monix.execution.atomic.AtomicLong", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicLong$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicLong$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicLong$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicLong$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicLong$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicLong$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicLong$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicLong$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicLong$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicLong$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicLong$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicLong$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicLong$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicLong$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicLong$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicLong$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicLong.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicNumber", "shortDescription" : "Represents an Atomic reference holding a number, providing helpersfor easily incrementing and decrementing it.", "members_class" : [{"label" : "+=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicNumber.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicNumber.html#-=(value:A):Unit", "kind" : "final macro def"}, {"member" : "monix.execution.atomic.AtomicNumber#<init>", "error" : "unsupported entity"}, {"label" : "transform", "tail" : "(cb: (A) ⇒ A): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicNumber.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (A) ⇒ A): A", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (A) ⇒ A): A", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (A) ⇒ (U, A)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicNumber.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicNumber.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicNumber.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicNumber.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicNumber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicNumber.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicNumber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicNumber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicNumber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicNumber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicNumber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicNumber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicNumber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicNumber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicNumber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicNumber.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicNumber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getAndSubtract", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumber.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndSubtract(v:A):A", "kind" : "abstract def"}, {"label" : "getAndDecrement", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumber.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndDecrement(v:Int):A", "kind" : "abstract def"}, {"label" : "getAndAdd", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumber.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndAdd(v:A):A", "kind" : "abstract def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumber.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndIncrement(v:Int):A", "kind" : "abstract def"}, {"label" : "subtractAndGet", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumber.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#subtractAndGet(v:A):A", "kind" : "abstract def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumber.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#decrementAndGet(v:Int):A", "kind" : "abstract def"}, {"label" : "addAndGet", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumber.addAndGet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#addAndGet(v:A):A", "kind" : "abstract def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumber.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#incrementAndGet(v:Int):A", "kind" : "abstract def"}, {"label" : "subtract", "tail" : "(v: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.subtract", "link" : "monix\/execution\/atomic\/AtomicNumber.html#subtract(v:A):Unit", "kind" : "abstract def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicNumber.decrement", "link" : "monix\/execution\/atomic\/AtomicNumber.html#decrement(v:Int):Unit", "kind" : "abstract def"}, {"label" : "add", "tail" : "(v: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.add", "link" : "monix\/execution\/atomic\/AtomicNumber.html#add(v:A):Unit", "kind" : "abstract def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicNumber.increment", "link" : "monix\/execution\/atomic\/AtomicNumber.html#increment(v:Int):Unit", "kind" : "abstract def"}, {"label" : "lazySet", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.Atomic.lazySet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#lazySet(update:A):Unit", "kind" : "abstract def"}, {"label" : "getAndSet", "tail" : "(update: A): A", "member" : "monix.execution.atomic.Atomic.getAndSet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndSet(update:A):A", "kind" : "abstract def"}, {"label" : "compareAndSet", "tail" : "(expect: A, update: A): Boolean", "member" : "monix.execution.atomic.Atomic.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#compareAndSet(expect:A,update:A):Boolean", "kind" : "abstract def"}, {"label" : "set", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.Atomic.set", "link" : "monix\/execution\/atomic\/AtomicNumber.html#set(update:A):Unit", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.get", "link" : "monix\/execution\/atomic\/AtomicNumber.html#get:A", "kind" : "abstract def"}], "class" : "monix\/execution\/atomic\/AtomicNumber.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicNumberAny", "shortDescription" : "Atomic references wrapping any values implementingScala's Numeric type class.", "object" : "monix\/execution\/atomic\/AtomicNumberAny$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumberAny.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndDecrement(v:Int):A", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumberAny.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#decrementAndGet(v:Int):A", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.decrement", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumberAny.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#subtractAndGet(v:A):A", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumberAny.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndSubtract(v:A):A", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: A): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.subtract", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#subtract(v:A):Unit", "kind" : "def"}, {"label" : "add", "tail" : "(v: A): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.add", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#add(v:A):Unit", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumberAny.addAndGet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#addAndGet(v:A):A", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumberAny.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndAdd(v:A):A", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumberAny.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndIncrement(v:Int):A", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumberAny.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#incrementAndGet(v:Int):A", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.increment", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.lazySet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#lazySet(update:A):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: A): A", "member" : "monix.execution.atomic.AtomicNumberAny.getAndSet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndSet(update:A):A", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: A, update: A): Boolean", "member" : "monix.execution.atomic.AtomicNumberAny.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#compareAndSet(expect:A,update:A):Boolean", "kind" : "def"}, {"label" : "set", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.set", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#set(update:A):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.atomic.AtomicNumberAny.get", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#get:A", "kind" : "def"}, {"label" : "+=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (A) ⇒ A): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (A) ⇒ A): A", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (A) ⇒ A): A", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (A) ⇒ (U, A)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: A, padding: PaddingStrategy)(arg0: Numeric[A]): AtomicNumberAny[A]", "member" : "monix.execution.atomic.AtomicNumberAny.safe", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#safe[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy)(implicitevidence$5:Numeric[A]):monix.execution.atomic.AtomicNumberAny[A]", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: A, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean)(arg0: Numeric[A]): AtomicNumberAny[A]", "member" : "monix.execution.atomic.AtomicNumberAny.create", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#create[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean)(implicitevidence$4:Numeric[A]):monix.execution.atomic.AtomicNumberAny[A]", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: A, padding: PaddingStrategy)(arg0: Numeric[A]): AtomicNumberAny[A]", "member" : "monix.execution.atomic.AtomicNumberAny.withPadding", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#withPadding[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy)(implicitevidence$3:Numeric[A]):monix.execution.atomic.AtomicNumberAny[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: A)(arg0: Numeric[A]): AtomicNumberAny[A]", "member" : "monix.execution.atomic.AtomicNumberAny.apply", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#apply[A<:AnyRef](initialValue:A)(implicitevidence$2:Numeric[A]):monix.execution.atomic.AtomicNumberAny[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicNumberAny.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicShort", "shortDescription" : "Atomic references wrapping Short values.", "object" : "monix\/execution\/atomic\/AtomicShort$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): Short", "member" : "monix.execution.atomic.AtomicShort.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndDecrement(v:Int):Short", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Short", "member" : "monix.execution.atomic.AtomicShort.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicShort.html#decrementAndGet(v:Int):Short", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicShort.decrement", "link" : "monix\/execution\/atomic\/AtomicShort.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Short): Short", "member" : "monix.execution.atomic.AtomicShort.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndSubtract(v:Short):Short", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Short): Short", "member" : "monix.execution.atomic.AtomicShort.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicShort.html#subtractAndGet(v:Short):Short", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Short): Unit", "member" : "monix.execution.atomic.AtomicShort.subtract", "link" : "monix\/execution\/atomic\/AtomicShort.html#subtract(v:Short):Unit", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Short): Short", "member" : "monix.execution.atomic.AtomicShort.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndAdd(v:Short):Short", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Short", "member" : "monix.execution.atomic.AtomicShort.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndIncrement(v:Int):Short", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Short): Short", "member" : "monix.execution.atomic.AtomicShort.addAndGet", "link" : "monix\/execution\/atomic\/AtomicShort.html#addAndGet(v:Short):Short", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Short", "member" : "monix.execution.atomic.AtomicShort.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicShort.html#incrementAndGet(v:Int):Short", "kind" : "def"}, {"label" : "add", "tail" : "(v: Short): Unit", "member" : "monix.execution.atomic.AtomicShort.add", "link" : "monix\/execution\/atomic\/AtomicShort.html#add(v:Short):Unit", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicShort.increment", "link" : "monix\/execution\/atomic\/AtomicShort.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Short): Short", "member" : "monix.execution.atomic.AtomicShort.getAndSet", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndSet(update:Short):Short", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Short, update: Short): Boolean", "member" : "monix.execution.atomic.AtomicShort.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicShort.html#compareAndSet(expect:Short,update:Short):Boolean", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Short): Unit", "member" : "monix.execution.atomic.AtomicShort.lazySet", "link" : "monix\/execution\/atomic\/AtomicShort.html#lazySet(update:Short):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(update: Short): Unit", "member" : "monix.execution.atomic.AtomicShort.set", "link" : "monix\/execution\/atomic\/AtomicShort.html#set(update:Short):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Short", "member" : "monix.execution.atomic.AtomicShort.get", "link" : "monix\/execution\/atomic\/AtomicShort.html#get:Short", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Short): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicShort.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Short): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicShort.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Short) ⇒ Short): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicShort.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Short) ⇒ Short): Short", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Short) ⇒ Short): Short", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicShort.html#transformAndGet(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Short) ⇒ (U, Short)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicShort.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(value: Short): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicShort.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Short): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicShort.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Short", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicShort.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicShort.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicShort.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicShort.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicShort.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicShort.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicShort.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicShort.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicShort.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicShort.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicShort.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicShort.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicShort.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicShort.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicShort.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicShort.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicShort.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Short, padding: PaddingStrategy): AtomicShort", "member" : "monix.execution.atomic.AtomicShort.safe", "link" : "monix\/execution\/atomic\/AtomicShort$.html#safe(initialValue:Short,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicShort", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Short, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicShort", "member" : "monix.execution.atomic.AtomicShort.create", "link" : "monix\/execution\/atomic\/AtomicShort$.html#create(initialValue:Short,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicShort", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Short, padding: PaddingStrategy): AtomicShort", "member" : "monix.execution.atomic.AtomicShort.withPadding", "link" : "monix\/execution\/atomic\/AtomicShort$.html#withPadding(initialValue:Short,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicShort", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Short): AtomicShort", "member" : "monix.execution.atomic.AtomicShort.apply", "link" : "monix\/execution\/atomic\/AtomicShort$.html#apply(initialValue:Short):monix.execution.atomic.AtomicShort", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicShort$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicShort$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicShort$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicShort$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicShort$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicShort$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicShort$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicShort$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicShort$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicShort$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicShort$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicShort$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicShort$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicShort$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicShort$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicShort$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicShort.html", "kind" : "class"}, {"name" : "monix.execution.atomic.PaddingStrategy", "shortDescription" : "For applying padding to atomic references, in order to reducecache contention.", "object" : "monix\/execution\/atomic\/PaddingStrategy$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/PaddingStrategy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "LeftRight256", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.LeftRight256", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#LeftRight256", "kind" : "object"}, {"label" : "Right128", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.Right128", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#Right128", "kind" : "object"}, {"label" : "Left128", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.Left128", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#Left128", "kind" : "object"}, {"label" : "LeftRight128", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.LeftRight128", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#LeftRight128", "kind" : "object"}, {"label" : "Right64", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.Right64", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#Right64", "kind" : "object"}, {"label" : "Left64", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.Left64", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#Left64", "kind" : "object"}, {"label" : "NoPadding", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.NoPadding", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#NoPadding", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/PaddingStrategy.html", "kind" : "class"}], "monix.execution.exceptions" : [{"name" : "monix.execution.exceptions.APIContractViolationException", "shortDescription" : "Generic exception thrown on API contract violations.", "object" : "monix\/execution\/exceptions\/APIContractViolationException$.html", "members_class" : [{"member" : "monix.execution.exceptions.APIContractViolationException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.APIContractViolationException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.APIContractViolationException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "monix.execution.exceptions.APIContractViolationException.message", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(message: String): APIContractViolationException", "member" : "monix.execution.exceptions.APIContractViolationException.apply", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#apply(message:String):monix.execution.exceptions.APIContractViolationException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (APIContractViolationException) ⇒ A): (String) ⇒ A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ String): (A) ⇒ APIContractViolationException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/APIContractViolationException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.BufferOverflowException", "shortDescription" : "An exception emitted on buffer overflows, like when usingOverflowStrategy.Fail.", "object" : "monix\/execution\/exceptions\/BufferOverflowException$.html", "members_class" : [{"member" : "monix.execution.exceptions.BufferOverflowException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "monix.execution.exceptions.BufferOverflowException.message", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(message: String): BufferOverflowException", "member" : "monix.execution.exceptions.BufferOverflowException.apply", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#apply(message:String):monix.execution.exceptions.BufferOverflowException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (BufferOverflowException) ⇒ A): (String) ⇒ A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ String): (A) ⇒ BufferOverflowException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/BufferOverflowException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.CompositeException", "shortDescription" : "A composite exception represents a list of exceptionsthat were caught while delaying errors.", "object" : "monix\/execution\/exceptions\/CompositeException$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.execution.exceptions.CompositeException.toString", "link" : "monix\/execution\/exceptions\/CompositeException.html#toString():String", "kind" : "def"}, {"member" : "monix.execution.exceptions.CompositeException#<init>", "error" : "unsupported entity"}, {"label" : "errors", "tail" : ": Seq[Throwable]", "member" : "monix.execution.exceptions.CompositeException.errors", "link" : "monix\/execution\/exceptions\/CompositeException.html#errors:Seq[Throwable]", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/CompositeException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/CompositeException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/CompositeException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/CompositeException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/CompositeException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/CompositeException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/CompositeException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/CompositeException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/CompositeException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/CompositeException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/CompositeException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/CompositeException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/CompositeException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/CompositeException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/CompositeException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/CompositeException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/CompositeException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/CompositeException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/CompositeException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/CompositeException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/CompositeException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unapply", "tail" : "(ref: CompositeException): Option[Seq[Throwable]]", "member" : "monix.execution.exceptions.CompositeException.unapply", "link" : "monix\/execution\/exceptions\/CompositeException$.html#unapply(ref:monix.execution.exceptions.CompositeException):Option[Seq[Throwable]]", "kind" : "def"}, {"label" : "apply", "tail" : "(errors: Seq[Throwable]): CompositeException", "member" : "monix.execution.exceptions.CompositeException.apply", "link" : "monix\/execution\/exceptions\/CompositeException$.html#apply(errors:Seq[Throwable]):monix.execution.exceptions.CompositeException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/CompositeException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (CompositeException) ⇒ A): (Seq[Throwable]) ⇒ A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/CompositeException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Seq[Throwable]): (A) ⇒ CompositeException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/CompositeException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/CompositeException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/CompositeException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/CompositeException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/CompositeException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/CompositeException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/CompositeException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/CompositeException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/CompositeException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/CompositeException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/CompositeException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/CompositeException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/CompositeException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/CompositeException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/CompositeException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/CompositeException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/CompositeException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.DownstreamTimeoutException", "shortDescription" : "Exception thrown whenever a downstream listener on aback-pressured data-source is taking too long to processa received event.", "object" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html", "members_class" : [{"member" : "monix.execution.exceptions.DownstreamTimeoutException#<init>", "error" : "unsupported entity"}, {"label" : "timeout", "tail" : ": FiniteDuration", "member" : "monix.execution.exceptions.DownstreamTimeoutException.timeout", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#timeout:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unapply", "tail" : "(ex: DownstreamTimeoutException): Option[FiniteDuration]", "member" : "monix.execution.exceptions.DownstreamTimeoutException.unapply", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#unapply(ex:monix.execution.exceptions.DownstreamTimeoutException):Option[scala.concurrent.duration.FiniteDuration]", "kind" : "def"}, {"label" : "apply", "tail" : "(timeout: FiniteDuration): DownstreamTimeoutException", "member" : "monix.execution.exceptions.DownstreamTimeoutException.apply", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#apply(timeout:scala.concurrent.duration.FiniteDuration):monix.execution.exceptions.DownstreamTimeoutException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (DownstreamTimeoutException) ⇒ A): (FiniteDuration) ⇒ A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ FiniteDuration): (A) ⇒ DownstreamTimeoutException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.DummyException", "shortDescription" : "Used in testing to trigger dummy exceptions.", "members_case class" : [{"member" : "monix.execution.exceptions.DummyException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.DummyException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "monix.execution.exceptions.DummyException.message", "link" : "monix\/execution\/exceptions\/DummyException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/DummyException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/DummyException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/DummyException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/DummyException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/DummyException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/DummyException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/DummyException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/DummyException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/DummyException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/DummyException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/DummyException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/DummyException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/DummyException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/DummyException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DummyException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DummyException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DummyException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/DummyException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/DummyException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/DummyException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/DummyException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/DummyException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/DummyException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/execution\/exceptions\/DummyException.html", "kind" : "case class"}, {"name" : "monix.execution.exceptions.ExecutionRejectedException", "shortDescription" : "Exception thrown whenever an execution attempt was rejected.", "object" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html", "members_class" : [{"member" : "monix.execution.exceptions.ExecutionRejectedException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.ExecutionRejectedException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.ExecutionRejectedException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "monix.execution.exceptions.ExecutionRejectedException.message", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(message: String): ExecutionRejectedException", "member" : "monix.execution.exceptions.ExecutionRejectedException.apply", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#apply(message:String):monix.execution.exceptions.ExecutionRejectedException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (ExecutionRejectedException) ⇒ A): (String) ⇒ A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ String): (A) ⇒ ExecutionRejectedException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/ExecutionRejectedException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.UpstreamTimeoutException", "shortDescription" : "Exception thrown whenever a upstream listener on aback-pressured data-source is taking too long to processa received event.", "object" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html", "members_class" : [{"member" : "monix.execution.exceptions.UpstreamTimeoutException#<init>", "error" : "unsupported entity"}, {"label" : "timeout", "tail" : ": FiniteDuration", "member" : "monix.execution.exceptions.UpstreamTimeoutException.timeout", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#timeout:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unapply", "tail" : "(ex: UpstreamTimeoutException): Option[FiniteDuration]", "member" : "monix.execution.exceptions.UpstreamTimeoutException.unapply", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#unapply(ex:monix.execution.exceptions.UpstreamTimeoutException):Option[scala.concurrent.duration.FiniteDuration]", "kind" : "def"}, {"label" : "apply", "tail" : "(timeout: FiniteDuration): UpstreamTimeoutException", "member" : "monix.execution.exceptions.UpstreamTimeoutException.apply", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#apply(timeout:scala.concurrent.duration.FiniteDuration):monix.execution.exceptions.UpstreamTimeoutException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (UpstreamTimeoutException) ⇒ A): (FiniteDuration) ⇒ A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ FiniteDuration): (A) ⇒ UpstreamTimeoutException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html", "kind" : "class"}], "monix.execution.misc" : [{"name" : "monix.execution.misc.AsyncQueue", "shortDescription" : "And asynchronous queue implementation.", "object" : "monix\/execution\/misc\/AsyncQueue$.html", "members_class" : [{"label" : "clearAndOffer", "tail" : "(elem: A): Unit", "member" : "monix.execution.misc.AsyncQueue.clearAndOffer", "link" : "monix\/execution\/misc\/AsyncQueue.html#clearAndOffer(elem:A):Unit", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "monix.execution.misc.AsyncQueue.clear", "link" : "monix\/execution\/misc\/AsyncQueue.html#clear():Unit", "kind" : "def"}, {"label" : "offer", "tail" : "(elem: A): Unit", "member" : "monix.execution.misc.AsyncQueue.offer", "link" : "monix\/execution\/misc\/AsyncQueue.html#offer(elem:A):Unit", "kind" : "def"}, {"label" : "poll", "tail" : "(): Future[A]", "member" : "monix.execution.misc.AsyncQueue.poll", "link" : "monix\/execution\/misc\/AsyncQueue.html#poll():scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/AsyncQueue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/AsyncQueue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/AsyncQueue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/AsyncQueue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/AsyncQueue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/AsyncQueue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/AsyncQueue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncQueue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncQueue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncQueue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/AsyncQueue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/AsyncQueue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/AsyncQueue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/AsyncQueue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/AsyncQueue.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/AsyncQueue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/AsyncQueue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/AsyncQueue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/AsyncQueue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "from", "tail" : "(queue: Queue[A]): AsyncQueue[A]", "member" : "monix.execution.misc.AsyncQueue.from", "link" : "monix\/execution\/misc\/AsyncQueue$.html#from[A](queue:scala.collection.immutable.Queue[A]):monix.execution.misc.AsyncQueue[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): AsyncQueue[A]", "member" : "monix.execution.misc.AsyncQueue.empty", "link" : "monix\/execution\/misc\/AsyncQueue$.html#empty[A]:monix.execution.misc.AsyncQueue[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(elems: A*): AsyncQueue[A]", "member" : "monix.execution.misc.AsyncQueue.apply", "link" : "monix\/execution\/misc\/AsyncQueue$.html#apply[A](elems:A*):monix.execution.misc.AsyncQueue[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/AsyncQueue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/AsyncQueue$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/AsyncQueue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/AsyncQueue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/AsyncQueue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/AsyncQueue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/AsyncQueue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncQueue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncQueue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncQueue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/AsyncQueue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/AsyncQueue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/AsyncQueue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/AsyncQueue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/AsyncQueue$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/AsyncQueue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/AsyncQueue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/AsyncQueue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/AsyncQueue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/misc\/AsyncQueue.html", "kind" : "class"}, {"name" : "monix.execution.misc.AsyncSemaphore", "shortDescription" : "The AsyncSemaphore is an asynchronous semaphore implementation thatlimits the parallelism on Future execution.", "object" : "monix\/execution\/misc\/AsyncSemaphore$.html", "members_class" : [{"label" : "awaitAllReleased", "tail" : "(): Future[Unit]", "member" : "monix.execution.misc.AsyncSemaphore.awaitAllReleased", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#awaitAllReleased():scala.concurrent.Future[Unit]", "kind" : "def"}, {"label" : "release", "tail" : "(): Unit", "member" : "monix.execution.misc.AsyncSemaphore.release", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#release():Unit", "kind" : "def"}, {"label" : "acquire", "tail" : "(): CancelableFuture[Unit]", "member" : "monix.execution.misc.AsyncSemaphore.acquire", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#acquire():monix.execution.CancelableFuture[Unit]", "kind" : "def"}, {"label" : "greenLight", "tail" : "(f: () ⇒ Future[A])(ec: ExecutionContext): Future[A]", "member" : "monix.execution.misc.AsyncSemaphore.greenLight", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#greenLight[A](f:()=>scala.concurrent.Future[A])(implicitec:scala.concurrent.ExecutionContext):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "activeCount", "tail" : "(): Int", "member" : "monix.execution.misc.AsyncSemaphore.activeCount", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#activeCount:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/AsyncSemaphore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/AsyncSemaphore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(maxParallelism: Int): AsyncSemaphore", "member" : "monix.execution.misc.AsyncSemaphore.apply", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#apply(maxParallelism:Int):monix.execution.misc.AsyncSemaphore", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/AsyncSemaphore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/misc\/AsyncSemaphore.html", "kind" : "class"}, {"name" : "monix.execution.misc.AsyncVar", "shortDescription" : "Asynchronous mutable location, that is either empty or containsa value of type A.", "object" : "monix\/execution\/misc\/AsyncVar$.html", "members_class" : [{"label" : "unsafeRead", "tail" : "(await: Listener[A]): A", "member" : "monix.execution.misc.AsyncVar.unsafeRead", "link" : "monix\/execution\/misc\/AsyncVar.html#unsafeRead(await:monix.execution.Listener[A]):A", "kind" : "def"}, {"label" : "read", "tail" : "(): Future[A]", "member" : "monix.execution.misc.AsyncVar.read", "link" : "monix\/execution\/misc\/AsyncVar.html#read:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "unsafeTake", "tail" : "(await: Listener[A]): A", "member" : "monix.execution.misc.AsyncVar.unsafeTake", "link" : "monix\/execution\/misc\/AsyncVar.html#unsafeTake(await:monix.execution.Listener[A]):A", "kind" : "def"}, {"label" : "take", "tail" : "(): Future[A]", "member" : "monix.execution.misc.AsyncVar.take", "link" : "monix\/execution\/misc\/AsyncVar.html#take:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "unsafePut", "tail" : "(a: A, await: Listener[Unit]): Boolean", "member" : "monix.execution.misc.AsyncVar.unsafePut", "link" : "monix\/execution\/misc\/AsyncVar.html#unsafePut(a:A,await:monix.execution.Listener[Unit]):Boolean", "kind" : "def"}, {"label" : "put", "tail" : "(a: A): Future[Unit]", "member" : "monix.execution.misc.AsyncVar.put", "link" : "monix\/execution\/misc\/AsyncVar.html#put(a:A):scala.concurrent.Future[Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/AsyncVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/AsyncVar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/AsyncVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/AsyncVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/AsyncVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/AsyncVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/AsyncVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncVar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/AsyncVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/AsyncVar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/AsyncVar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/AsyncVar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/AsyncVar.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/AsyncVar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/AsyncVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/AsyncVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/AsyncVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "withPadding", "tail" : "(ps: PaddingStrategy): AsyncVar[A]", "member" : "monix.execution.misc.AsyncVar.withPadding", "link" : "monix\/execution\/misc\/AsyncVar$.html#withPadding[A](ps:monix.execution.atomic.PaddingStrategy):monix.execution.misc.AsyncVar[A]", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initial: A, ps: PaddingStrategy): AsyncVar[A]", "member" : "monix.execution.misc.AsyncVar.withPadding", "link" : "monix\/execution\/misc\/AsyncVar$.html#withPadding[A](initial:A,ps:monix.execution.atomic.PaddingStrategy):monix.execution.misc.AsyncVar[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): AsyncVar[A]", "member" : "monix.execution.misc.AsyncVar.empty", "link" : "monix\/execution\/misc\/AsyncVar$.html#empty[A]:monix.execution.misc.AsyncVar[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(initial: A): AsyncVar[A]", "member" : "monix.execution.misc.AsyncVar.apply", "link" : "monix\/execution\/misc\/AsyncVar$.html#apply[A](initial:A):monix.execution.misc.AsyncVar[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/AsyncVar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/AsyncVar$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/AsyncVar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/AsyncVar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/AsyncVar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/AsyncVar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/AsyncVar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncVar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncVar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/AsyncVar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/AsyncVar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/AsyncVar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/AsyncVar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/AsyncVar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/AsyncVar$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/AsyncVar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/AsyncVar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/AsyncVar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/AsyncVar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/misc\/AsyncVar.html", "kind" : "class"}, {"name" : "monix.execution.misc.HygieneUtilMacros", "members_trait" : [{"label" : "util", "tail" : "", "member" : "monix.execution.misc.HygieneUtilMacros.util", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#util", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "c", "tail" : ": Context", "member" : "monix.execution.misc.HygieneUtilMacros.c", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#c:scala.reflect.macros.whitebox.Context", "kind" : "abstract val"}], "shortDescription" : "Utilities for macro-hygiene.", "trait" : "monix\/execution\/misc\/HygieneUtilMacros.html", "kind" : "trait"}, {"name" : "monix.execution.misc.InlineMacros", "members_trait" : [{"label" : "stripUnApplyNodes", "tail" : "(): scala.reflect.macros.Universe.Transformer", "member" : "monix.execution.misc.InlineMacros.stripUnApplyNodes", "link" : "monix\/execution\/misc\/InlineMacros.html#stripUnApplyNodes():InlineMacros.this.c.universe.Transformer", "kind" : "def"}, {"label" : "inlineApplyRecursive", "tail" : "(tree: scala.reflect.macros.Universe.Tree): scala.reflect.macros.Universe.Tree", "member" : "monix.execution.misc.InlineMacros.inlineApplyRecursive", "link" : "monix\/execution\/misc\/InlineMacros.html#inlineApplyRecursive(tree:InlineMacros.this.c.universe.Tree):InlineMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "resetTree", "tail" : "(tree: scala.reflect.macros.Universe.Tree): scala.reflect.macros.Universe.Tree", "member" : "monix.execution.misc.InlineMacros.resetTree", "link" : "monix\/execution\/misc\/InlineMacros.html#resetTree(tree:InlineMacros.this.c.universe.Tree):InlineMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "inlineAndResetTree", "tail" : "(tree: scala.reflect.macros.Universe.Tree): scala.reflect.macros.Universe.Tree", "member" : "monix.execution.misc.InlineMacros.inlineAndResetTree", "link" : "monix\/execution\/misc\/InlineMacros.html#inlineAndResetTree(tree:InlineMacros.this.c.universe.Tree):InlineMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "inlineAndReset", "tail" : "(tree: scala.reflect.macros.Universe.Tree): scala.reflect.macros.whitebox.Context.Expr[A]", "member" : "monix.execution.misc.InlineMacros.inlineAndReset", "link" : "monix\/execution\/misc\/InlineMacros.html#inlineAndReset[A](tree:InlineMacros.this.c.universe.Tree):InlineMacros.this.c.Expr[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/InlineMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/InlineMacros.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/InlineMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/InlineMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/InlineMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/InlineMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/InlineMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/InlineMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/InlineMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/InlineMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/InlineMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/InlineMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/InlineMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/InlineMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/InlineMacros.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/InlineMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/InlineMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/InlineMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/InlineMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "c", "tail" : ": Context", "member" : "monix.execution.misc.InlineMacros.c", "link" : "monix\/execution\/misc\/InlineMacros.html#c:scala.reflect.macros.whitebox.Context", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "monix\/execution\/misc\/InlineMacros.html", "kind" : "trait"}, {"name" : "monix.execution.misc.Local", "shortDescription" : "A Local is a ThreadLocal whose scope is flexible.", "object" : "monix\/execution\/misc\/Local$.html", "members_class" : [{"label" : "clear", "tail" : "(): Unit", "member" : "monix.execution.misc.Local.clear", "link" : "monix\/execution\/misc\/Local.html#clear():Unit", "kind" : "def"}, {"label" : "bindClear", "tail" : "(f: ⇒ R): R", "member" : "monix.execution.misc.Local.bindClear", "link" : "monix\/execution\/misc\/Local.html#bindClear[R](f:=>R):R", "kind" : "def"}, {"label" : "bind", "tail" : "(value: A)(f: ⇒ R): R", "member" : "monix.execution.misc.Local.bind", "link" : "monix\/execution\/misc\/Local.html#bind[R](value:A)(f:=>R):R", "kind" : "def"}, {"label" : "value_=", "tail" : "(update: Option[A]): Unit", "member" : "monix.execution.misc.Local.value_=", "link" : "monix\/execution\/misc\/Local.html#value_=(update:Option[A]):Unit", "kind" : "def"}, {"label" : "value", "tail" : "(): Option[A]", "member" : "monix.execution.misc.Local.value", "link" : "monix\/execution\/misc\/Local.html#value:Option[A]", "kind" : "def"}, {"label" : ":=", "tail" : "(value: A): Unit", "member" : "monix.execution.misc.Local.:=", "link" : "monix\/execution\/misc\/Local.html#:=(value:A):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.misc.Local.get", "link" : "monix\/execution\/misc\/Local.html#get:A", "kind" : "def"}, {"label" : "update", "tail" : "(value: A): Unit", "member" : "monix.execution.misc.Local.update", "link" : "monix\/execution\/misc\/Local.html#update(value:A):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.execution.misc.Local.apply", "link" : "monix\/execution\/misc\/Local.html#apply():A", "kind" : "def"}, {"member" : "monix.execution.misc.Local#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/Local.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/Local.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/Local.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/Local.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/Local.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/Local.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/Local.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/Local.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/Local.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/Local.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/Local.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/Local.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/Local.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/Local.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/Local.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/Local.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Macros", "tail" : "", "member" : "monix.execution.misc.Local.Macros", "link" : "monix\/execution\/misc\/Local$.html#MacrosextendsInlineMacroswithHygieneUtilMacros", "kind" : "class"}, {"label" : "closed", "tail" : "(fn: () ⇒ R): () ⇒ R", "member" : "monix.execution.misc.Local.closed", "link" : "monix\/execution\/misc\/Local$.html#closed[R](fn:()=>R):()=>R", "kind" : "def"}, {"label" : "bindClear", "tail" : "(f: ⇒ R): R", "member" : "monix.execution.misc.Local.bindClear", "link" : "monix\/execution\/misc\/Local$.html#bindClear[R](f:=>R):R", "kind" : "macro def"}, {"label" : "bind", "tail" : "(ctx: Context)(f: ⇒ R): R", "member" : "monix.execution.misc.Local.bind", "link" : "monix\/execution\/misc\/Local$.html#bind[R](ctx:monix.execution.misc.Local.Context)(f:=>R):R", "kind" : "macro def"}, {"label" : "clearContext", "tail" : "(): Unit", "member" : "monix.execution.misc.Local.clearContext", "link" : "monix\/execution\/misc\/Local$.html#clearContext():Unit", "kind" : "def"}, {"label" : "setContext", "tail" : "(ctx: Context): Unit", "member" : "monix.execution.misc.Local.setContext", "link" : "monix\/execution\/misc\/Local$.html#setContext(ctx:monix.execution.misc.Local.Context):Unit", "kind" : "def"}, {"label" : "getContext", "tail" : "(): Context", "member" : "monix.execution.misc.Local.getContext", "link" : "monix\/execution\/misc\/Local$.html#getContext():monix.execution.misc.Local.Context", "kind" : "def"}, {"label" : "Key", "tail" : "", "member" : "monix.execution.misc.Local.Key", "link" : "monix\/execution\/misc\/Local$.html#KeyextendsSerializable", "kind" : "final class"}, {"label" : "Context", "tail" : "", "member" : "monix.execution.misc.Local.Context", "link" : "monix\/execution\/misc\/Local$.html#Context=scala.collection.immutable.Map[monix.execution.misc.Local.Key,_]", "kind" : "type"}, {"label" : "apply", "tail" : "(default: A): Local[A]", "member" : "monix.execution.misc.Local.apply", "link" : "monix\/execution\/misc\/Local$.html#apply[A](default:A):monix.execution.misc.Local[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/Local$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/Local$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/Local$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/Local$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/Local$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/Local$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/Local$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/Local$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/Local$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/Local$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/Local$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/Local$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/Local$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/Local$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/Local$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/Local$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/misc\/Local.html", "kind" : "class"}, {"name" : "monix.execution.misc.NonFatal", "shortDescription" : "Extractor of non-fatal Throwable instances.", "object" : "monix\/execution\/misc\/NonFatal$.html", "members_object" : [{"label" : "unapply", "tail" : "(t: Throwable): Option[Throwable]", "member" : "monix.execution.misc.NonFatal.unapply", "link" : "monix\/execution\/misc\/NonFatal$.html#unapply(t:Throwable):Option[Throwable]", "kind" : "def"}, {"label" : "apply", "tail" : "(t: Throwable): Boolean", "member" : "monix.execution.misc.NonFatal.apply", "link" : "monix\/execution\/misc\/NonFatal$.html#apply(t:Throwable):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/NonFatal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/NonFatal$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/NonFatal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/NonFatal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/NonFatal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/NonFatal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/NonFatal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/NonFatal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/NonFatal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/NonFatal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/NonFatal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/NonFatal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/NonFatal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/NonFatal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/NonFatal$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/NonFatal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/NonFatal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/NonFatal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/NonFatal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.execution.misc.ThreadLocal", "shortDescription" : "Cross-platform equivalent for java.lang.ThreadLocal,for specifying thread-local variables.", "object" : "monix\/execution\/misc\/ThreadLocal$.html", "members_class" : [{"label" : "reset", "tail" : "(): Unit", "member" : "monix.execution.misc.ThreadLocal.reset", "link" : "monix\/execution\/misc\/ThreadLocal.html#reset():Unit", "kind" : "def"}, {"label" : "set", "tail" : "(value: A): Unit", "member" : "monix.execution.misc.ThreadLocal.set", "link" : "monix\/execution\/misc\/ThreadLocal.html#set(value:A):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.misc.ThreadLocal.get", "link" : "monix\/execution\/misc\/ThreadLocal.html#get():A", "kind" : "def"}, {"label" : "initial", "tail" : ": A", "member" : "monix.execution.misc.ThreadLocal.initial", "link" : "monix\/execution\/misc\/ThreadLocal.html#initial:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/ThreadLocal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/ThreadLocal.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/ThreadLocal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/ThreadLocal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/ThreadLocal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/ThreadLocal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/ThreadLocal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/ThreadLocal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/ThreadLocal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/ThreadLocal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/ThreadLocal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/ThreadLocal.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/ThreadLocal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/ThreadLocal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/ThreadLocal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/ThreadLocal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(initial: A): ThreadLocal[A]", "member" : "monix.execution.misc.ThreadLocal.apply", "link" : "monix\/execution\/misc\/ThreadLocal$.html#apply[A](initial:A):monix.execution.misc.ThreadLocal[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(): ThreadLocal[A]", "member" : "monix.execution.misc.ThreadLocal.apply", "link" : "monix\/execution\/misc\/ThreadLocal$.html#apply[A<:AnyRef]():monix.execution.misc.ThreadLocal[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/ThreadLocal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/ThreadLocal$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/ThreadLocal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/ThreadLocal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/ThreadLocal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/ThreadLocal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/ThreadLocal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/ThreadLocal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/ThreadLocal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/ThreadLocal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/ThreadLocal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/ThreadLocal$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/ThreadLocal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/ThreadLocal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/ThreadLocal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/ThreadLocal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/misc\/ThreadLocal.html", "kind" : "class"}], "monix.reactive.observers" : [{"name" : "monix.reactive.observers.BufferedSubscriber", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "scheduler", "tail" : "(): Scheduler", "member" : "monix.reactive.observers.Subscriber.scheduler", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#scheduler:monix.execution.Scheduler", "kind" : "implicit abstract def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.Observer.onComplete", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#onComplete():Unit", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.Observer.onError", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#onError(ex:Throwable):Unit", "kind" : "abstract def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.Observer.onNext", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "abstract def"}], "shortDescription" : "Interface describing Observer wrappersthat are thread-safe (can receive concurrent events) and thatreturn an immediate Continue when receiving onNextevents.", "object" : "monix\/reactive\/observers\/BufferedSubscriber$.html", "members_object" : [{"label" : "batched", "tail" : "(underlying: Subscriber[List[A]], bufferSize: Int): Subscriber[A]", "member" : "monix.reactive.observers.buffers.BuildersImpl.batched", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#batched[A](underlying:monix.reactive.observers.Subscriber[List[A]],bufferSize:Int):monix.reactive.observers.Subscriber[A]", "kind" : "def"}, {"label" : "synchronous", "tail" : "(subscriber: Subscriber[A], bufferPolicy: Synchronous[A]): Sync[A]", "member" : "monix.reactive.observers.buffers.BuildersImpl.synchronous", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#synchronous[A](subscriber:monix.reactive.observers.Subscriber[A],bufferPolicy:monix.reactive.OverflowStrategy.Synchronous[A]):monix.reactive.observers.Subscriber.Sync[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(subscriber: Subscriber[A], bufferPolicy: OverflowStrategy[A]): Subscriber[A]", "member" : "monix.reactive.observers.buffers.BuildersImpl.apply", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#apply[A](subscriber:monix.reactive.observers.Subscriber[A],bufferPolicy:monix.reactive.OverflowStrategy[A]):monix.reactive.observers.Subscriber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/reactive\/observers\/BufferedSubscriber.html", "kind" : "trait"}, {"name" : "monix.reactive.observers.CacheUntilConnectSubscriber", "shortDescription" : "Wraps an underlying Subscriber into an implementation that cachesall events until the call to connect() happens.", "object" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html", "members_class" : [{"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.onError", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.onComplete", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#onComplete():Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.onNext", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "connect", "tail" : "(): CancelableFuture[Ack]", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.connect", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#connect():monix.execution.CancelableFuture[monix.execution.Ack]", "kind" : "def"}, {"label" : "scheduler", "tail" : ": Scheduler", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.scheduler", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#scheduler:monix.execution.Scheduler", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(underlying: Subscriber[A]): CacheUntilConnectSubscriber[A]", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.apply", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#apply[A](underlying:monix.reactive.observers.Subscriber[A]):monix.reactive.observers.CacheUntilConnectSubscriber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html", "kind" : "class"}, {"name" : "monix.reactive.observers.ConnectableSubscriber", "shortDescription" : "Wraps a Subscriber into an implementation that abstains from emitting items until the callto connect() happens.", "object" : "monix\/reactive\/observers\/ConnectableSubscriber$.html", "members_class" : [{"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.onError", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.onComplete", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#onComplete():Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.observers.ConnectableSubscriber.onNext", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "pushError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.pushError", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#pushError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "pushComplete", "tail" : "(): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.pushComplete", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#pushComplete():Unit", "kind" : "def"}, {"label" : "pushFirstAll", "tail" : "(xs: TraversableOnce[U]): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.pushFirstAll", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#pushFirstAll[U<:A](xs:TraversableOnce[U]):Unit", "kind" : "def"}, {"label" : "pushFirst", "tail" : "(elem: A): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.pushFirst", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#pushFirst(elem:A):Unit", "kind" : "def"}, {"label" : "connect", "tail" : "(): CancelableFuture[Ack]", "member" : "monix.reactive.observers.ConnectableSubscriber.connect", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#connect():monix.execution.CancelableFuture[monix.execution.Ack]", "kind" : "def"}, {"label" : "scheduler", "tail" : ": Scheduler", "member" : "monix.reactive.observers.ConnectableSubscriber.scheduler", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#scheduler:monix.execution.Scheduler", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(subscriber: Subscriber[A]): ConnectableSubscriber[A]", "member" : "monix.reactive.observers.ConnectableSubscriber.apply", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#apply[A](subscriber:monix.reactive.observers.Subscriber[A]):monix.reactive.observers.ConnectableSubscriber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observers\/ConnectableSubscriber.html", "kind" : "class"}, {"name" : "monix.reactive.observers.SafeSubscriber", "shortDescription" : "A safe subscriber safe guards subscriber implementations, such that:", "object" : "monix\/reactive\/observers\/SafeSubscriber$.html", "members_class" : [{"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.observers.SafeSubscriber.onComplete", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.observers.SafeSubscriber.onError", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.observers.SafeSubscriber.onNext", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "scheduler", "tail" : ": Scheduler", "member" : "monix.reactive.observers.SafeSubscriber.scheduler", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#scheduler:monix.execution.Scheduler", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/SafeSubscriber.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(subscriber: Subscriber[A]): SafeSubscriber[A]", "member" : "monix.reactive.observers.SafeSubscriber.apply", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#apply[A](subscriber:monix.reactive.observers.Subscriber[A]):monix.reactive.observers.SafeSubscriber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observers\/SafeSubscriber.html", "kind" : "class"}, {"name" : "monix.reactive.observers.Subscriber", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/Subscriber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/Subscriber.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/Subscriber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/Subscriber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/Subscriber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/Subscriber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/Subscriber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/Subscriber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/Subscriber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/Subscriber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/Subscriber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/Subscriber.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/Subscriber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/Subscriber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/Subscriber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/Subscriber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "scheduler", "tail" : "(): Scheduler", "member" : "monix.reactive.observers.Subscriber.scheduler", "link" : "monix\/reactive\/observers\/Subscriber.html#scheduler:monix.execution.Scheduler", "kind" : "implicit abstract def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.Observer.onComplete", "link" : "monix\/reactive\/observers\/Subscriber.html#onComplete():Unit", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.Observer.onError", "link" : "monix\/reactive\/observers\/Subscriber.html#onError(ex:Throwable):Unit", "kind" : "abstract def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.Observer.onNext", "link" : "monix\/reactive\/observers\/Subscriber.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "abstract def"}], "shortDescription" : "A Subscriber is an Observer with an attached Scheduler.", "object" : "monix\/reactive\/observers\/Subscriber$.html", "members_object" : [{"label" : "Extensions", "tail" : "", "member" : "monix.reactive.observers.Subscriber.Extensions", "link" : "monix\/reactive\/observers\/Subscriber$.html#Extensions[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "toReactiveSubscriber", "tail" : "(source: Subscriber[A], requestCount: Int): org.reactivestreams.Subscriber[A]", "member" : "monix.reactive.observers.Subscriber.toReactiveSubscriber", "link" : "monix\/reactive\/observers\/Subscriber$.html#toReactiveSubscriber[A](source:monix.reactive.observers.Subscriber[A],requestCount:Int):org.reactivestreams.Subscriber[A]", "kind" : "def"}, {"label" : "toReactiveSubscriber", "tail" : "(subscriber: Subscriber[A]): org.reactivestreams.Subscriber[A]", "member" : "monix.reactive.observers.Subscriber.toReactiveSubscriber", "link" : "monix\/reactive\/observers\/Subscriber$.html#toReactiveSubscriber[A](subscriber:monix.reactive.observers.Subscriber[A]):org.reactivestreams.Subscriber[A]", "kind" : "def"}, {"label" : "fromReactiveSubscriber", "tail" : "(subscriber: org.reactivestreams.Subscriber[A], subscription: Cancelable)(s: Scheduler): Subscriber[A]", "member" : "monix.reactive.observers.Subscriber.fromReactiveSubscriber", "link" : "monix\/reactive\/observers\/Subscriber$.html#fromReactiveSubscriber[A](subscriber:org.reactivestreams.Subscriber[A],subscription:monix.execution.Cancelable)(implicits:monix.execution.Scheduler):monix.reactive.observers.Subscriber[A]", "kind" : "def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream)(s: Scheduler): Sync[A]", "member" : "monix.reactive.observers.Subscriber.dump", "link" : "monix\/reactive\/observers\/Subscriber$.html#dump[A](prefix:String,out:java.io.PrintStream)(implicits:monix.execution.Scheduler):monix.reactive.observers.Subscriber.Sync[A]", "kind" : "def"}, {"label" : "canceled", "tail" : "(s: Scheduler): Sync[A]", "member" : "monix.reactive.observers.Subscriber.canceled", "link" : "monix\/reactive\/observers\/Subscriber$.html#canceled[A](implicits:monix.execution.Scheduler):monix.reactive.observers.Subscriber.Sync[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(s: Scheduler): Sync[A]", "member" : "monix.reactive.observers.Subscriber.empty", "link" : "monix\/reactive\/observers\/Subscriber$.html#empty[A](implicits:monix.execution.Scheduler):monix.reactive.observers.Subscriber.Sync[A]", "kind" : "def"}, {"label" : "Sync", "tail" : "", "member" : "monix.reactive.observers.Subscriber.Sync", "link" : "monix\/reactive\/observers\/Subscriber$.html#Sync", "kind" : "object"}, {"label" : "Sync", "tail" : "", "member" : "monix.reactive.observers.Subscriber.Sync", "link" : "monix\/reactive\/observers\/Subscriber$.html#Sync[-A]extendsSubscriber[A]withObserver.Sync[A]", "kind" : "trait"}, {"label" : "apply", "tail" : "(observer: Observer[A], scheduler: Scheduler): Subscriber[A]", "member" : "monix.reactive.observers.Subscriber.apply", "link" : "monix\/reactive\/observers\/Subscriber$.html#apply[A](observer:monix.reactive.Observer[A],scheduler:monix.execution.Scheduler):monix.reactive.observers.Subscriber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/Subscriber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/Subscriber$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/Subscriber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/Subscriber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/Subscriber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/Subscriber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/Subscriber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/Subscriber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/Subscriber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/Subscriber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/Subscriber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/Subscriber$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/Subscriber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/Subscriber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/Subscriber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/Subscriber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/reactive\/observers\/Subscriber.html", "kind" : "trait"}], "monix.execution" : [{"name" : "monix.execution.Ack", "shortDescription" : "Represents an acknowledgement of processing that a consumersends back upstream.", "object" : "monix\/execution\/Ack$.html", "members_class" : [{"label" : "onComplete", "tail" : "(func: (Try[Ack]) ⇒ U)(executor: ExecutionContext): Unit", "member" : "monix.execution.Ack.onComplete", "link" : "monix\/execution\/Ack.html#onComplete[U](func:scala.util.Try[monix.execution.Ack]=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "final def"}, {"label" : "transformWith", "tail" : "(f: (Try[Ack]) ⇒ Future[S])(executor: ExecutionContext): Future[S]", "member" : "monix.execution.Ack.transformWith", "link" : "monix\/execution\/Ack.html#transformWith[S](f:scala.util.Try[monix.execution.Ack]=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "final def"}, {"label" : "transform", "tail" : "(f: (Try[Ack]) ⇒ Try[S])(executor: ExecutionContext): Future[S]", "member" : "monix.execution.Ack.transform", "link" : "monix\/execution\/Ack.html#transform[S](f:scala.util.Try[monix.execution.Ack]=>scala.util.Try[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "final def"}, {"label" : "andThen", "tail" : "(pf: PartialFunction[Try[Ack], U])(executor: ExecutionContext): Future[Ack]", "member" : "scala.concurrent.Future.andThen", "link" : "monix\/execution\/Ack.html#andThen[U](pf:PartialFunction[scala.util.Try[T],U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "mapTo", "tail" : "(tag: ClassTag[S]): Future[S]", "member" : "scala.concurrent.Future.mapTo", "link" : "monix\/execution\/Ack.html#mapTo[S](implicittag:scala.reflect.ClassTag[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "fallbackTo", "tail" : "(that: Future[U]): Future[U]", "member" : "scala.concurrent.Future.fallbackTo", "link" : "monix\/execution\/Ack.html#fallbackTo[U>:T](that:scala.concurrent.Future[U]):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "zipWith", "tail" : "(that: Future[U])(f: (Ack, U) ⇒ R)(executor: ExecutionContext): Future[R]", "member" : "scala.concurrent.Future.zipWith", "link" : "monix\/execution\/Ack.html#zipWith[U,R](that:scala.concurrent.Future[U])(f:(T,U)=>R)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Future[U]): Future[(Ack, U)]", "member" : "scala.concurrent.Future.zip", "link" : "monix\/execution\/Ack.html#zip[U](that:scala.concurrent.Future[U]):scala.concurrent.Future[(T,U)]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[Throwable, Future[U]])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recoverWith", "link" : "monix\/execution\/Ack.html#recoverWith[U>:T](pf:PartialFunction[Throwable,scala.concurrent.Future[U]])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recover", "link" : "monix\/execution\/Ack.html#recover[U>:T](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Ack, S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.collect", "link" : "monix\/execution\/Ack.html#collect[S](pf:PartialFunction[T,S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Ack) ⇒ Boolean)(executor: ExecutionContext): Future[Ack]", "member" : "scala.concurrent.Future.withFilter", "link" : "monix\/execution\/Ack.html#withFilter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (Ack) ⇒ Boolean)(executor: ExecutionContext): Future[Ack]", "member" : "scala.concurrent.Future.filter", "link" : "monix\/execution\/Ack.html#filter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[Ack, Future[S]]): Future[S]", "member" : "scala.concurrent.Future.flatten", "link" : "monix\/execution\/Ack.html#flatten[S](implicitev:T<:<scala.concurrent.Future[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Ack) ⇒ Future[S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.flatMap", "link" : "monix\/execution\/Ack.html#flatMap[S](f:T=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Ack) ⇒ S)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.map", "link" : "monix\/execution\/Ack.html#map[S](f:T=>S)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "transform", "tail" : "(s: (Ack) ⇒ S, f: (Throwable) ⇒ Throwable)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.transform", "link" : "monix\/execution\/Ack.html#transform[S](s:T=>S,f:Throwable=>Throwable)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Ack) ⇒ U)(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.foreach", "link" : "monix\/execution\/Ack.html#foreach[U](f:T=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "failed", "tail" : "(): Future[Throwable]", "member" : "scala.concurrent.Future.failed", "link" : "monix\/execution\/Ack.html#failed:scala.concurrent.Future[Throwable]", "kind" : "def"}, {"label" : "onFailure", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onFailure", "link" : "monix\/execution\/Ack.html#onFailure[U](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "onSuccess", "tail" : "(pf: PartialFunction[Ack, U])(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onSuccess", "link" : "monix\/execution\/Ack.html#onSuccess[U](pf:PartialFunction[T,U])(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Ack.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Ack.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Ack.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Ack.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Ack.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Ack.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Ack.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Ack.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Ack.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Ack.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Ack.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Ack.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Ack.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Ack.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Ack.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Ack.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "AsSuccess", "tail" : ": Success[Ack]", "member" : "monix.execution.Ack.AsSuccess", "link" : "monix\/execution\/Ack.html#AsSuccess:scala.util.Success[monix.execution.Ack]", "kind" : "abstract val"}, {"label" : "value", "tail" : "(): Option[Try[Ack]]", "member" : "scala.concurrent.Future.value", "link" : "monix\/execution\/Ack.html#value:Option[scala.util.Try[T]]", "kind" : "abstract def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "scala.concurrent.Future.isCompleted", "link" : "monix\/execution\/Ack.html#isCompleted:Boolean", "kind" : "abstract def"}, {"label" : "result", "tail" : "(atMost: Duration)(permit: CanAwait): Ack", "member" : "scala.concurrent.Awaitable.result", "link" : "monix\/execution\/Ack.html#result(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):T", "kind" : "abstract def"}, {"label" : "ready", "tail" : "(atMost: Duration)(permit: CanAwait): Ack.this.type", "member" : "scala.concurrent.Awaitable.ready", "link" : "monix\/execution\/Ack.html#ready(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):Awaitable.this.type", "kind" : "abstract def"}], "members_object" : [{"label" : "AckExtensions", "tail" : "", "member" : "monix.execution.Ack.AckExtensions", "link" : "monix\/execution\/Ack$.html#AckExtensions[Self<:scala.concurrent.Future[monix.execution.Ack]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "Stop", "tail" : "", "member" : "monix.execution.Ack.Stop", "link" : "monix\/execution\/Ack$.html#Stop", "kind" : "object"}, {"label" : "Continue", "tail" : "", "member" : "monix.execution.Ack.Continue", "link" : "monix\/execution\/Ack$.html#Continue", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Ack$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Ack$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Ack$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Ack$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Ack$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Ack$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Ack$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Ack$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Ack$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Ack$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Ack$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Ack$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Ack$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Ack$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Ack$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Ack$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/Ack.html", "kind" : "class"}, {"name" : "monix.execution.Cancelable", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Cancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Cancelable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Cancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Cancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Cancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Cancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Cancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Cancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Cancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Cancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Cancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Cancelable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Cancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Cancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Cancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Cancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/Cancelable.html#cancel():Unit", "kind" : "abstract def"}], "shortDescription" : "Represents a one-time idempotent action that can be usedto cancel async computations, or to release resources thatactive data sources are holding.", "object" : "monix\/execution\/Cancelable$.html", "members_object" : [{"label" : "Extensions", "tail" : "", "member" : "monix.execution.Cancelable.Extensions", "link" : "monix\/execution\/Cancelable$.html#ExtensionsextendsAnyVal", "kind" : "implicit final class"}, {"label" : "IsDummy", "tail" : "", "member" : "monix.execution.Cancelable.IsDummy", "link" : "monix\/execution\/Cancelable$.html#IsDummyextendsAnyRef", "kind" : "trait"}, {"label" : "cancelAll", "tail" : "(seq: Iterable[Cancelable]): Unit", "member" : "monix.execution.Cancelable.cancelAll", "link" : "monix\/execution\/Cancelable$.html#cancelAll(seq:Iterable[monix.execution.Cancelable]):Unit", "kind" : "def"}, {"label" : "fromIO", "tail" : "(io: IO[Unit])(r: UncaughtExceptionReporter): Cancelable", "member" : "monix.execution.Cancelable.fromIO", "link" : "monix\/execution\/Cancelable$.html#fromIO(io:cats.effect.IO[Unit])(implicitr:monix.execution.UncaughtExceptionReporter):monix.execution.Cancelable", "kind" : "def"}, {"label" : "fromPromise", "tail" : "(p: Promise[A], e: Throwable): Cancelable", "member" : "monix.execution.Cancelable.fromPromise", "link" : "monix\/execution\/Cancelable$.html#fromPromise[A](p:scala.concurrent.Promise[A],e:Throwable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "collection", "tail" : "(refs: Iterable[Cancelable]): Cancelable", "member" : "monix.execution.Cancelable.collection", "link" : "monix\/execution\/Cancelable$.html#collection(refs:Iterable[monix.execution.Cancelable]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "empty", "tail" : ": Cancelable", "member" : "monix.execution.Cancelable.empty", "link" : "monix\/execution\/Cancelable$.html#empty:monix.execution.Cancelable", "kind" : "val"}, {"label" : "apply", "tail" : "(callback: () ⇒ Unit): Cancelable", "member" : "monix.execution.Cancelable.apply", "link" : "monix\/execution\/Cancelable$.html#apply(callback:()=>Unit):monix.execution.Cancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): Cancelable", "member" : "monix.execution.Cancelable.apply", "link" : "monix\/execution\/Cancelable$.html#apply():monix.execution.Cancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Cancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Cancelable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Cancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Cancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Cancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Cancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Cancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Cancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Cancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Cancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Cancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Cancelable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Cancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Cancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Cancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Cancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/Cancelable.html", "kind" : "trait"}, {"name" : "monix.execution.CancelableFuture", "shortDescription" : "Represents an asynchronous computation that can be canceledas long as it isn't complete.", "object" : "monix\/execution\/CancelableFuture$.html", "members_class" : [{"label" : "transformWith", "tail" : "(f: (Try[A]) ⇒ Future[S])(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.transformWith", "link" : "monix\/execution\/CancelableFuture.html#transformWith[S](f:scala.util.Try[A]=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (Try[A]) ⇒ Try[S])(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.transform", "link" : "monix\/execution\/CancelableFuture.html#transform[S](f:scala.util.Try[A]=>scala.util.Try[S])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Future[S])(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.flatMap", "link" : "monix\/execution\/CancelableFuture.html#flatMap[S](f:A=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "final def"}, {"label" : "andThen", "tail" : "(pf: PartialFunction[Try[A], U])(executor: ExecutionContext): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.andThen", "link" : "monix\/execution\/CancelableFuture.html#andThen[U](pf:PartialFunction[scala.util.Try[A],U])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[A]", "kind" : "final def"}, {"label" : "mapTo", "tail" : "(tag: ClassTag[S]): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.mapTo", "link" : "monix\/execution\/CancelableFuture.html#mapTo[S](implicittag:scala.reflect.ClassTag[S]):monix.execution.CancelableFuture[S]", "kind" : "final def"}, {"label" : "fallbackTo", "tail" : "(that: Future[U]): CancelableFuture[U]", "member" : "monix.execution.CancelableFuture.fallbackTo", "link" : "monix\/execution\/CancelableFuture.html#fallbackTo[U>:A](that:scala.concurrent.Future[U]):monix.execution.CancelableFuture[U]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: Future[U]): CancelableFuture[(A, U)]", "member" : "monix.execution.CancelableFuture.zip", "link" : "monix\/execution\/CancelableFuture.html#zip[U](that:scala.concurrent.Future[U]):monix.execution.CancelableFuture[(A,U)]", "kind" : "final def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[Throwable, Future[U]])(executor: ExecutionContext): CancelableFuture[U]", "member" : "monix.execution.CancelableFuture.recoverWith", "link" : "monix\/execution\/CancelableFuture.html#recoverWith[U>:A](pf:PartialFunction[Throwable,scala.concurrent.Future[U]])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[U]", "kind" : "final def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): CancelableFuture[U]", "member" : "monix.execution.CancelableFuture.recover", "link" : "monix\/execution\/CancelableFuture.html#recover[U>:A](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[U]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, S])(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.collect", "link" : "monix\/execution\/CancelableFuture.html#collect[S](pf:PartialFunction[A,S])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean)(executor: ExecutionContext): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.filter", "link" : "monix\/execution\/CancelableFuture.html#filter(p:A=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[A]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ S)(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.map", "link" : "monix\/execution\/CancelableFuture.html#map[S](f:A=>S)(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "final def"}, {"label" : "transform", "tail" : "(s: (A) ⇒ S, f: (Throwable) ⇒ Throwable)(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.transform", "link" : "monix\/execution\/CancelableFuture.html#transform[S](s:A=>S,f:Throwable=>Throwable)(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): CancelableFuture[Throwable]", "member" : "monix.execution.CancelableFuture.failed", "link" : "monix\/execution\/CancelableFuture.html#failed:monix.execution.CancelableFuture[Throwable]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(that: Future[U])(f: (A, U) ⇒ R)(executor: ExecutionContext): Future[R]", "member" : "scala.concurrent.Future.zipWith", "link" : "monix\/execution\/CancelableFuture.html#zipWith[U,R](that:scala.concurrent.Future[U])(f:(T,U)=>R)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) ⇒ Boolean)(executor: ExecutionContext): Future[A]", "member" : "scala.concurrent.Future.withFilter", "link" : "monix\/execution\/CancelableFuture.html#withFilter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Future[S]]): Future[S]", "member" : "scala.concurrent.Future.flatten", "link" : "monix\/execution\/CancelableFuture.html#flatten[S](implicitev:T<:<scala.concurrent.Future[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ U)(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.foreach", "link" : "monix\/execution\/CancelableFuture.html#foreach[U](f:T=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "onFailure", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onFailure", "link" : "monix\/execution\/CancelableFuture.html#onFailure[U](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "onSuccess", "tail" : "(pf: PartialFunction[A, U])(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onSuccess", "link" : "monix\/execution\/CancelableFuture.html#onSuccess[U](pf:PartialFunction[T,U])(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/CancelableFuture.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/CancelableFuture.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/CancelableFuture.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/CancelableFuture.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/CancelableFuture.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/CancelableFuture.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/CancelableFuture.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/CancelableFuture.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/CancelableFuture.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/CancelableFuture.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/CancelableFuture.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/CancelableFuture.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/CancelableFuture.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/CancelableFuture.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/CancelableFuture.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/CancelableFuture.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/CancelableFuture.html#cancel():Unit", "kind" : "abstract def"}, {"label" : "value", "tail" : "(): Option[Try[A]]", "member" : "scala.concurrent.Future.value", "link" : "monix\/execution\/CancelableFuture.html#value:Option[scala.util.Try[T]]", "kind" : "abstract def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "scala.concurrent.Future.isCompleted", "link" : "monix\/execution\/CancelableFuture.html#isCompleted:Boolean", "kind" : "abstract def"}, {"label" : "onComplete", "tail" : "(f: (Try[A]) ⇒ U)(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onComplete", "link" : "monix\/execution\/CancelableFuture.html#onComplete[U](f:scala.util.Try[T]=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "abstract def"}, {"label" : "result", "tail" : "(atMost: Duration)(permit: CanAwait): A", "member" : "scala.concurrent.Awaitable.result", "link" : "monix\/execution\/CancelableFuture.html#result(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):T", "kind" : "abstract def"}, {"label" : "ready", "tail" : "(atMost: Duration)(permit: CanAwait): CancelableFuture.this.type", "member" : "scala.concurrent.Awaitable.ready", "link" : "monix\/execution\/CancelableFuture.html#ready(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):Awaitable.this.type", "kind" : "abstract def"}], "members_object" : [{"label" : "CatsInstances", "tail" : "", "member" : "monix.execution.CancelableFuture.CatsInstances", "link" : "monix\/execution\/CancelableFuture$.html#CatsInstancesextendsMonad[monix.execution.CancelableFuture]withStackSafeMonad[monix.execution.CancelableFuture]withCoflatMap[monix.execution.CancelableFuture]withMonadError[monix.execution.CancelableFuture,Throwable]", "kind" : "final class"}, {"label" : "catsInstances", "tail" : "(ec: ExecutionContext): CatsInstances", "member" : "monix.execution.CancelableFuture.catsInstances", "link" : "monix\/execution\/CancelableFuture$.html#catsInstances(implicitec:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture.CatsInstances", "kind" : "implicit def"}, {"label" : "async", "tail" : "(register: ((Try[A]) ⇒ Unit) ⇒ Cancelable)(ec: ExecutionContext): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.async", "link" : "monix\/execution\/CancelableFuture$.html#async[A](register:(scala.util.Try[A]=>Unit)=>monix.execution.Cancelable)(implicitec:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(value: Try[A]): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.fromTry", "link" : "monix\/execution\/CancelableFuture$.html#fromTry[A](value:scala.util.Try[A]):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "never", "tail" : "(): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.never", "link" : "monix\/execution\/CancelableFuture$.html#never[A]:monix.execution.CancelableFuture[A]", "kind" : "final def"}, {"label" : "unit", "tail" : ": CancelableFuture[Unit]", "member" : "monix.execution.CancelableFuture.unit", "link" : "monix\/execution\/CancelableFuture$.html#unit:monix.execution.CancelableFuture[Unit]", "kind" : "final val"}, {"label" : "raiseError", "tail" : "(e: Throwable): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.raiseError", "link" : "monix\/execution\/CancelableFuture$.html#raiseError[A](e:Throwable):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(value: A): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.pure", "link" : "monix\/execution\/CancelableFuture$.html#pure[A](value:A):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "failed", "tail" : "(e: Throwable): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.failed", "link" : "monix\/execution\/CancelableFuture$.html#failed[A](e:Throwable):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "successful", "tail" : "(value: A): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.successful", "link" : "monix\/execution\/CancelableFuture$.html#successful[A](value:A):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(underlying: Future[A], cancelable: Cancelable): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.apply", "link" : "monix\/execution\/CancelableFuture$.html#apply[A](underlying:scala.concurrent.Future[A],cancelable:monix.execution.Cancelable):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/CancelableFuture$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/CancelableFuture$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/CancelableFuture$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/CancelableFuture$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/CancelableFuture$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/CancelableFuture$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/CancelableFuture$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/CancelableFuture$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/CancelableFuture$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/CancelableFuture$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/CancelableFuture$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/CancelableFuture$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/CancelableFuture$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/CancelableFuture$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/CancelableFuture$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/CancelableFuture$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/CancelableFuture.html", "kind" : "class"}, {"name" : "monix.execution.ExecutionModel", "shortDescription" : "Specification for run-loops, imposed by the Scheduler.", "object" : "monix\/execution\/ExecutionModel$.html", "members_class" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "monix\/execution\/ExecutionModel.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "monix\/execution\/ExecutionModel.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/ExecutionModel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/ExecutionModel.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/ExecutionModel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/ExecutionModel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/ExecutionModel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/ExecutionModel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/ExecutionModel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/ExecutionModel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/ExecutionModel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/ExecutionModel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/ExecutionModel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/ExecutionModel.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/ExecutionModel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/ExecutionModel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/ExecutionModel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/ExecutionModel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "nextFrameIndex", "tail" : "(current: Int): Int", "member" : "monix.execution.ExecutionModel.nextFrameIndex", "link" : "monix\/execution\/ExecutionModel.html#nextFrameIndex(current:Int):Int", "kind" : "abstract def"}, {"label" : "batchedExecutionModulus", "tail" : ": Int", "member" : "monix.execution.ExecutionModel.batchedExecutionModulus", "link" : "monix\/execution\/ExecutionModel.html#batchedExecutionModulus:Int", "kind" : "abstract val"}, {"label" : "recommendedBatchSize", "tail" : ": Int", "member" : "monix.execution.ExecutionModel.recommendedBatchSize", "link" : "monix\/execution\/ExecutionModel.html#recommendedBatchSize:Int", "kind" : "abstract val"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "monix\/execution\/ExecutionModel.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "monix\/execution\/ExecutionModel.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "monix\/execution\/ExecutionModel.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "Default", "tail" : ": ExecutionModel", "member" : "monix.execution.ExecutionModel.Default", "link" : "monix\/execution\/ExecutionModel$.html#Default:monix.execution.ExecutionModel", "kind" : "final val"}, {"label" : "Extensions", "tail" : "", "member" : "monix.execution.ExecutionModel.Extensions", "link" : "monix\/execution\/ExecutionModel$.html#ExtensionsextendsAnyVal", "kind" : "implicit final class"}, {"label" : "BatchedExecution", "tail" : "", "member" : "monix.execution.ExecutionModel.BatchedExecution", "link" : "monix\/execution\/ExecutionModel$.html#BatchedExecutionextendsExecutionModelwithProductwithSerializable", "kind" : "final case class"}, {"label" : "AlwaysAsyncExecution", "tail" : "", "member" : "monix.execution.ExecutionModel.AlwaysAsyncExecution", "link" : "monix\/execution\/ExecutionModel$.html#AlwaysAsyncExecution", "kind" : "object"}, {"label" : "SynchronousExecution", "tail" : "", "member" : "monix.execution.ExecutionModel.SynchronousExecution", "link" : "monix\/execution\/ExecutionModel$.html#SynchronousExecution", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/ExecutionModel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/ExecutionModel$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/ExecutionModel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/ExecutionModel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/ExecutionModel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/ExecutionModel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/ExecutionModel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/ExecutionModel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/ExecutionModel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/ExecutionModel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/ExecutionModel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/ExecutionModel$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/ExecutionModel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/ExecutionModel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/ExecutionModel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/ExecutionModel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/ExecutionModel.html", "kind" : "class"}, {"name" : "monix.execution.FutureUtils", "shortDescription" : "Utilities for Scala's standard concurrent.Future.", "object" : "monix\/execution\/FutureUtils$.html", "members_object" : [{"label" : "extensions", "tail" : "", "member" : "monix.execution.FutureUtils.extensions", "link" : "monix\/execution\/FutureUtils$.html#extensions", "kind" : "object"}, {"label" : "delayedResult", "tail" : "(delay: FiniteDuration)(result: ⇒ A)(s: Scheduler): Future[A]", "member" : "monix.execution.FutureUtils.delayedResult", "link" : "monix\/execution\/FutureUtils$.html#delayedResult[A](delay:scala.concurrent.duration.FiniteDuration)(result:=>A)(implicits:monix.execution.Scheduler):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "dematerialize", "tail" : "(source: Future[Try[A]])(ec: ExecutionContext): Future[A]", "member" : "monix.execution.FutureUtils.dematerialize", "link" : "monix\/execution\/FutureUtils$.html#dematerialize[A](source:scala.concurrent.Future[scala.util.Try[A]])(implicitec:scala.concurrent.ExecutionContext):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "transformWith", "tail" : "(source: Future[A], f: (Try[A]) ⇒ Future[B])(ec: ExecutionContext): Future[B]", "member" : "monix.execution.FutureUtils.transformWith", "link" : "monix\/execution\/FutureUtils$.html#transformWith[A,B](source:scala.concurrent.Future[A],f:scala.util.Try[A]=>scala.concurrent.Future[B])(implicitec:scala.concurrent.ExecutionContext):scala.concurrent.Future[B]", "kind" : "def"}, {"label" : "transform", "tail" : "(source: Future[A], f: (Try[A]) ⇒ Try[B])(ec: ExecutionContext): Future[B]", "member" : "monix.execution.FutureUtils.transform", "link" : "monix\/execution\/FutureUtils$.html#transform[A,B](source:scala.concurrent.Future[A],f:scala.util.Try[A]=>scala.util.Try[B])(implicitec:scala.concurrent.ExecutionContext):scala.concurrent.Future[B]", "kind" : "def"}, {"label" : "materialize", "tail" : "(source: Future[A])(ec: ExecutionContext): Future[Try[A]]", "member" : "monix.execution.FutureUtils.materialize", "link" : "monix\/execution\/FutureUtils$.html#materialize[A](source:scala.concurrent.Future[A])(implicitec:scala.concurrent.ExecutionContext):scala.concurrent.Future[scala.util.Try[A]]", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(source: Future[A], atMost: FiniteDuration, fallback: ⇒ Future[A])(s: Scheduler): Future[A]", "member" : "monix.execution.FutureUtils.timeoutTo", "link" : "monix\/execution\/FutureUtils$.html#timeoutTo[A](source:scala.concurrent.Future[A],atMost:scala.concurrent.duration.FiniteDuration,fallback:=>scala.concurrent.Future[A])(implicits:monix.execution.Scheduler):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "timeout", "tail" : "(source: Future[A], atMost: FiniteDuration)(s: Scheduler): Future[A]", "member" : "monix.execution.FutureUtils.timeout", "link" : "monix\/execution\/FutureUtils$.html#timeout[A](source:scala.concurrent.Future[A],atMost:scala.concurrent.duration.FiniteDuration)(implicits:monix.execution.Scheduler):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/FutureUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/FutureUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/FutureUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/FutureUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/FutureUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/FutureUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/FutureUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/FutureUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/FutureUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/FutureUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/FutureUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/FutureUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/FutureUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/FutureUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/FutureUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/FutureUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/FutureUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/FutureUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/FutureUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.execution.Listener", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Listener.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Listener.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Listener.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Listener.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Listener.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Listener.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Listener.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Listener.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Listener.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Listener.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Listener.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Listener.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Listener.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Listener.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Listener.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Listener.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Listener.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Listener.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Listener.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onValue", "tail" : "(value: A): Unit", "member" : "monix.execution.Listener.onValue", "link" : "monix\/execution\/Listener.html#onValue(value:A):Unit", "kind" : "abstract def"}], "shortDescription" : "A simple listener interface, to be used in observer patternimplementations or for specifying asynchronous callbacks.", "object" : "monix\/execution\/Listener$.html", "members_object" : [{"label" : "fromPromise", "tail" : "(p: Promise[A]): Listener[A]", "member" : "monix.execution.Listener.fromPromise", "link" : "monix\/execution\/Listener$.html#fromPromise[A](p:scala.concurrent.Promise[A]):monix.execution.Listener[A]", "kind" : "def"}, {"label" : "unit", "tail" : "(f: () ⇒ Unit): Listener[Unit]", "member" : "monix.execution.Listener.unit", "link" : "monix\/execution\/Listener$.html#unit(f:()=>Unit):monix.execution.Listener[Unit]", "kind" : "def"}, {"label" : "apply", "tail" : "(f: (A) ⇒ U): Listener[A]", "member" : "monix.execution.Listener.apply", "link" : "monix\/execution\/Listener$.html#apply[A,U](f:A=>U):monix.execution.Listener[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Listener$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Listener$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Listener$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Listener$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Listener$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Listener$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Listener$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Listener$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Listener$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Listener$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Listener$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Listener$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Listener$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Listener$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Listener$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Listener$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Listener$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Listener$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Listener$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/Listener.html", "kind" : "trait"}, {"name" : "monix.execution.Scheduler", "members_trait" : [{"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/Scheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Scheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Scheduler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Scheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Scheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Scheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Scheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Scheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Scheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Scheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Scheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Scheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Scheduler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Scheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Scheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Scheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Scheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): Scheduler", "member" : "monix.execution.Scheduler.withExecutionModel", "link" : "monix\/execution\/Scheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "abstract def"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.Scheduler.executionModel", "link" : "monix\/execution\/Scheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "abstract def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockMonotonic", "link" : "monix\/execution\/Scheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockRealTime", "link" : "monix\/execution\/Scheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/Scheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/Scheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/Scheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.Scheduler.reportFailure", "link" : "monix\/execution\/Scheduler.html#reportFailure(t:Throwable):Unit", "kind" : "abstract def"}, {"label" : "execute", "tail" : "(command: Runnable): Unit", "member" : "monix.execution.Scheduler.execute", "link" : "monix\/execution\/Scheduler.html#execute(command:Runnable):Unit", "kind" : "abstract def"}], "shortDescription" : "A Scheduler is an scala.concurrent.ExecutionContext that additionally canschedule the execution of units of work to run with a delay or periodically.", "object" : "monix\/execution\/Scheduler$.html", "members_object" : [{"label" : "Implicits", "tail" : "", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.Implicits", "link" : "monix\/execution\/Scheduler$.html#Implicits", "kind" : "object"}, {"label" : "ImplicitsLike", "tail" : "", "member" : "monix.execution.SchedulerCompanion.ImplicitsLike", "link" : "monix\/execution\/Scheduler$.html#ImplicitsLikeextendsAnyRef", "kind" : "trait"}, {"label" : "Extensions", "tail" : "", "member" : "monix.execution.Scheduler.Extensions", "link" : "monix\/execution\/Scheduler$.html#ExtensionsextendsAnyValwithExecuteExtensions", "kind" : "implicit final class"}, {"label" : "traced", "tail" : "(): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.traced", "link" : "monix\/execution\/Scheduler$.html#traced:monix.execution.Scheduler", "kind" : "def"}, {"label" : "global", "tail" : "(): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.global", "link" : "monix\/execution\/Scheduler$.html#global:monix.execution.Scheduler", "kind" : "def"}, {"label" : "DefaultScheduledExecutor", "tail" : ": ScheduledExecutorService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.DefaultScheduledExecutor", "link" : "monix\/execution\/Scheduler$.html#DefaultScheduledExecutor:java.util.concurrent.ScheduledExecutorService", "kind" : "lazy val"}, {"label" : "fixedPool", "tail" : "(name: String, poolSize: Int, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.fixedPool", "link" : "monix\/execution\/Scheduler$.html#fixedPool(name:String,poolSize:Int,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "singleThread", "tail" : "(name: String, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.singleThread", "link" : "monix\/execution\/Scheduler$.html#singleThread(name:String,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "cached", "tail" : "(name: String, minThreads: Int, maxThreads: Int, keepAliveTime: FiniteDuration, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.cached", "link" : "monix\/execution\/Scheduler$.html#cached(name:String,minThreads:Int,maxThreads:Int,keepAliveTime:scala.concurrent.duration.FiniteDuration,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "io", "tail" : "(name: String, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.io", "link" : "monix\/execution\/Scheduler$.html#io(name:String,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "forkJoin", "tail" : "(parallelism: Int, maxThreads: Int, name: String, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.forkJoin", "link" : "monix\/execution\/Scheduler$.html#forkJoin(parallelism:Int,maxThreads:Int,name:String,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "computation", "tail" : "(parallelism: Int, name: String, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.computation", "link" : "monix\/execution\/Scheduler$.html#computation(parallelism:Int,name:String,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "trampoline", "tail" : "(underlying: Scheduler, executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.trampoline", "link" : "monix\/execution\/Scheduler$.html#trampoline(underlying:monix.execution.Scheduler,executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(ec: ExecutionContext, executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(ec:scala.concurrent.ExecutionContext,executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(ec: ExecutionContext): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(ec:scala.concurrent.ExecutionContext):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ExecutorService, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ExecutorService,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ExecutorService): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ExecutorService):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ExecutorService, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ExecutorService,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ExecutorService, reporter: UncaughtExceptionReporter): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ExecutorService,reporter:monix.execution.UncaughtExceptionReporter):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "apply", "tail" : "(ec: ExecutionContext, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(ec:scala.concurrent.ExecutionContext,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(ec: ExecutionContext, reporter: UncaughtExceptionReporter): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(ec:scala.concurrent.ExecutionContext,reporter:monix.execution.UncaughtExceptionReporter):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ScheduledExecutorService, ec: ExecutionContext): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ScheduledExecutorService,ec:scala.concurrent.ExecutionContext):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ScheduledExecutorService, ec: ExecutionContext, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ScheduledExecutorService,ec:scala.concurrent.ExecutionContext,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Scheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Scheduler$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Scheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Scheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Scheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Scheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Scheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Scheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Scheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Scheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Scheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Scheduler$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Scheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Scheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Scheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Scheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/Scheduler.html", "kind" : "trait"}, {"name" : "monix.execution.UncaughtExceptionReporter", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/UncaughtExceptionReporter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/UncaughtExceptionReporter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/UncaughtExceptionReporter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/UncaughtExceptionReporter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/UncaughtExceptionReporter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/UncaughtExceptionReporter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/UncaughtExceptionReporter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/UncaughtExceptionReporter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/UncaughtExceptionReporter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/UncaughtExceptionReporter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/UncaughtExceptionReporter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/UncaughtExceptionReporter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/UncaughtExceptionReporter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/UncaughtExceptionReporter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/UncaughtExceptionReporter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/UncaughtExceptionReporter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "reportFailure", "tail" : "(ex: Throwable): Unit", "member" : "monix.execution.UncaughtExceptionReporter.reportFailure", "link" : "monix\/execution\/UncaughtExceptionReporter.html#reportFailure(ex:Throwable):Unit", "kind" : "abstract def"}], "shortDescription" : "An exception reporter is a function that logs an uncaught error.", "object" : "monix\/execution\/UncaughtExceptionReporter$.html", "members_object" : [{"label" : "LogExceptionsToStandardErr", "tail" : ": UncaughtExceptionReporter", "member" : "monix.execution.UncaughtExceptionReporter.LogExceptionsToStandardErr", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#LogExceptionsToStandardErr:monix.execution.UncaughtExceptionReporter", "kind" : "val"}, {"label" : "apply", "tail" : "(reporter: (Throwable) ⇒ Unit): UncaughtExceptionReporter", "member" : "monix.execution.UncaughtExceptionReporter.apply", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#apply(reporter:Throwable=>Unit):monix.execution.UncaughtExceptionReporter", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/UncaughtExceptionReporter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/UncaughtExceptionReporter.html", "kind" : "trait"}], "monix.reactive.subjects" : [{"name" : "monix.reactive.subjects.AsyncSubject", "shortDescription" : "An AsyncSubject emits the last value (and only the last value) emitted bythe source and only after the source completes.", "object" : "monix\/reactive\/subjects\/AsyncSubject$.html", "members_class" : [{"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.AsyncSubject.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.subjects.AsyncSubject.onComplete", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.subjects.AsyncSubject.onError", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Ack", "member" : "monix.reactive.subjects.AsyncSubject.onNext", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onNext(elem:A):monix.execution.Ack", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.AsyncSubject.size", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#size:Int", "kind" : "def"}, {"member" : "monix.reactive.subjects.AsyncSubject#<init>", "error" : "unsupported entity"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (A) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, A) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (A) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (A, Ack) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (A, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (A) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) ⇒ Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/AsyncSubject.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): AsyncSubject[A]", "member" : "monix.reactive.subjects.AsyncSubject.apply", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#apply[A]():monix.reactive.subjects.AsyncSubject[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/AsyncSubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.BehaviorSubject", "shortDescription" : "BehaviorSubject when subscribed, will emit the most recently emitted item by the source,or the initialValue (as the seed) in case no value has yet been emitted, then continuingto emit events subsequent to the time of invocation.", "object" : "monix\/reactive\/subjects\/BehaviorSubject$.html", "members_class" : [{"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.subjects.BehaviorSubject.onComplete", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.subjects.BehaviorSubject.onError", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.subjects.BehaviorSubject.onNext", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.BehaviorSubject.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.BehaviorSubject.size", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#size:Int", "kind" : "def"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (A) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, A) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (A) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (A, Ack) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (A, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (A) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) ⇒ Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(initialValue: A): BehaviorSubject[A]", "member" : "monix.reactive.subjects.BehaviorSubject.apply", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#apply[A](initialValue:A):monix.reactive.subjects.BehaviorSubject[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/BehaviorSubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.ConcurrentSubject", "shortDescription" : "A concurrent subject is meant for imperative style feeding of events.", "object" : "monix\/reactive\/subjects\/ConcurrentSubject$.html", "members_class" : [{"member" : "monix.reactive.subjects.ConcurrentSubject#<init>", "error" : "unsupported entity"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[I, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[I, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (O) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (O) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[O]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (O) ⇒ K)(K: Order[K]): Observable[O]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (O) ⇒ K)(K: Order[K]): Task[Option[O]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (O) ⇒ K)(K: Order[K]): Observable[O]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (O) ⇒ K)(K: Order[K]): Task[Option[O]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, O) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, O) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[O]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (O) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (O) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (O) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (O) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, O) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, O) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (O) ⇒ Boolean): Task[Option[O]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[O]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[O]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[O]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(O, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (O, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(O, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (O, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (O, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (O, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (O, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (O, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (O, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[O]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (O) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[O]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, O) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (O) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, O) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, O) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (O) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[O]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[O]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[O]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (O) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[O, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (O) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[O, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[O]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (O) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (O) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (O) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (O) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, O]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (O) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (O) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, O) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, O) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (O) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[O]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[O]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (O, Int) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (O) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[O]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (O) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (O, Ack) ⇒ Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (O, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (O, Ack) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (O) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (O) ⇒ Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (O) ⇒ F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (O) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (O) ⇒ K)(K: Eq[K]): Observable[O]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[O, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[O]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (O) ⇒ Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (O, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(O, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[O, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[O]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[O, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[O, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[O]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[O])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[O])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onNext", "tail" : "(elem: I): Ack", "member" : "monix.reactive.Observer.Sync.onNext", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onNext(elem:A):monix.execution.Ack", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.Subject.size", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#size:Int", "kind" : "abstract def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.Observer.onComplete", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onComplete():Unit", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.Observer.onError", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onError(ex:Throwable):Unit", "kind" : "abstract def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[O]): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "toReactiveProcessor", "tail" : "(source: ConcurrentSubject[I, O], bufferSize: Int)(s: Scheduler): Processor[I, O]", "member" : "monix.reactive.subjects.ConcurrentSubject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#toReactiveProcessor[I,O](source:monix.reactive.subjects.ConcurrentSubject[I,O],bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,O]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int, initial: Seq[A], strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replayLimited", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replayLimited[A](capacity:Int,initial:Seq[A],strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int, initial: Seq[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replayLimited", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replayLimited[A](capacity:Int,initial:Seq[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int, strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replayLimited", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replayLimited[A](capacity:Int,strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int)(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replayLimited", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replayLimited[A](capacity:Int)(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(initial: Seq[A], strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replay[A](initial:Seq[A],strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(initial: Seq[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replay[A](initial:Seq[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replay[A](strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replay[A](implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "async", "tail" : "(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.async", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#async[A](implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "behavior", "tail" : "(initial: A, strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.behavior", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#behavior[A](initial:A,strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "behavior", "tail" : "(initial: A)(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.behavior", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#behavior[A](initial:A)(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "publishToOne", "tail" : "(strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.publishToOne", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#publishToOne[A](strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "publishToOne", "tail" : "(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.publishToOne", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#publishToOne[A](implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "publish", "tail" : "(strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.publish", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#publish[A](strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.publish", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#publish[A](implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "from", "tail" : "(p: Subject[I, O], overflowStrategy: Synchronous[I])(s: Scheduler): ConcurrentSubject[I, O]", "member" : "monix.reactive.subjects.ConcurrentSubject.from", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#from[I,O](p:monix.reactive.subjects.Subject[I,O],overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[I])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[I,O]", "kind" : "def"}, {"label" : "apply", "tail" : "(multicast: MulticastStrategy[A], overflow: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.apply", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#apply[A](multicast:monix.reactive.MulticastStrategy[A],overflow:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(multicast: MulticastStrategy[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.apply", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#apply[A](multicast:monix.reactive.MulticastStrategy[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/ConcurrentSubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.PublishSubject", "shortDescription" : "A PublishSubject emits to a subscriber only those items that areemitted by the source subsequent to the time of the subscription.", "object" : "monix\/reactive\/subjects\/PublishSubject$.html", "members_class" : [{"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.subjects.PublishSubject.onComplete", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.subjects.PublishSubject.onError", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.subjects.PublishSubject.onNext", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.PublishSubject.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.PublishSubject.size", "link" : "monix\/reactive\/subjects\/PublishSubject.html#size:Int", "kind" : "def"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/PublishSubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/PublishSubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (A) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/PublishSubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/PublishSubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/PublishSubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/PublishSubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/PublishSubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/PublishSubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/PublishSubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/PublishSubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/PublishSubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/PublishSubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/PublishSubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/PublishSubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/PublishSubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/PublishSubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/PublishSubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/PublishSubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/PublishSubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/PublishSubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/PublishSubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/PublishSubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/PublishSubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/PublishSubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/PublishSubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/PublishSubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/PublishSubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/PublishSubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/PublishSubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/PublishSubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/PublishSubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, A) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/PublishSubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/PublishSubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/PublishSubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/PublishSubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/PublishSubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/PublishSubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/PublishSubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/PublishSubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/PublishSubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/PublishSubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (A) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/PublishSubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/PublishSubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/PublishSubject.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/PublishSubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/PublishSubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/PublishSubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/PublishSubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/PublishSubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/PublishSubject.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/PublishSubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/PublishSubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (A, Ack) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (A, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (A) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/PublishSubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/PublishSubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) ⇒ Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/PublishSubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/PublishSubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/PublishSubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/PublishSubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/PublishSubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/subjects\/PublishSubject.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/PublishSubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/PublishSubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/PublishSubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/PublishSubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/PublishSubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/PublishSubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/PublishSubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/PublishSubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/PublishSubject.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/PublishSubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/PublishSubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/PublishSubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/PublishSubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/PublishSubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/PublishSubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/PublishSubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/PublishSubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/PublishSubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/PublishSubject.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/PublishSubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/PublishSubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/PublishSubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/PublishSubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): PublishSubject[A]", "member" : "monix.reactive.subjects.PublishSubject.apply", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#apply[A]():monix.reactive.subjects.PublishSubject[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/PublishSubject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/PublishSubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.PublishToOneSubject", "shortDescription" : "PublishToOneSubject is a monix.reactive.subjects.PublishSubjectthat can be subscribed at most once.", "object" : "monix\/reactive\/subjects\/PublishToOneSubject$.html", "members_class" : [{"label" : "cancel", "tail" : "(): Unit", "member" : "monix.reactive.subjects.PublishToOneSubject.cancel", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#cancel():Unit", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.reactive.subjects.PublishToOneSubject.isCanceled", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.subjects.PublishToOneSubject.onComplete", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.subjects.PublishToOneSubject.onError", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.subjects.PublishToOneSubject.onNext", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.PublishToOneSubject.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.PublishToOneSubject.size", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#size:Int", "kind" : "def"}, {"label" : "subscription", "tail" : ": Future[Ack]", "member" : "monix.reactive.subjects.PublishToOneSubject.subscription", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscription:scala.concurrent.Future[monix.execution.Ack]", "kind" : "val"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (A) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, A) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (A) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (A, Ack) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (A, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (A) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) ⇒ Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): PublishToOneSubject[A]", "member" : "monix.reactive.subjects.PublishToOneSubject.apply", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#apply[A]():monix.reactive.subjects.PublishToOneSubject[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/PublishToOneSubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.ReplaySubject", "shortDescription" : "ReplaySubject emits to any observer all of the items that were emittedby the source, regardless of when the observer subscribes.", "object" : "monix\/reactive\/subjects\/ReplaySubject$.html", "members_class" : [{"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.subjects.ReplaySubject.onComplete", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.subjects.ReplaySubject.onError", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.subjects.ReplaySubject.onNext", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.ReplaySubject.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.ReplaySubject.size", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#size:Int", "kind" : "def"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (A) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, A) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (A) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (A, Ack) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (A, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (A) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) ⇒ Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/ReplaySubject.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "createLimited", "tail" : "(capacity: Int, initial: Seq[A]): ReplaySubject[A]", "member" : "monix.reactive.subjects.ReplaySubject.createLimited", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#createLimited[A](capacity:Int,initial:Seq[A]):monix.reactive.subjects.ReplaySubject[A]", "kind" : "def"}, {"label" : "createLimited", "tail" : "(capacity: Int): ReplaySubject[A]", "member" : "monix.reactive.subjects.ReplaySubject.createLimited", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#createLimited[A](capacity:Int):monix.reactive.subjects.ReplaySubject[A]", "kind" : "def"}, {"label" : "create", "tail" : "(initial: Seq[A]): ReplaySubject[A]", "member" : "monix.reactive.subjects.ReplaySubject.create", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#create[A](initial:Seq[A]):monix.reactive.subjects.ReplaySubject[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(initial: A*): ReplaySubject[A]", "member" : "monix.reactive.subjects.ReplaySubject.apply", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#apply[A](initial:A*):monix.reactive.subjects.ReplaySubject[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/ReplaySubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.Subject", "shortDescription" : "A Subject is a sort of bridge or proxy that acts both as anObserver and as an Observable and that must respectthe contract of both.", "object" : "monix\/reactive\/subjects\/Subject$.html", "members_class" : [{"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[I, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/Subject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[I, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/Subject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"member" : "monix.reactive.subjects.Subject#<init>", "error" : "unsupported entity"}, {"label" : "foreach", "tail" : "(cb: (O) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/Subject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (O) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/Subject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/Subject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[O]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/Subject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/subjects\/Subject.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/Subject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/subjects\/Subject.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/Subject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (O) ⇒ K)(K: Order[K]): Observable[O]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/subjects\/Subject.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (O) ⇒ K)(K: Order[K]): Task[Option[O]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/Subject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/subjects\/Subject.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/Subject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (O) ⇒ K)(K: Order[K]): Observable[O]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/subjects\/Subject.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (O) ⇒ K)(K: Order[K]): Task[Option[O]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/Subject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/Subject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/Subject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/subjects\/Subject.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/Subject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/Subject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/subjects\/Subject.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/Subject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/Subject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/Subject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, O) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/subjects\/Subject.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, O) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/Subject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[O]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/Subject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/subjects\/Subject.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (O) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/Subject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (O) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/subjects\/Subject.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (O) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/Subject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (O) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/subjects\/Subject.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/Subject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/Subject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/Subject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, O) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/subjects\/Subject.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, O) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/Subject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/subjects\/Subject.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/Subject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (O) ⇒ Boolean): Task[Option[O]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/Subject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/subjects\/Subject.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/Subject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/Subject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/Subject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[O]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/Subject.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[O]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/Subject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/Subject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/Subject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/Subject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/Subject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/Subject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[O]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/Subject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/Subject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/Subject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/Subject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/Subject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/Subject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/Subject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/Subject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(O, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/Subject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (O, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/Subject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(O, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/Subject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (O, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (O, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (O, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (O, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (O, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (O, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/Subject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/Subject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/Subject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/Subject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/Subject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/Subject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/Subject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/Subject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/Subject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/Subject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/Subject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/Subject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/Subject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[O]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/Subject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (O) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/Subject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[O]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/Subject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/Subject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/Subject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/Subject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/Subject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/Subject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/Subject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/Subject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, O) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/subjects\/Subject.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (O) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/Subject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, O) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/Subject.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, O) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/Subject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/Subject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/Subject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (O) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/Subject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/Subject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/Subject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/Subject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[O]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/Subject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/Subject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/Subject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/Subject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/Subject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[O]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/Subject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/Subject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[O]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/Subject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (O) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[O, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (O) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/Subject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[O, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/Subject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[O]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/Subject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (O) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/Subject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (O) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/subjects\/Subject.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (O) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/Subject.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/Subject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/subjects\/Subject.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/Subject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/Subject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (O) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, O]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/Subject.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (O) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/subjects\/Subject.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (O) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/subjects\/Subject.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/Subject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/Subject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/Subject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/Subject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, O) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, O) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/Subject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/Subject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/Subject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/Subject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (O) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/Subject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/subjects\/Subject.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/subjects\/Subject.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/Subject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[O]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/Subject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/Subject.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/Subject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/Subject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/Subject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[O]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/Subject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (O, Int) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/Subject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (O) ⇒ Boolean): Observable[O]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/Subject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[O]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/Subject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/Subject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/Subject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/Subject.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/Subject.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (O) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/Subject.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (O, Ack) ⇒ Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/subjects\/Subject.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (O, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/subjects\/Subject.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (O, Ack) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/Subject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (O) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/subjects\/Subject.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (O) ⇒ Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/subjects\/Subject.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (O) ⇒ F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/subjects\/Subject.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (O) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/Subject.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/subjects\/Subject.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/subjects\/Subject.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/subjects\/Subject.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/subjects\/Subject.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/subjects\/Subject.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/subjects\/Subject.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/subjects\/Subject.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/subjects\/Subject.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/Subject.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/subjects\/Subject.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/subjects\/Subject.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/Subject.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/Subject.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/subjects\/Subject.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/subjects\/Subject.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[O]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/Subject.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (O) ⇒ K)(K: Eq[K]): Observable[O]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/Subject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/Subject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[O, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/Subject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[O]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/subjects\/Subject.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (O) ⇒ Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/Subject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/Subject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/Subject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/Subject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/Subject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/Subject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/subjects\/Subject.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (O) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/Subject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/Subject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (O, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/Subject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(O, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/Subject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[O, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/Subject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[O]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/Subject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/Subject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/Subject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/Subject.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/Subject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/Subject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/Subject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/Subject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/Subject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/Subject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/Subject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[O, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/Subject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[O, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/Subject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[O]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[O])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[O])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/Subject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/Subject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/Subject.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/Subject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/Subject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/Subject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/Subject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/Subject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/Subject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/Subject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/Subject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/Subject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/Subject.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/Subject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/Subject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/Subject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/Subject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.Subject.size", "link" : "monix\/reactive\/subjects\/Subject.html#size:Int", "kind" : "abstract def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.Observer.onComplete", "link" : "monix\/reactive\/subjects\/Subject.html#onComplete():Unit", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.Observer.onError", "link" : "monix\/reactive\/subjects\/Subject.html#onError(ex:Throwable):Unit", "kind" : "abstract def"}, {"label" : "onNext", "tail" : "(elem: I): Future[Ack]", "member" : "monix.reactive.Observer.onNext", "link" : "monix\/reactive\/subjects\/Subject.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "abstract def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[O]): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/Subject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "toReactiveProcessor", "tail" : "(source: Subject[I, O], bufferSize: Int)(s: Scheduler): Processor[I, O]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/Subject$.html#toReactiveProcessor[I,O](source:monix.reactive.subjects.Subject[I,O],bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,O]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/Subject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/Subject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/Subject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/Subject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/Subject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/Subject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/Subject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/Subject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/Subject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/Subject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/Subject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/Subject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/Subject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/Subject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/Subject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/Subject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/Subject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.Var", "shortDescription" : "Var when subscribed, will emit the most recently emitted item by the source,or the initial (as the seed) in case no value has yet been emitted, then continuingto emit events subsequent to the time of invocation via an underlying ConcurrentSubject.", "object" : "monix\/reactive\/subjects\/Var$.html", "members_class" : [{"label" : ":=", "tail" : "(update: A): Ack", "member" : "monix.reactive.subjects.Var.:=", "link" : "monix\/reactive\/subjects\/Var.html#:=(update:A):monix.execution.Ack", "kind" : "def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.reactive.subjects.Var.apply", "link" : "monix\/reactive\/subjects\/Var.html#apply():A", "kind" : "def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.Var.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/Var.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/Var.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (A) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/Var.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/Var.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/Var.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/subjects\/Var.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/Var.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/subjects\/Var.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/Var.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/subjects\/Var.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/Var.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/subjects\/Var.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/Var.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/subjects\/Var.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/Var.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/Var.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/Var.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/subjects\/Var.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/Var.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/Var.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/subjects\/Var.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/Var.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/Var.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/Var.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/subjects\/Var.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/Var.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/Var.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/subjects\/Var.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/Var.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/subjects\/Var.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/Var.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/subjects\/Var.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/Var.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/Var.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/Var.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/subjects\/Var.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/Var.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/subjects\/Var.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/Var.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/Var.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/subjects\/Var.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/Var.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/Var.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/Var.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/Var.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/Var.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/Var.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/Var.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/Var.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/Var.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/Var.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/Var.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/Var.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/Var.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/Var.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/Var.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/Var.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/Var.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/Var.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/Var.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/Var.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/Var.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/Var.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/Var.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/Var.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/Var.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/Var.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/Var.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/Var.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/Var.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/Var.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/Var.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/Var.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/Var.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/Var.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/Var.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/Var.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/Var.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/Var.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/Var.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/Var.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/Var.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/Var.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/Var.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/Var.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, A) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/subjects\/Var.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/Var.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/Var.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/Var.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/Var.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/Var.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/Var.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/Var.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/Var.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/Var.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/Var.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/Var.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/Var.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/Var.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/Var.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/Var.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/Var.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/Var.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/Var.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/Var.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/Var.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/Var.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/Var.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/Var.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/Var.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/Var.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/Var.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/Var.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/Var.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/Var.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (A) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/subjects\/Var.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/Var.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/Var.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/subjects\/Var.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/Var.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/Var.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/Var.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/subjects\/Var.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/subjects\/Var.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/Var.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/Var.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/Var.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/Var.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/Var.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/Var.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/Var.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/Var.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/Var.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/subjects\/Var.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/subjects\/Var.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/Var.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/Var.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/Var.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/Var.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/Var.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/Var.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/Var.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/Var.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/Var.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/Var.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/Var.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/Var.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/Var.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/Var.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/Var.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (A, Ack) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/subjects\/Var.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (A, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/subjects\/Var.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/Var.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (A) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/subjects\/Var.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/subjects\/Var.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/subjects\/Var.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/Var.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/subjects\/Var.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/subjects\/Var.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/subjects\/Var.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/subjects\/Var.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/subjects\/Var.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/subjects\/Var.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/subjects\/Var.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/subjects\/Var.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/Var.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/subjects\/Var.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/subjects\/Var.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/Var.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/Var.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/subjects\/Var.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/subjects\/Var.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/Var.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/Var.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/Var.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/Var.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/subjects\/Var.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) ⇒ Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/Var.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/Var.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/Var.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/Var.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/Var.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/Var.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/subjects\/Var.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/Var.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/Var.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/Var.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/Var.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/Var.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/Var.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/Var.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/Var.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/Var.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/Var.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/Var.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/Var.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/Var.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/Var.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/Var.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/Var.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/Var.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/Var.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/Var.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/Var.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/Var.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/Var.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/Var.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/Var.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/Var.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/Var.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/Var.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/Var.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/Var.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/Var.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/Var.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/Var.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/Var.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/Var.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/Var.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(initial: A)(s: Scheduler): Var[A]", "member" : "monix.reactive.subjects.Var.apply", "link" : "monix\/reactive\/subjects\/Var$.html#apply[A](initial:A)(implicits:monix.execution.Scheduler):monix.reactive.subjects.Var[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/Var$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/Var$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/Var$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/Var$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/Var$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/Var$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/Var$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/Var$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/Var$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/Var$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/Var$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/Var$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/Var$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/Var$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/Var$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/Var$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/Var.html", "kind" : "class"}], "monix.eval" : [{"name" : "monix.eval.Callback", "shortDescription" : "Represents a callback that should be called asynchronouslywith the result of a computation.", "object" : "monix\/eval\/Callback$.html", "members_class" : [{"label" : "contramap", "tail" : "(f: (B) ⇒ A): Callback[B]", "member" : "monix.eval.Callback.contramap", "link" : "monix\/eval\/Callback.html#contramap[B](f:B=>A):monix.eval.Callback[B]", "kind" : "final def"}, {"label" : "apply", "tail" : "(result: Either[Throwable, A]): Unit", "member" : "monix.eval.Callback.apply", "link" : "monix\/eval\/Callback.html#apply(result:Either[Throwable,A]):Unit", "kind" : "final def"}, {"label" : "apply", "tail" : "(result: Coeval[A]): Unit", "member" : "monix.eval.Callback.apply", "link" : "monix\/eval\/Callback.html#apply(result:monix.eval.Coeval[A]):Unit", "kind" : "final def"}, {"label" : "apply", "tail" : "(result: Try[A]): Unit", "member" : "monix.eval.Callback.apply", "link" : "monix\/eval\/Callback.html#apply(result:scala.util.Try[A]):Unit", "kind" : "final def"}, {"label" : "onValue", "tail" : "(value: A): Unit", "member" : "monix.eval.Callback.onValue", "link" : "monix\/eval\/Callback.html#onValue(value:A):Unit", "kind" : "final def"}, {"member" : "monix.eval.Callback#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/eval\/Callback.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Unit) ⇒ A): (Try[A]) ⇒ A", "member" : "scala.Function1.andThen", "link" : "monix\/eval\/Callback.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Try[A]): (A) ⇒ Unit", "member" : "scala.Function1.compose", "link" : "monix\/eval\/Callback.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Callback.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Callback.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Callback.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Callback.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Callback.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Callback.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Callback.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Callback.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Callback.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Callback.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Callback.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Callback.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Callback.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Callback.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Callback.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Callback.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Callback.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Callback.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.eval.Callback.onError", "link" : "monix\/eval\/Callback.html#onError(ex:Throwable):Unit", "kind" : "abstract def"}, {"label" : "onSuccess", "tail" : "(value: A): Unit", "member" : "monix.eval.Callback.onSuccess", "link" : "monix\/eval\/Callback.html#onSuccess(value:A):Unit", "kind" : "abstract def"}], "members_object" : [{"label" : "contravariantCallback", "tail" : ": Contravariant[Callback]", "member" : "monix.eval.Callback.contravariantCallback", "link" : "monix\/eval\/Callback$.html#contravariantCallback:cats.Contravariant[monix.eval.Callback]", "kind" : "implicit val"}, {"label" : "Extensions", "tail" : "", "member" : "monix.eval.Callback.Extensions", "link" : "monix\/eval\/Callback$.html#Extensions[-A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "fromAttempt", "tail" : "(cb: (Either[Throwable, A]) ⇒ Unit): Callback[A]", "member" : "monix.eval.Callback.fromAttempt", "link" : "monix\/eval\/Callback$.html#fromAttempt[A](cb:Either[Throwable,A]=>Unit):monix.eval.Callback[A]", "kind" : "def"}, {"label" : "async", "tail" : "(cb: Callback[A])(s: Scheduler): Callback[A]", "member" : "monix.eval.Callback.async", "link" : "monix\/eval\/Callback$.html#async[A](cb:monix.eval.Callback[A])(implicits:monix.execution.Scheduler):monix.eval.Callback[A]", "kind" : "def"}, {"label" : "fromPromise", "tail" : "(p: Promise[A]): Callback[A]", "member" : "monix.eval.Callback.fromPromise", "link" : "monix\/eval\/Callback$.html#fromPromise[A](p:scala.concurrent.Promise[A]):monix.eval.Callback[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(r: UncaughtExceptionReporter): Callback[A]", "member" : "monix.eval.Callback.empty", "link" : "monix\/eval\/Callback$.html#empty[A](implicitr:monix.execution.UncaughtExceptionReporter):monix.eval.Callback[A]", "kind" : "def"}, {"label" : "safe", "tail" : "(cb: Callback[A])(r: UncaughtExceptionReporter): Callback[A]", "member" : "monix.eval.Callback.safe", "link" : "monix\/eval\/Callback$.html#safe[A](cb:monix.eval.Callback[A])(implicitr:monix.execution.UncaughtExceptionReporter):monix.eval.Callback[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Callback$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Callback$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Callback$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Callback$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Callback$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Callback$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Callback$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Callback$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Callback$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Callback$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Callback$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Callback$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/Callback$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Callback$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Callback$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Callback$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Callback$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Callback$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Callback$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/Callback.html", "kind" : "class"}, {"name" : "monix.eval.Coeval", "shortDescription" : "Coeval represents lazy computations that can execute synchronously.", "object" : "monix\/eval\/Coeval$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.eval.Coeval.toString", "link" : "monix\/eval\/Coeval.html#toString():String", "kind" : "def"}, {"label" : "zipMap", "tail" : "(that: Coeval[B])(f: (A, B) ⇒ C): Coeval[C]", "member" : "monix.eval.Coeval.zipMap", "link" : "monix\/eval\/Coeval.html#zipMap[B,C](that:monix.eval.Coeval[B])(f:(A,B)=>C):monix.eval.Coeval[C]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: Coeval[B]): Coeval[(A, B)]", "member" : "monix.eval.Coeval.zip", "link" : "monix\/eval\/Coeval.html#zip[B](that:monix.eval.Coeval[B]):monix.eval.Coeval[(A,B)]", "kind" : "final def"}, {"label" : "doOnFinish", "tail" : "(f: (Option[Throwable]) ⇒ Coeval[Unit]): Coeval[A]", "member" : "monix.eval.Coeval.doOnFinish", "link" : "monix\/eval\/Coeval.html#doOnFinish(f:Option[Throwable]=>monix.eval.Coeval[Unit]):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "onErrorRestartLoop", "tail" : "(initial: S)(f: (Throwable, S, (S) ⇒ Coeval[B]) ⇒ Coeval[B]): Coeval[B]", "member" : "monix.eval.Coeval.onErrorRestartLoop", "link" : "monix\/eval\/Coeval.html#onErrorRestartLoop[S,B>:A](initial:S)(f:(Throwable,S,S=>monix.eval.Coeval[B])=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, U]): Coeval[U]", "member" : "monix.eval.Coeval.onErrorRecover", "link" : "monix\/eval\/Coeval.html#onErrorRecover[U>:A](pf:PartialFunction[Throwable,U]):monix.eval.Coeval[U]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ U): Coeval[U]", "member" : "monix.eval.Coeval.onErrorHandle", "link" : "monix\/eval\/Coeval.html#onErrorHandle[U>:A](f:Throwable=>U):monix.eval.Coeval[U]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Coeval[A]", "member" : "monix.eval.Coeval.onErrorRestartIf", "link" : "monix\/eval\/Coeval.html#onErrorRestartIf(p:Throwable=>Boolean):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Coeval[A]", "member" : "monix.eval.Coeval.onErrorRestart", "link" : "monix\/eval\/Coeval.html#onErrorRestart(maxRetries:Long):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Coeval[B]): Coeval[B]", "member" : "monix.eval.Coeval.onErrorFallbackTo", "link" : "monix\/eval\/Coeval.html#onErrorFallbackTo[B>:A](that:monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Coeval[B]): Coeval[B]", "member" : "monix.eval.Coeval.onErrorHandleWith", "link" : "monix\/eval\/Coeval.html#onErrorHandleWith[B>:A](f:Throwable=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Coeval[B]]): Coeval[B]", "member" : "monix.eval.Coeval.onErrorRecoverWith", "link" : "monix\/eval\/Coeval.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.eval.Coeval[B]]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Coeval[A]", "member" : "monix.eval.Coeval.restartUntil", "link" : "monix\/eval\/Coeval.html#restartUntil(p:A=>Boolean):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "transformWith", "tail" : "(fa: (A) ⇒ Coeval[R], fe: (Throwable) ⇒ Coeval[R]): Coeval[R]", "member" : "monix.eval.Coeval.transformWith", "link" : "monix\/eval\/Coeval.html#transformWith[R](fa:A=>monix.eval.Coeval[R],fe:Throwable=>monix.eval.Coeval[R]):monix.eval.Coeval[R]", "kind" : "final def"}, {"label" : "transform", "tail" : "(fa: (A) ⇒ R, fe: (Throwable) ⇒ R): Coeval[R]", "member" : "monix.eval.Coeval.transform", "link" : "monix\/eval\/Coeval.html#transform[R](fa:A=>R,fe:Throwable=>R):monix.eval.Coeval[R]", "kind" : "final def"}, {"label" : "toIO", "tail" : "(): IO[A]", "member" : "monix.eval.Coeval.toIO", "link" : "monix\/eval\/Coeval.html#toIO:cats.effect.IO[A]", "kind" : "final def"}, {"label" : "toEval", "tail" : "(): Eval[A]", "member" : "monix.eval.Coeval.toEval", "link" : "monix\/eval\/Coeval.html#toEval:cats.Eval[A]", "kind" : "final def"}, {"label" : "task", "tail" : "(): Task[A]", "member" : "monix.eval.Coeval.task", "link" : "monix\/eval\/Coeval.html#task:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Try[B]]): Coeval[B]", "member" : "monix.eval.Coeval.dematerialize", "link" : "monix\/eval\/Coeval.html#dematerialize[B](implicitev:A<:<scala.util.Try[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Coeval[Try[A]]", "member" : "monix.eval.Coeval.materialize", "link" : "monix\/eval\/Coeval.html#materialize:monix.eval.Coeval[scala.util.Try[A]]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Coeval[B]", "member" : "monix.eval.Coeval.map", "link" : "monix\/eval\/Coeval.html#map[B](f:A=>B):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ Unit): Unit", "member" : "monix.eval.Coeval.foreach", "link" : "monix\/eval\/Coeval.html#foreach(f:A=>Unit):Unit", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(f: (A) ⇒ Unit): Coeval[Unit]", "member" : "monix.eval.Coeval.foreachL", "link" : "monix\/eval\/Coeval.html#foreachL(f:A=>Unit):monix.eval.Coeval[Unit]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Coeval[B]]): Coeval[B]", "member" : "monix.eval.Coeval.flatten", "link" : "monix\/eval\/Coeval.html#flatten[B](implicitev:A<:<monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Coeval[B]): Coeval[B]", "member" : "monix.eval.Coeval.flatMap", "link" : "monix\/eval\/Coeval.html#flatMap[B](f:A=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Coeval[Throwable]", "member" : "monix.eval.Coeval.failed", "link" : "monix\/eval\/Coeval.html#failed:monix.eval.Coeval[Throwable]", "kind" : "final def"}, {"label" : "bracketE", "tail" : "(use: (A) ⇒ Coeval[B])(release: (A, Either[Throwable, B]) ⇒ Coeval[Unit]): Coeval[B]", "member" : "monix.eval.Coeval.bracketE", "link" : "monix\/eval\/Coeval.html#bracketE[B](use:A=>monix.eval.Coeval[B])(release:(A,Either[Throwable,B])=>monix.eval.Coeval[Unit]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) ⇒ Coeval[B])(release: (A) ⇒ Coeval[Unit]): Coeval[B]", "member" : "monix.eval.Coeval.bracket", "link" : "monix\/eval\/Coeval.html#bracket[B](use:A=>monix.eval.Coeval[B])(release:A=>monix.eval.Coeval[Unit]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "attempt", "tail" : "(): Coeval[Either[Throwable, A]]", "member" : "monix.eval.Coeval.attempt", "link" : "monix\/eval\/Coeval.html#attempt:monix.eval.Coeval[Either[Throwable,A]]", "kind" : "final def"}, {"label" : "memoizeOnSuccess", "tail" : "(): Coeval[A]", "member" : "monix.eval.Coeval.memoizeOnSuccess", "link" : "monix\/eval\/Coeval.html#memoizeOnSuccess:monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "memoize", "tail" : "(): Coeval[A]", "member" : "monix.eval.Coeval.memoize", "link" : "monix\/eval\/Coeval.html#memoize:monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "runTry", "tail" : "(): Try[A]", "member" : "monix.eval.Coeval.runTry", "link" : "monix\/eval\/Coeval.html#runTry:scala.util.Try[A]", "kind" : "def"}, {"label" : "runAttempt", "tail" : "(): Either[Throwable, A]", "member" : "monix.eval.Coeval.runAttempt", "link" : "monix\/eval\/Coeval.html#runAttempt:Either[Throwable,A]", "kind" : "def"}, {"label" : "run", "tail" : "(): Eager[A]", "member" : "monix.eval.Coeval.run", "link" : "monix\/eval\/Coeval.html#run:monix.eval.Coeval.Eager[A]", "kind" : "def"}, {"label" : "value", "tail" : "(): A", "member" : "monix.eval.Coeval.value", "link" : "monix\/eval\/Coeval.html#value:A", "kind" : "def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.eval.Coeval.apply", "link" : "monix\/eval\/Coeval.html#apply():A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Coeval.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Coeval.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Coeval.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Coeval.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Coeval.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Coeval.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Coeval.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Coeval.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Coeval.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Coeval.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Coeval.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Coeval.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Coeval.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Coeval.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Coeval.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "catsMonoid", "tail" : "(A: Monoid[A]): Monoid[Coeval[A]]", "member" : "monix.eval.Coeval.catsMonoid", "link" : "monix\/eval\/Coeval$.html#catsMonoid[A](implicitA:cats.Monoid[A]):cats.Monoid[monix.eval.Coeval[A]]", "kind" : "implicit def"}, {"label" : "catsSync", "tail" : "(): CatsSyncForCoeval", "member" : "monix.eval.Coeval.catsSync", "link" : "monix\/eval\/Coeval$.html#catsSync:monix.eval.instances.CatsSyncForCoeval", "kind" : "implicit def"}, {"label" : "Always", "tail" : "", "member" : "monix.eval.Coeval.Always", "link" : "monix\/eval\/Coeval$.html#Always[+A]extendsCoeval[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Error", "tail" : "", "member" : "monix.eval.Coeval.Error", "link" : "monix\/eval\/Coeval$.html#ErrorextendsCoeval.Eager[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Now", "tail" : "", "member" : "monix.eval.Coeval.Now", "link" : "monix\/eval\/Coeval$.html#Now[+A]extendsCoeval.Eager[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Eager", "tail" : "", "member" : "monix.eval.Coeval.Eager", "link" : "monix\/eval\/Coeval$.html#Eager", "kind" : "object"}, {"label" : "Eager", "tail" : "", "member" : "monix.eval.Coeval.Eager", "link" : "monix\/eval\/Coeval$.html#Eager[+A]extendsCoeval[A]withProduct", "kind" : "sealed abstract class"}, {"label" : "zip6", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4], fa5: Coeval[A5], fa6: Coeval[A6]): Coeval[(A1, A2, A3, A4, A5, A6)]", "member" : "monix.eval.Coeval.zip6", "link" : "monix\/eval\/Coeval$.html#zip6[A1,A2,A3,A4,A5,A6](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4],fa5:monix.eval.Coeval[A5],fa6:monix.eval.Coeval[A6]):monix.eval.Coeval[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "zip5", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4], fa5: Coeval[A5]): Coeval[(A1, A2, A3, A4, A5)]", "member" : "monix.eval.Coeval.zip5", "link" : "monix\/eval\/Coeval$.html#zip5[A1,A2,A3,A4,A5](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4],fa5:monix.eval.Coeval[A5]):monix.eval.Coeval[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "zip4", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4]): Coeval[(A1, A2, A3, A4)]", "member" : "monix.eval.Coeval.zip4", "link" : "monix\/eval\/Coeval$.html#zip4[A1,A2,A3,A4](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4]):monix.eval.Coeval[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "zip3", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3]): Coeval[(A1, A2, A3)]", "member" : "monix.eval.Coeval.zip3", "link" : "monix\/eval\/Coeval$.html#zip3[A1,A2,A3](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3]):monix.eval.Coeval[(A1,A2,A3)]", "kind" : "def"}, {"label" : "zip2", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2]): Coeval[(A1, A2)]", "member" : "monix.eval.Coeval.zip2", "link" : "monix\/eval\/Coeval$.html#zip2[A1,A2,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2]):monix.eval.Coeval[(A1,A2)]", "kind" : "def"}, {"label" : "map6", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4], fa5: Coeval[A5], fa6: Coeval[A6])(f: (A1, A2, A3, A4, A5, A6) ⇒ R): Coeval[R]", "member" : "monix.eval.Coeval.map6", "link" : "monix\/eval\/Coeval$.html#map6[A1,A2,A3,A4,A5,A6,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4],fa5:monix.eval.Coeval[A5],fa6:monix.eval.Coeval[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.eval.Coeval[R]", "kind" : "def"}, {"label" : "map5", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4], fa5: Coeval[A5])(f: (A1, A2, A3, A4, A5) ⇒ R): Coeval[R]", "member" : "monix.eval.Coeval.map5", "link" : "monix\/eval\/Coeval$.html#map5[A1,A2,A3,A4,A5,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4],fa5:monix.eval.Coeval[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.eval.Coeval[R]", "kind" : "def"}, {"label" : "map4", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4])(f: (A1, A2, A3, A4) ⇒ R): Coeval[R]", "member" : "monix.eval.Coeval.map4", "link" : "monix\/eval\/Coeval$.html#map4[A1,A2,A3,A4,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4])(f:(A1,A2,A3,A4)=>R):monix.eval.Coeval[R]", "kind" : "def"}, {"label" : "map3", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3])(f: (A1, A2, A3) ⇒ R): Coeval[R]", "member" : "monix.eval.Coeval.map3", "link" : "monix\/eval\/Coeval$.html#map3[A1,A2,A3,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3])(f:(A1,A2,A3)=>R):monix.eval.Coeval[R]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2])(f: (A1, A2) ⇒ R): Coeval[R]", "member" : "monix.eval.Coeval.map2", "link" : "monix\/eval\/Coeval$.html#map2[A1,A2,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2])(f:(A1,A2)=>R):monix.eval.Coeval[R]", "kind" : "def"}, {"label" : "zipList", "tail" : "(sources: Coeval[A]*): Coeval[List[A]]", "member" : "monix.eval.Coeval.zipList", "link" : "monix\/eval\/Coeval$.html#zipList[A](sources:monix.eval.Coeval[A]*):monix.eval.Coeval[List[A]]", "kind" : "def"}, {"label" : "traverse", "tail" : "(sources: M[A])(f: (A) ⇒ Coeval[B])(cbf: CanBuildFrom[M[A], B, M[B]]): Coeval[M[B]]", "member" : "monix.eval.Coeval.traverse", "link" : "monix\/eval\/Coeval$.html#traverse[A,B,M[X]<:TraversableOnce[X]](sources:M[A])(f:A=>monix.eval.Coeval[B])(implicitcbf:scala.collection.generic.CanBuildFrom[M[A],B,M[B]]):monix.eval.Coeval[M[B]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(sources: M[Coeval[A]])(cbf: CanBuildFrom[M[Coeval[A]], A, M[A]]): Coeval[M[A]]", "member" : "monix.eval.Coeval.sequence", "link" : "monix\/eval\/Coeval$.html#sequence[A,M[X]<:TraversableOnce[X]](sources:M[monix.eval.Coeval[A]])(implicitcbf:scala.collection.generic.CanBuildFrom[M[monix.eval.Coeval[A]],A,M[A]]):monix.eval.Coeval[M[A]]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Coeval[Either[A, B]]): Coeval[B]", "member" : "monix.eval.Coeval.tailRecM", "link" : "monix\/eval\/Coeval$.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Coeval[Either[A,B]]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(a: Try[A]): Coeval[A]", "member" : "monix.eval.Coeval.fromTry", "link" : "monix\/eval\/Coeval$.html#fromTry[A](a:scala.util.Try[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "fromEval", "tail" : "(a: Eval[A]): Coeval[A]", "member" : "monix.eval.Coeval.fromEval", "link" : "monix\/eval\/Coeval$.html#fromEval[A](a:cats.Eval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "unit", "tail" : ": Coeval[Unit]", "member" : "monix.eval.Coeval.unit", "link" : "monix\/eval\/Coeval$.html#unit:monix.eval.Coeval[Unit]", "kind" : "val"}, {"label" : "delay", "tail" : "(a: ⇒ A): Coeval[A]", "member" : "monix.eval.Coeval.delay", "link" : "monix\/eval\/Coeval$.html#delay[A](a:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: ⇒ A): Coeval[A]", "member" : "monix.eval.Coeval.eval", "link" : "monix\/eval\/Coeval$.html#eval[A](a:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "evalOnce", "tail" : "(a: ⇒ A): Coeval[A]", "member" : "monix.eval.Coeval.evalOnce", "link" : "monix\/eval\/Coeval$.html#evalOnce[A](a:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: ⇒ Coeval[A]): Coeval[A]", "member" : "monix.eval.Coeval.suspend", "link" : "monix\/eval\/Coeval$.html#suspend[A](fa:=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: ⇒ Coeval[A]): Coeval[A]", "member" : "monix.eval.Coeval.defer", "link" : "monix\/eval\/Coeval$.html#defer[A](fa:=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Coeval[A]", "member" : "monix.eval.Coeval.raiseError", "link" : "monix\/eval\/Coeval$.html#raiseError[A](ex:Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Coeval[A]", "member" : "monix.eval.Coeval.pure", "link" : "monix\/eval\/Coeval$.html#pure[A](a:A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): Coeval[A]", "member" : "monix.eval.Coeval.now", "link" : "monix\/eval\/Coeval$.html#now[A](a:A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(f: ⇒ A): Coeval[A]", "member" : "monix.eval.Coeval.apply", "link" : "monix\/eval\/Coeval$.html#apply[A](f:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "catsSemigroup", "tail" : "(A: Semigroup[A]): Semigroup[Coeval[A]]", "member" : "monix.eval.CoevalInstancesLevel0.catsSemigroup", "link" : "monix\/eval\/Coeval$.html#catsSemigroup[A](implicitA:cats.kernel.Semigroup[A]):cats.kernel.Semigroup[monix.eval.Coeval[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Coeval$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Coeval$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Coeval$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Coeval$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Coeval$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Coeval$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Coeval$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Coeval$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Coeval$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/Coeval$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Coeval$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Coeval$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Coeval$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Coeval$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Coeval$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Coeval$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/Coeval.html", "kind" : "class"}, {"name" : "monix.eval.Fiber", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Fiber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Fiber.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Fiber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Fiber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Fiber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Fiber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Fiber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Fiber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Fiber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/Fiber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Fiber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Fiber.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Fiber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Fiber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Fiber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Fiber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "join", "tail" : "(): Task[A]", "member" : "monix.eval.Fiber.join", "link" : "monix\/eval\/Fiber.html#join:monix.eval.Task[A]", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): Task[Unit]", "member" : "monix.eval.Fiber.cancel", "link" : "monix\/eval\/Fiber.html#cancel:monix.eval.Task[Unit]", "kind" : "abstract def"}], "shortDescription" : "Fiber represents the (pure) result of a Task being started concurrentlyand that can be either joined or cancelled.", "object" : "monix\/eval\/Fiber$.html", "members_object" : [{"label" : "apply", "tail" : "(task: Task[A]): Fiber[A]", "member" : "monix.eval.Fiber.apply", "link" : "monix\/eval\/Fiber$.html#apply[A](task:monix.eval.Task[A]):monix.eval.Fiber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Fiber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Fiber$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Fiber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Fiber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Fiber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Fiber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Fiber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Fiber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Fiber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/Fiber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Fiber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Fiber$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Fiber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Fiber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Fiber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Fiber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/eval\/Fiber.html", "kind" : "trait"}, {"name" : "monix.eval.MVar", "shortDescription" : "A mutable location, that is either empty or containsa value of type A.", "object" : "monix\/eval\/MVar$.html", "members_class" : [{"member" : "monix.eval.MVar#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/MVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/MVar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/MVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/MVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/MVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/MVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/MVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/MVar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/MVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/MVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/MVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/MVar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/MVar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/MVar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/MVar.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/MVar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/MVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/MVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/MVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "read", "tail" : "(): Task[A]", "member" : "monix.eval.MVar.read", "link" : "monix\/eval\/MVar.html#read:monix.eval.Task[A]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(): Task[A]", "member" : "monix.eval.MVar.take", "link" : "monix\/eval\/MVar.html#take:monix.eval.Task[A]", "kind" : "abstract def"}, {"label" : "put", "tail" : "(a: A): Task[Unit]", "member" : "monix.eval.MVar.put", "link" : "monix\/eval\/MVar.html#put(a:A):monix.eval.Task[Unit]", "kind" : "abstract def"}], "members_object" : [{"label" : "withPadding", "tail" : "(ps: PaddingStrategy): Task[MVar[A]]", "member" : "monix.eval.MVar.withPadding", "link" : "monix\/eval\/MVar$.html#withPadding[A](ps:monix.execution.atomic.PaddingStrategy):monix.eval.Task[monix.eval.MVar[A]]", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initial: A, ps: PaddingStrategy): Task[MVar[A]]", "member" : "monix.eval.MVar.withPadding", "link" : "monix\/eval\/MVar$.html#withPadding[A](initial:A,ps:monix.execution.atomic.PaddingStrategy):monix.eval.Task[monix.eval.MVar[A]]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Task[MVar[A]]", "member" : "monix.eval.MVar.empty", "link" : "monix\/eval\/MVar$.html#empty[A]:monix.eval.Task[monix.eval.MVar[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(initial: A): Task[MVar[A]]", "member" : "monix.eval.MVar.apply", "link" : "monix\/eval\/MVar$.html#apply[A](initial:A):monix.eval.Task[monix.eval.MVar[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/MVar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/MVar$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/MVar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/MVar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/MVar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/MVar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/MVar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/MVar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/MVar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/MVar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/MVar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/MVar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/MVar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/MVar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/MVar$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/MVar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/MVar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/MVar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/MVar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/MVar.html", "kind" : "class"}, {"name" : "monix.eval.Task", "shortDescription" : "Task represents a specification for a possibly lazy orasynchronous computation, which when executed will produce an Aas a result, along with possible side-effects.", "object" : "monix\/eval\/Task$.html", "members_class" : [{"label" : "zipMap", "tail" : "(that: Task[B])(f: (A, B) ⇒ C): Task[C]", "member" : "monix.eval.Task.zipMap", "link" : "monix\/eval\/Task.html#zipMap[B,C](that:monix.eval.Task[B])(f:(A,B)=>C):monix.eval.Task[C]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: Task[B]): Task[(A, B)]", "member" : "monix.eval.Task.zip", "link" : "monix\/eval\/Task.html#zip[B](that:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Task[A]", "member" : "monix.eval.Task.uncancelable", "link" : "monix\/eval\/Task.html#uncancelable:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "transformWith", "tail" : "(fa: (A) ⇒ Task[R], fe: (Throwable) ⇒ Task[R]): Task[R]", "member" : "monix.eval.Task.transformWith", "link" : "monix\/eval\/Task.html#transformWith[R](fa:A=>monix.eval.Task[R],fe:Throwable=>monix.eval.Task[R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "transform", "tail" : "(fa: (A) ⇒ R, fe: (Throwable) ⇒ R): Task[R]", "member" : "monix.eval.Task.transform", "link" : "monix\/eval\/Task.html#transform[R](fa:A=>R,fe:Throwable=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "monix.eval.Task.toString", "link" : "monix\/eval\/Task.html#toString():String", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(after: FiniteDuration, backup: Task[B]): Task[B]", "member" : "monix.eval.Task.timeoutTo", "link" : "monix\/eval\/Task.html#timeoutTo[B>:A](after:scala.concurrent.duration.FiniteDuration,backup:monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "timeout", "tail" : "(after: FiniteDuration): Task[A]", "member" : "monix.eval.Task.timeout", "link" : "monix\/eval\/Task.html#timeout(after:scala.concurrent.duration.FiniteDuration):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[A]", "member" : "monix.eval.Task.toReactivePublisher", "link" : "monix\/eval\/Task.html#toReactivePublisher(implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "toIO", "tail" : "(s: Scheduler): IO[A]", "member" : "monix.eval.Task.toIO", "link" : "monix\/eval\/Task.html#toIO(implicits:monix.execution.Scheduler):cats.effect.IO[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "to", "tail" : "(F: Async[F], s: Scheduler): F[A]", "member" : "monix.eval.Task.to", "link" : "monix\/eval\/Task.html#to[F[_]](implicitF:cats.effect.Async[F],implicits:monix.execution.Scheduler):F[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "start", "tail" : "(): Task[Fiber[A]]", "member" : "monix.eval.Task.start", "link" : "monix\/eval\/Task.html#start:monix.eval.Task[monix.eval.Fiber[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, U]): Task[U]", "member" : "monix.eval.Task.onErrorRecover", "link" : "monix\/eval\/Task.html#onErrorRecover[U>:A](pf:PartialFunction[Throwable,U]):monix.eval.Task[U]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ U): Task[U]", "member" : "monix.eval.Task.onErrorHandle", "link" : "monix\/eval\/Task.html#onErrorHandle[U>:A](f:Throwable=>U):monix.eval.Task[U]", "kind" : "final def"}, {"label" : "onErrorRestartLoop", "tail" : "(initial: S)(f: (Throwable, S, (S) ⇒ Task[B]) ⇒ Task[B]): Task[B]", "member" : "monix.eval.Task.onErrorRestartLoop", "link" : "monix\/eval\/Task.html#onErrorRestartLoop[S,B>:A](initial:S)(f:(Throwable,S,S=>monix.eval.Task[B])=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Task[A]", "member" : "monix.eval.Task.onErrorRestartIf", "link" : "monix\/eval\/Task.html#onErrorRestartIf(p:Throwable=>Boolean):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Task[A]", "member" : "monix.eval.Task.onErrorRestart", "link" : "monix\/eval\/Task.html#onErrorRestart(maxRetries:Long):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Task[B]", "member" : "monix.eval.Task.map", "link" : "monix\/eval\/Task.html#map[B](f:A=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Task[A]", "member" : "monix.eval.Task.restartUntil", "link" : "monix\/eval\/Task.html#restartUntil(p:A=>Boolean):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Task[B]): Task[B]", "member" : "monix.eval.Task.onErrorFallbackTo", "link" : "monix\/eval\/Task.html#onErrorFallbackTo[B>:A](that:monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Task[B]): Task[B]", "member" : "monix.eval.Task.onErrorHandleWith", "link" : "monix\/eval\/Task.html#onErrorHandleWith[B>:A](f:Throwable=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Task[B]]): Task[B]", "member" : "monix.eval.Task.onErrorRecoverWith", "link" : "monix\/eval\/Task.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.eval.Task[B]]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "onCancelRaiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.Task.onCancelRaiseError", "link" : "monix\/eval\/Task.html#onCancelRaiseError(e:Throwable):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Try[B]]): Task[B]", "member" : "monix.eval.Task.dematerialize", "link" : "monix\/eval\/Task.html#dematerialize[B](implicitev:A<:<scala.util.Try[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Task[Try[A]]", "member" : "monix.eval.Task.materialize", "link" : "monix\/eval\/Task.html#materialize:monix.eval.Task[scala.util.Try[A]]", "kind" : "final def"}, {"label" : "doOnCancel", "tail" : "(callback: Task[Unit]): Task[A]", "member" : "monix.eval.Task.doOnCancel", "link" : "monix\/eval\/Task.html#doOnCancel(callback:monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "doOnFinish", "tail" : "(f: (Option[Throwable]) ⇒ Task[Unit]): Task[A]", "member" : "monix.eval.Task.doOnFinish", "link" : "monix\/eval\/Task.html#doOnFinish(f:Option[Throwable]=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "forkAndForget", "tail" : "(): Task[Unit]", "member" : "monix.eval.Task.forkAndForget", "link" : "monix\/eval\/Task.html#forkAndForget:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "fork", "tail" : "(): Task[Fiber[A]]", "member" : "monix.eval.Task.fork", "link" : "monix\/eval\/Task.html#fork:monix.eval.Task[monix.eval.Fiber[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.eval.Task.foreach", "link" : "monix\/eval\/Task.html#foreach(f:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(f: (A) ⇒ Unit): Task[Unit]", "member" : "monix.eval.Task.foreachL", "link" : "monix\/eval\/Task.html#foreachL(f:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Task[B]]): Task[B]", "member" : "monix.eval.Task.flatten", "link" : "monix\/eval\/Task.html#flatten[B](implicitev:A<:<monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Task[B]): Task[B]", "member" : "monix.eval.Task.flatMap", "link" : "monix\/eval\/Task.html#flatMap[B](f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Task[Throwable]", "member" : "monix.eval.Task.failed", "link" : "monix\/eval\/Task.html#failed:monix.eval.Task[Throwable]", "kind" : "final def"}, {"label" : "cancelable", "tail" : "(): Task[A]", "member" : "monix.eval.Task.cancelable", "link" : "monix\/eval\/Task.html#cancelable:monix.eval.Task[A]", "kind" : "def"}, {"label" : "executeWithOptions", "tail" : "(f: (Options) ⇒ Options): Task[A]", "member" : "monix.eval.Task.executeWithOptions", "link" : "monix\/eval\/Task.html#executeWithOptions(f:monix.eval.Task.Options=>monix.eval.Task.Options):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Task[A]", "member" : "monix.eval.Task.executeWithModel", "link" : "monix\/eval\/Task.html#executeWithModel(em:monix.execution.ExecutionModel):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Task[A]", "member" : "monix.eval.Task.executeAsync", "link" : "monix\/eval\/Task.html#executeAsync:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Task[A]", "member" : "monix.eval.Task.executeOn", "link" : "monix\/eval\/Task.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "delayResult", "tail" : "(timespan: FiniteDuration): Task[A]", "member" : "monix.eval.Task.delayResult", "link" : "monix\/eval\/Task.html#delayResult(timespan:scala.concurrent.duration.FiniteDuration):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Task[A]", "member" : "monix.eval.Task.delayExecution", "link" : "monix\/eval\/Task.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "coeval", "tail" : "(s: Scheduler): Coeval[Either[CancelableFuture[A], A]]", "member" : "monix.eval.Task.coeval", "link" : "monix\/eval\/Task.html#coeval(implicits:monix.execution.Scheduler):monix.eval.Coeval[Either[monix.execution.CancelableFuture[A],A]]", "kind" : "final def"}, {"label" : "bracketE", "tail" : "(use: (A) ⇒ Task[B])(release: (A, Either[Option[Throwable], B]) ⇒ Task[Unit]): Task[B]", "member" : "monix.eval.Task.bracketE", "link" : "monix\/eval\/Task.html#bracketE[B](use:A=>monix.eval.Task[B])(release:(A,Either[Option[Throwable],B])=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) ⇒ Task[B])(release: (A) ⇒ Task[Unit]): Task[B]", "member" : "monix.eval.Task.bracket", "link" : "monix\/eval\/Task.html#bracket[B](use:A=>monix.eval.Task[B])(release:A=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(s: Scheduler): Task[A]", "member" : "monix.eval.Task.asyncBoundary", "link" : "monix\/eval\/Task.html#asyncBoundary(s:monix.execution.Scheduler):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(): Task[A]", "member" : "monix.eval.Task.asyncBoundary", "link" : "monix\/eval\/Task.html#asyncBoundary:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "attempt", "tail" : "(): Task[Either[Throwable, A]]", "member" : "monix.eval.Task.attempt", "link" : "monix\/eval\/Task.html#attempt:monix.eval.Task[Either[Throwable,A]]", "kind" : "final def"}, {"label" : "memoizeOnSuccess", "tail" : "(): Task[A]", "member" : "monix.eval.Task.memoizeOnSuccess", "link" : "monix\/eval\/Task.html#memoizeOnSuccess:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "memoize", "tail" : "(): Task[A]", "member" : "monix.eval.Task.memoize", "link" : "monix\/eval\/Task.html#memoize:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "runOnComplete", "tail" : "(f: (Try[A]) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.eval.Task.runOnComplete", "link" : "monix\/eval\/Task.html#runOnComplete(f:scala.util.Try[A]=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "runSyncUnsafeOpt", "tail" : "(timeout: Duration)(s: Scheduler, opts: Options, permit: CanBlock): A", "member" : "monix.eval.Task.runSyncUnsafeOpt", "link" : "monix\/eval\/Task.html#runSyncUnsafeOpt(timeout:scala.concurrent.duration.Duration)(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options,implicitpermit:monix.execution.schedulers.CanBlock):A", "kind" : "final def"}, {"label" : "runSyncUnsafe", "tail" : "(timeout: Duration)(s: Scheduler, permit: CanBlock): A", "member" : "monix.eval.Task.runSyncUnsafe", "link" : "monix\/eval\/Task.html#runSyncUnsafe(timeout:scala.concurrent.duration.Duration)(implicits:monix.execution.Scheduler,implicitpermit:monix.execution.schedulers.CanBlock):A", "kind" : "final def"}, {"label" : "runSyncMaybeOpt", "tail" : "(s: Scheduler, opts: Options): Either[CancelableFuture[A], A]", "member" : "monix.eval.Task.runSyncMaybeOpt", "link" : "monix\/eval\/Task.html#runSyncMaybeOpt(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):Either[monix.execution.CancelableFuture[A],A]", "kind" : "final def"}, {"label" : "runSyncMaybe", "tail" : "(s: Scheduler): Either[CancelableFuture[A], A]", "member" : "monix.eval.Task.runSyncMaybe", "link" : "monix\/eval\/Task.html#runSyncMaybe(implicits:monix.execution.Scheduler):Either[monix.execution.CancelableFuture[A],A]", "kind" : "final def"}, {"label" : "runAsyncOpt", "tail" : "(cb: Callback[A])(s: Scheduler, opts: Options): Cancelable", "member" : "monix.eval.Task.runAsyncOpt", "link" : "monix\/eval\/Task.html#runAsyncOpt(cb:monix.eval.Callback[A])(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.Cancelable", "kind" : "def"}, {"label" : "runAsyncOpt", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[A]", "member" : "monix.eval.Task.runAsyncOpt", "link" : "monix\/eval\/Task.html#runAsyncOpt(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "runAsync", "tail" : "(cb: Callback[A])(s: Scheduler): Cancelable", "member" : "monix.eval.Task.runAsync", "link" : "monix\/eval\/Task.html#runAsync(cb:monix.eval.Callback[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "def"}, {"label" : "runAsync", "tail" : "(s: Scheduler): CancelableFuture[A]", "member" : "monix.eval.Task.runAsync", "link" : "monix\/eval\/Task.html#runAsync(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Task.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Task.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Task.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Task.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Task.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Task.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Task.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Task.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Task.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Task.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Task.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Task.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Task.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Task.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Task.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Par", "tail" : "", "member" : "monix.eval.TaskParallelNewtype.Par", "link" : "monix\/eval\/Task$.html#Par", "kind" : "object"}, {"label" : "unsafeStartNow", "tail" : "(source: Task[A], context: Context, cb: Callback[A]): Unit", "member" : "monix.eval.Task.unsafeStartNow", "link" : "monix\/eval\/Task$.html#unsafeStartNow[A](source:monix.eval.Task[A],context:monix.eval.Task.Context,cb:monix.eval.Callback[A]):Unit", "kind" : "def"}, {"label" : "unsafeStartTrampolined", "tail" : "(source: Task[A], context: Context, cb: Callback[A]): Unit", "member" : "monix.eval.Task.unsafeStartTrampolined", "link" : "monix\/eval\/Task$.html#unsafeStartTrampolined[A](source:monix.eval.Task[A],context:monix.eval.Task.Context,cb:monix.eval.Callback[A]):Unit", "kind" : "def"}, {"label" : "unsafeStartAsync", "tail" : "(source: Task[A], context: Context, cb: Callback[A]): Unit", "member" : "monix.eval.Task.unsafeStartAsync", "link" : "monix\/eval\/Task$.html#unsafeStartAsync[A](source:monix.eval.Task[A],context:monix.eval.Task.Context,cb:monix.eval.Callback[A]):Unit", "kind" : "def"}, {"label" : "DeprecatedExtensions", "tail" : "", "member" : "monix.eval.Task.DeprecatedExtensions", "link" : "monix\/eval\/Task$.html#DeprecatedExtensions[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "fork", "tail" : "(fa: Task[A], s: Scheduler): Task[A]", "member" : "monix.eval.Task.fork", "link" : "monix\/eval\/Task$.html#fork[A](fa:monix.eval.Task[A],s:monix.execution.Scheduler):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fork", "tail" : "(fa: Task[A]): Task[A]", "member" : "monix.eval.Task.fork", "link" : "monix\/eval\/Task$.html#fork[A](fa:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "Context", "tail" : "", "member" : "monix.eval.Task.Context", "link" : "monix\/eval\/Task$.html#Context", "kind" : "object"}, {"label" : "Context", "tail" : "", "member" : "monix.eval.Task.Context", "link" : "monix\/eval\/Task$.html#ContextextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "FrameIndexRef", "tail" : "", "member" : "monix.eval.Task.FrameIndexRef", "link" : "monix\/eval\/Task$.html#FrameIndexRef", "kind" : "object"}, {"label" : "FrameIndexRef", "tail" : "", "member" : "monix.eval.Task.FrameIndexRef", "link" : "monix\/eval\/Task$.html#FrameIndexRefextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "defaultOptions", "tail" : ": Options", "member" : "monix.eval.Task.defaultOptions", "link" : "monix\/eval\/Task$.html#defaultOptions:monix.eval.Task.Options", "kind" : "val"}, {"label" : "Options", "tail" : "", "member" : "monix.eval.Task.Options", "link" : "monix\/eval\/Task$.html#OptionsextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "FrameIndex", "tail" : "", "member" : "monix.eval.Task.FrameIndex", "link" : "monix\/eval\/Task$.html#FrameIndex=Int", "kind" : "type"}, {"label" : "zip6", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5], fa6: Task[A6]): Task[(A1, A2, A3, A4, A5, A6)]", "member" : "monix.eval.Task.zip6", "link" : "monix\/eval\/Task$.html#zip6[A1,A2,A3,A4,A5,A6](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5],fa6:monix.eval.Task[A6]):monix.eval.Task[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "zip5", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5]): Task[(A1, A2, A3, A4, A5)]", "member" : "monix.eval.Task.zip5", "link" : "monix\/eval\/Task$.html#zip5[A1,A2,A3,A4,A5](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5]):monix.eval.Task[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "zip4", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4]): Task[(A1, A2, A3, A4)]", "member" : "monix.eval.Task.zip4", "link" : "monix\/eval\/Task$.html#zip4[A1,A2,A3,A4](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4]):monix.eval.Task[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "zip3", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3]): Task[(A1, A2, A3)]", "member" : "monix.eval.Task.zip3", "link" : "monix\/eval\/Task$.html#zip3[A1,A2,A3](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3]):monix.eval.Task[(A1,A2,A3)]", "kind" : "def"}, {"label" : "zip2", "tail" : "(fa1: Task[A1], fa2: Task[A2]): Task[(A1, A2)]", "member" : "monix.eval.Task.zip2", "link" : "monix\/eval\/Task$.html#zip2[A1,A2,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2]):monix.eval.Task[(A1,A2)]", "kind" : "def"}, {"label" : "parMap6", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5], fa6: Task[A6])(f: (A1, A2, A3, A4, A5, A6) ⇒ R): Task[R]", "member" : "monix.eval.Task.parMap6", "link" : "monix\/eval\/Task$.html#parMap6[A1,A2,A3,A4,A5,A6,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5],fa6:monix.eval.Task[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "parMap5", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5])(f: (A1, A2, A3, A4, A5) ⇒ R): Task[R]", "member" : "monix.eval.Task.parMap5", "link" : "monix\/eval\/Task$.html#parMap5[A1,A2,A3,A4,A5,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "parMap4", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4])(f: (A1, A2, A3, A4) ⇒ R): Task[R]", "member" : "monix.eval.Task.parMap4", "link" : "monix\/eval\/Task$.html#parMap4[A1,A2,A3,A4,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4])(f:(A1,A2,A3,A4)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "parMap3", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3])(f: (A1, A2, A3) ⇒ R): Task[R]", "member" : "monix.eval.Task.parMap3", "link" : "monix\/eval\/Task$.html#parMap3[A1,A2,A3,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3])(f:(A1,A2,A3)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "parMap2", "tail" : "(fa1: Task[A1], fa2: Task[A2])(f: (A1, A2) ⇒ R): Task[R]", "member" : "monix.eval.Task.parMap2", "link" : "monix\/eval\/Task$.html#parMap2[A1,A2,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2])(f:(A1,A2)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "map6", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5], fa6: Task[A6])(f: (A1, A2, A3, A4, A5, A6) ⇒ R): Task[R]", "member" : "monix.eval.Task.map6", "link" : "monix\/eval\/Task$.html#map6[A1,A2,A3,A4,A5,A6,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5],fa6:monix.eval.Task[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "map5", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5])(f: (A1, A2, A3, A4, A5) ⇒ R): Task[R]", "member" : "monix.eval.Task.map5", "link" : "monix\/eval\/Task$.html#map5[A1,A2,A3,A4,A5,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "map4", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4])(f: (A1, A2, A3, A4) ⇒ R): Task[R]", "member" : "monix.eval.Task.map4", "link" : "monix\/eval\/Task$.html#map4[A1,A2,A3,A4,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4])(f:(A1,A2,A3,A4)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "map3", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3])(f: (A1, A2, A3) ⇒ R): Task[R]", "member" : "monix.eval.Task.map3", "link" : "monix\/eval\/Task$.html#map3[A1,A2,A3,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3])(f:(A1,A2,A3)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa1: Task[A1], fa2: Task[A2])(f: (A1, A2) ⇒ R): Task[R]", "member" : "monix.eval.Task.map2", "link" : "monix\/eval\/Task$.html#map2[A1,A2,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2])(f:(A1,A2)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "mapBoth", "tail" : "(fa1: Task[A1], fa2: Task[A2])(f: (A1, A2) ⇒ R): Task[R]", "member" : "monix.eval.Task.mapBoth", "link" : "monix\/eval\/Task$.html#mapBoth[A1,A2,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2])(f:(A1,A2)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "wanderUnordered", "tail" : "(in: M[A])(f: (A) ⇒ Task[B]): Task[List[B]]", "member" : "monix.eval.Task.wanderUnordered", "link" : "monix\/eval\/Task$.html#wanderUnordered[A,B,M[X]<:TraversableOnce[X]](in:M[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[List[B]]", "kind" : "def"}, {"label" : "gatherUnordered", "tail" : "(in: TraversableOnce[Task[A]]): Task[List[A]]", "member" : "monix.eval.Task.gatherUnordered", "link" : "monix\/eval\/Task$.html#gatherUnordered[A](in:TraversableOnce[monix.eval.Task[A]]):monix.eval.Task[List[A]]", "kind" : "def"}, {"label" : "wander", "tail" : "(in: M[A])(f: (A) ⇒ Task[B])(cbf: CanBuildFrom[M[A], B, M[B]]): Task[M[B]]", "member" : "monix.eval.Task.wander", "link" : "monix\/eval\/Task$.html#wander[A,B,M[X]<:TraversableOnce[X]](in:M[A])(f:A=>monix.eval.Task[B])(implicitcbf:scala.collection.generic.CanBuildFrom[M[A],B,M[B]]):monix.eval.Task[M[B]]", "kind" : "def"}, {"label" : "gather", "tail" : "(in: M[Task[A]])(cbf: CanBuildFrom[M[Task[A]], A, M[A]]): Task[M[A]]", "member" : "monix.eval.Task.gather", "link" : "monix\/eval\/Task$.html#gather[A,M[X]<:TraversableOnce[X]](in:M[monix.eval.Task[A]])(implicitcbf:scala.collection.generic.CanBuildFrom[M[monix.eval.Task[A]],A,M[A]]):monix.eval.Task[M[A]]", "kind" : "def"}, {"label" : "traverse", "tail" : "(in: M[A])(f: (A) ⇒ Task[B])(cbf: CanBuildFrom[M[A], B, M[B]]): Task[M[B]]", "member" : "monix.eval.Task.traverse", "link" : "monix\/eval\/Task$.html#traverse[A,B,M[X]<:TraversableOnce[X]](in:M[A])(f:A=>monix.eval.Task[B])(implicitcbf:scala.collection.generic.CanBuildFrom[M[A],B,M[B]]):monix.eval.Task[M[B]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(in: M[Task[A]])(cbf: CanBuildFrom[M[Task[A]], A, M[A]]): Task[M[A]]", "member" : "monix.eval.Task.sequence", "link" : "monix\/eval\/Task$.html#sequence[A,M[X]<:TraversableOnce[X]](in:M[monix.eval.Task[A]])(implicitcbf:scala.collection.generic.CanBuildFrom[M[monix.eval.Task[A]],A,M[A]]):monix.eval.Task[M[A]]", "kind" : "def"}, {"label" : "sleep", "tail" : "(timespan: FiniteDuration): Task[Unit]", "member" : "monix.eval.Task.sleep", "link" : "monix\/eval\/Task$.html#sleep(timespan:scala.concurrent.duration.FiniteDuration):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(ec: ExecutionContext): Task[Unit]", "member" : "monix.eval.Task.shift", "link" : "monix\/eval\/Task$.html#shift(ec:scala.concurrent.ExecutionContext):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "shift", "tail" : ": Task[Unit]", "member" : "monix.eval.Task.shift", "link" : "monix\/eval\/Task$.html#shift:monix.eval.Task[Unit]", "kind" : "final val"}, {"label" : "racePair", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[(A, Fiber[B]), (Fiber[A], B)]]", "member" : "monix.eval.Task.racePair", "link" : "monix\/eval\/Task$.html#racePair[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[(A,monix.eval.Fiber[B]),(monix.eval.Fiber[A],B)]]", "kind" : "def"}, {"label" : "raceMany", "tail" : "(tasks: TraversableOnce[Task[A]]): Task[A]", "member" : "monix.eval.Task.raceMany", "link" : "monix\/eval\/Task$.html#raceMany[A](tasks:TraversableOnce[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "race", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[A, B]]", "member" : "monix.eval.Task.race", "link" : "monix\/eval\/Task$.html#race[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[A,B]]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(f: Future[A]): Task[A]", "member" : "monix.eval.Task.fromFuture", "link" : "monix\/eval\/Task$.html#fromFuture[A](f:scala.concurrent.Future[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "unsafeCreate", "tail" : "(register: (Context, Callback[A]) ⇒ Unit): Task[A]", "member" : "monix.eval.Task.unsafeCreate", "link" : "monix\/eval\/Task$.html#unsafeCreate[A](register:(monix.eval.Task.Context,monix.eval.Callback[A])=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "create", "tail" : "(register: (Scheduler, Callback[A]) ⇒ Cancelable): Task[A]", "member" : "monix.eval.Task.create", "link" : "monix\/eval\/Task$.html#create[A](register:(monix.execution.Scheduler,monix.eval.Callback[A])=>monix.execution.Cancelable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: (Scheduler, Callback[A]) ⇒ Cancelable): Task[A]", "member" : "monix.eval.Task.async", "link" : "monix\/eval\/Task$.html#async[A](register:(monix.execution.Scheduler,monix.eval.Callback[A])=>monix.execution.Cancelable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "coeval", "tail" : "(a: Coeval[A]): Task[A]", "member" : "monix.eval.Task.coeval", "link" : "monix\/eval\/Task$.html#coeval[A](a:monix.eval.Coeval[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.Task.unit", "link" : "monix\/eval\/Task$.html#unit:monix.eval.Task[Unit]", "kind" : "final val"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Task[Either[A, B]]): Task[B]", "member" : "monix.eval.Task.tailRecM", "link" : "monix\/eval\/Task$.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(a: Try[A]): Task[A]", "member" : "monix.eval.Task.fromTry", "link" : "monix\/eval\/Task$.html#fromTry[A](a:scala.util.Try[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fromEval", "tail" : "(a: cats.Eval[A]): Task[A]", "member" : "monix.eval.Task.fromEval", "link" : "monix\/eval\/Task$.html#fromEval[A](a:cats.Eval[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(fa: F[A])(F: Effect[F]): Task[A]", "member" : "monix.eval.Task.fromEffect", "link" : "monix\/eval\/Task$.html#fromEffect[F[_],A](fa:F[A])(implicitF:cats.effect.Effect[F]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fromIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "monix.eval.Task.fromIO", "link" : "monix\/eval\/Task$.html#fromIO[A](ioa:cats.effect.IO[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "never", "tail" : "(): Task[A]", "member" : "monix.eval.Task.never", "link" : "monix\/eval\/Task$.html#never[A]:monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(a: ⇒ A): Task[A]", "member" : "monix.eval.Task.delay", "link" : "monix\/eval\/Task$.html#delay[A](a:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: ⇒ A): Task[A]", "member" : "monix.eval.Task.eval", "link" : "monix\/eval\/Task$.html#eval[A](a:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "evalOnce", "tail" : "(a: ⇒ A): Task[A]", "member" : "monix.eval.Task.evalOnce", "link" : "monix\/eval\/Task$.html#evalOnce[A](a:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: ⇒ Task[A]): Task[A]", "member" : "monix.eval.Task.suspend", "link" : "monix\/eval\/Task$.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "deferFutureAction", "tail" : "(f: (Scheduler) ⇒ Future[A]): Task[A]", "member" : "monix.eval.Task.deferFutureAction", "link" : "monix\/eval\/Task$.html#deferFutureAction[A](f:monix.execution.Scheduler=>scala.concurrent.Future[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "deferFuture", "tail" : "(fa: ⇒ Future[A]): Task[A]", "member" : "monix.eval.Task.deferFuture", "link" : "monix\/eval\/Task$.html#deferFuture[A](fa:=>scala.concurrent.Future[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "deferAction", "tail" : "(f: (Scheduler) ⇒ Task[A]): Task[A]", "member" : "monix.eval.Task.deferAction", "link" : "monix\/eval\/Task$.html#deferAction[A](f:monix.execution.Scheduler=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: ⇒ Task[A]): Task[A]", "member" : "monix.eval.Task.defer", "link" : "monix\/eval\/Task$.html#defer[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Task[A]", "member" : "monix.eval.Task.raiseError", "link" : "monix\/eval\/Task$.html#raiseError[A](ex:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.Task.pure", "link" : "monix\/eval\/Task$.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): Task[A]", "member" : "monix.eval.Task.now", "link" : "monix\/eval\/Task$.html#now[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(f: ⇒ A): Task[A]", "member" : "monix.eval.Task.apply", "link" : "monix\/eval\/Task$.html#apply[A](f:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catsMonoid", "tail" : "(A: Monoid[A]): Monoid[Task[A]]", "member" : "monix.eval.TaskInstancesLevel1.catsMonoid", "link" : "monix\/eval\/Task$.html#catsMonoid[A](implicitA:cats.Monoid[A]):cats.Monoid[monix.eval.Task[A]]", "kind" : "implicit def"}, {"label" : "catsParallel", "tail" : "(): CatsParallelForTask", "member" : "monix.eval.TaskInstancesLevel1.catsParallel", "link" : "monix\/eval\/Task$.html#catsParallel:monix.eval.instances.CatsParallelForTask", "kind" : "implicit def"}, {"label" : "catsAsync", "tail" : "(): CatsConcurrentForTask", "member" : "monix.eval.TaskInstancesLevel1.catsAsync", "link" : "monix\/eval\/Task$.html#catsAsync:monix.eval.instances.CatsConcurrentForTask", "kind" : "implicit def"}, {"label" : "catsSemigroup", "tail" : "(A: Semigroup[A]): Semigroup[Task[A]]", "member" : "monix.eval.TaskInstancesLevel0.catsSemigroup", "link" : "monix\/eval\/Task$.html#catsSemigroup[A](implicitA:cats.Semigroup[A]):cats.Semigroup[monix.eval.Task[A]]", "kind" : "implicit def"}, {"label" : "catsEffect", "tail" : "(s: Scheduler): CatsConcurrentEffectForTask", "member" : "monix.eval.TaskInstancesLevel0.catsEffect", "link" : "monix\/eval\/Task$.html#catsEffect(implicits:monix.execution.Scheduler):monix.eval.instances.CatsConcurrentEffectForTask", "kind" : "implicit def"}, {"label" : "Par", "tail" : "", "member" : "monix.eval.TaskParallelNewtype.Par", "link" : "monix\/eval\/Task$.html#Par[+A]=TaskParallelNewtype.this.Par.Type[A]", "kind" : "type"}, {"label" : "timer", "tail" : "(s: Scheduler): Timer[Task]", "member" : "monix.eval.TaskTimers.timer", "link" : "monix\/eval\/Task$.html#timer(s:monix.execution.Scheduler):cats.effect.Timer[monix.eval.Task]", "kind" : "def"}, {"label" : "timer", "tail" : ": Timer[Task]", "member" : "monix.eval.TaskTimers.timer", "link" : "monix\/eval\/Task$.html#timer:cats.effect.Timer[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Task$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Task$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Task$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Task$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Task$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Task$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Task$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Task$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Task$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/Task$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Task$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Task$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Task$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Task$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Task$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Task$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/Task.html", "kind" : "class"}, {"name" : "monix.eval.TaskApp", "members_trait" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "monix.eval.TaskApp.main", "link" : "monix\/eval\/TaskApp.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "options", "tail" : ": Coeval[Options]", "member" : "monix.eval.TaskApp.options", "link" : "monix\/eval\/TaskApp.html#options:monix.eval.Coeval[monix.eval.Task.Options]", "kind" : "val"}, {"label" : "scheduler", "tail" : ": Coeval[Scheduler]", "member" : "monix.eval.TaskApp.scheduler", "link" : "monix\/eval\/TaskApp.html#scheduler:monix.eval.Coeval[monix.execution.Scheduler]", "kind" : "val"}, {"label" : "runc", "tail" : "(): Task[Unit]", "member" : "monix.eval.TaskApp.runc", "link" : "monix\/eval\/TaskApp.html#runc:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "runl", "tail" : "(args: List[String]): Task[Unit]", "member" : "monix.eval.TaskApp.runl", "link" : "monix\/eval\/TaskApp.html#runl(args:List[String]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "run", "tail" : "(args: Array[String]): Task[Unit]", "member" : "monix.eval.TaskApp.run", "link" : "monix\/eval\/TaskApp.html#run(args:Array[String]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskApp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskApp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskApp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskApp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskApp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskApp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskApp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskApp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskApp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskApp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskApp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskApp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskApp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskApp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskApp.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskApp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskApp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskApp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskApp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Safe App type that runs a Task action.", "trait" : "monix\/eval\/TaskApp.html", "kind" : "trait"}, {"name" : "monix.eval.TaskCircuitBreaker", "shortDescription" : "The TaskCircuitBreaker is used to provide stability and preventcascading failures in distributed systems.", "object" : "monix\/eval\/TaskCircuitBreaker$.html", "members_class" : [{"label" : "doOnOpen", "tail" : "(callback: Task[Unit]): TaskCircuitBreaker", "member" : "monix.eval.TaskCircuitBreaker.doOnOpen", "link" : "monix\/eval\/TaskCircuitBreaker.html#doOnOpen(callback:monix.eval.Task[Unit]):monix.eval.TaskCircuitBreaker", "kind" : "def"}, {"label" : "doOnHalfOpen", "tail" : "(callback: Task[Unit]): TaskCircuitBreaker", "member" : "monix.eval.TaskCircuitBreaker.doOnHalfOpen", "link" : "monix\/eval\/TaskCircuitBreaker.html#doOnHalfOpen(callback:monix.eval.Task[Unit]):monix.eval.TaskCircuitBreaker", "kind" : "def"}, {"label" : "doOnClosed", "tail" : "(callback: Task[Unit]): TaskCircuitBreaker", "member" : "monix.eval.TaskCircuitBreaker.doOnClosed", "link" : "monix\/eval\/TaskCircuitBreaker.html#doOnClosed(callback:monix.eval.Task[Unit]):monix.eval.TaskCircuitBreaker", "kind" : "def"}, {"label" : "doOnRejectedTask", "tail" : "(callback: Task[Unit]): TaskCircuitBreaker", "member" : "monix.eval.TaskCircuitBreaker.doOnRejectedTask", "link" : "monix\/eval\/TaskCircuitBreaker.html#doOnRejectedTask(callback:monix.eval.Task[Unit]):monix.eval.TaskCircuitBreaker", "kind" : "def"}, {"label" : "protect", "tail" : "(task: Task[A]): Task[A]", "member" : "monix.eval.TaskCircuitBreaker.protect", "link" : "monix\/eval\/TaskCircuitBreaker.html#protect[A](task:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "state", "tail" : "(): State", "member" : "monix.eval.TaskCircuitBreaker.state", "link" : "monix\/eval\/TaskCircuitBreaker.html#state:monix.eval.TaskCircuitBreaker.State", "kind" : "def"}, {"label" : "maxResetTimeout", "tail" : ": Duration", "member" : "monix.eval.TaskCircuitBreaker.maxResetTimeout", "link" : "monix\/eval\/TaskCircuitBreaker.html#maxResetTimeout:scala.concurrent.duration.Duration", "kind" : "val"}, {"label" : "exponentialBackoffFactor", "tail" : ": Double", "member" : "monix.eval.TaskCircuitBreaker.exponentialBackoffFactor", "link" : "monix\/eval\/TaskCircuitBreaker.html#exponentialBackoffFactor:Double", "kind" : "val"}, {"label" : "resetTimeout", "tail" : ": FiniteDuration", "member" : "monix.eval.TaskCircuitBreaker.resetTimeout", "link" : "monix\/eval\/TaskCircuitBreaker.html#resetTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "maxFailures", "tail" : ": Int", "member" : "monix.eval.TaskCircuitBreaker.maxFailures", "link" : "monix\/eval\/TaskCircuitBreaker.html#maxFailures:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskCircuitBreaker.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskCircuitBreaker.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskCircuitBreaker.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskCircuitBreaker.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskCircuitBreaker.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskCircuitBreaker.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskCircuitBreaker.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskCircuitBreaker.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskCircuitBreaker.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskCircuitBreaker.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskCircuitBreaker.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskCircuitBreaker.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskCircuitBreaker.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskCircuitBreaker.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskCircuitBreaker.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskCircuitBreaker.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskCircuitBreaker.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskCircuitBreaker.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskCircuitBreaker.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "HalfOpen", "tail" : "", "member" : "monix.eval.TaskCircuitBreaker.HalfOpen", "link" : "monix\/eval\/TaskCircuitBreaker$.html#HalfOpenextendsTaskCircuitBreaker.StatewithProductwithSerializable", "kind" : "final case class"}, {"label" : "Open", "tail" : "", "member" : "monix.eval.TaskCircuitBreaker.Open", "link" : "monix\/eval\/TaskCircuitBreaker$.html#OpenextendsTaskCircuitBreaker.StatewithProductwithSerializable", "kind" : "final case class"}, {"label" : "Closed", "tail" : "", "member" : "monix.eval.TaskCircuitBreaker.Closed", "link" : "monix\/eval\/TaskCircuitBreaker$.html#ClosedextendsTaskCircuitBreaker.StatewithProductwithSerializable", "kind" : "final case class"}, {"label" : "State", "tail" : "", "member" : "monix.eval.TaskCircuitBreaker.State", "link" : "monix\/eval\/TaskCircuitBreaker$.html#StateextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "Timestamp", "tail" : "", "member" : "monix.eval.TaskCircuitBreaker.Timestamp", "link" : "monix\/eval\/TaskCircuitBreaker$.html#Timestamp=Long", "kind" : "type"}, {"label" : "apply", "tail" : "(maxFailures: Int, resetTimeout: FiniteDuration, exponentialBackoffFactor: Double, maxResetTimeout: Duration, onRejected: Task[Unit], onClosed: Task[Unit], onHalfOpen: Task[Unit], onOpen: Task[Unit], padding: PaddingStrategy): Task[TaskCircuitBreaker]", "member" : "monix.eval.TaskCircuitBreaker.apply", "link" : "monix\/eval\/TaskCircuitBreaker$.html#apply(maxFailures:Int,resetTimeout:scala.concurrent.duration.FiniteDuration,exponentialBackoffFactor:Double,maxResetTimeout:scala.concurrent.duration.Duration,onRejected:monix.eval.Task[Unit],onClosed:monix.eval.Task[Unit],onHalfOpen:monix.eval.Task[Unit],onOpen:monix.eval.Task[Unit],padding:monix.execution.atomic.PaddingStrategy):monix.eval.Task[monix.eval.TaskCircuitBreaker]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskCircuitBreaker$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskCircuitBreaker$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskCircuitBreaker$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskCircuitBreaker$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskCircuitBreaker$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskCircuitBreaker$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskCircuitBreaker$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskCircuitBreaker$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskCircuitBreaker$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskCircuitBreaker$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskCircuitBreaker$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskCircuitBreaker$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskCircuitBreaker$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskCircuitBreaker$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskCircuitBreaker$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskCircuitBreaker$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskCircuitBreaker$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskCircuitBreaker$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskCircuitBreaker$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/TaskCircuitBreaker.html", "kind" : "class"}, {"name" : "monix.eval.TaskLocal", "shortDescription" : "A TaskLocal is like aThreadLocalthat is pure and with a flexible scope, being processed in thecontext of the Task data type.", "object" : "monix\/eval\/TaskLocal$.html", "members_class" : [{"label" : "bindClear", "tail" : "(task: Task[R]): Task[R]", "member" : "monix.eval.TaskLocal.bindClear", "link" : "monix\/eval\/TaskLocal.html#bindClear[R](task:monix.eval.Task[R]):monix.eval.Task[R]", "kind" : "def"}, {"label" : "bindL", "tail" : "(value: Task[A])(task: Task[R]): Task[R]", "member" : "monix.eval.TaskLocal.bindL", "link" : "monix\/eval\/TaskLocal.html#bindL[R](value:monix.eval.Task[A])(task:monix.eval.Task[R]):monix.eval.Task[R]", "kind" : "def"}, {"label" : "bind", "tail" : "(value: A)(task: Task[R]): Task[R]", "member" : "monix.eval.TaskLocal.bind", "link" : "monix\/eval\/TaskLocal.html#bind[R](value:A)(task:monix.eval.Task[R]):monix.eval.Task[R]", "kind" : "def"}, {"label" : "clear", "tail" : "(): Task[Unit]", "member" : "monix.eval.TaskLocal.clear", "link" : "monix\/eval\/TaskLocal.html#clear:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "write", "tail" : "(value: A): Task[Unit]", "member" : "monix.eval.TaskLocal.write", "link" : "monix\/eval\/TaskLocal.html#write(value:A):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "read", "tail" : "(): Task[A]", "member" : "monix.eval.TaskLocal.read", "link" : "monix\/eval\/TaskLocal.html#read:monix.eval.Task[A]", "kind" : "def"}, {"label" : "local", "tail" : "(): Task[Local[A]]", "member" : "monix.eval.TaskLocal.local", "link" : "monix\/eval\/TaskLocal.html#local:monix.eval.Task[monix.execution.misc.Local[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskLocal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskLocal.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskLocal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskLocal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskLocal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskLocal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskLocal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskLocal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskLocal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskLocal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskLocal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskLocal.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskLocal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskLocal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskLocal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskLocal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "lazyDefault", "tail" : "(default: Coeval[A]): Task[TaskLocal[A]]", "member" : "monix.eval.TaskLocal.lazyDefault", "link" : "monix\/eval\/TaskLocal$.html#lazyDefault[A](default:monix.eval.Coeval[A]):monix.eval.Task[monix.eval.TaskLocal[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(default: A): Task[TaskLocal[A]]", "member" : "monix.eval.TaskLocal.apply", "link" : "monix\/eval\/TaskLocal$.html#apply[A](default:A):monix.eval.Task[monix.eval.TaskLocal[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskLocal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskLocal$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskLocal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskLocal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskLocal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskLocal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskLocal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskLocal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskLocal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskLocal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskLocal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskLocal$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskLocal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskLocal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskLocal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskLocal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/TaskLocal.html", "kind" : "class"}, {"name" : "monix.eval.TaskSemaphore", "shortDescription" : "The TaskSemaphore is an asynchronous semaphore implementation thatlimits the parallelism on task execution.", "object" : "monix\/eval\/TaskSemaphore$.html", "members_class" : [{"label" : "awaitAllReleased", "tail" : ": Task[Unit]", "member" : "monix.eval.TaskSemaphore.awaitAllReleased", "link" : "monix\/eval\/TaskSemaphore.html#awaitAllReleased:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "release", "tail" : ": Task[Unit]", "member" : "monix.eval.TaskSemaphore.release", "link" : "monix\/eval\/TaskSemaphore.html#release:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "acquire", "tail" : ": Task[Unit]", "member" : "monix.eval.TaskSemaphore.acquire", "link" : "monix\/eval\/TaskSemaphore.html#acquire:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "greenLight", "tail" : "(fa: Task[A]): Task[A]", "member" : "monix.eval.TaskSemaphore.greenLight", "link" : "monix\/eval\/TaskSemaphore.html#greenLight[A](fa:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "activeCount", "tail" : "(): Coeval[Int]", "member" : "monix.eval.TaskSemaphore.activeCount", "link" : "monix\/eval\/TaskSemaphore.html#activeCount:monix.eval.Coeval[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskSemaphore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskSemaphore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskSemaphore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskSemaphore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskSemaphore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskSemaphore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskSemaphore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskSemaphore.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskSemaphore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskSemaphore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskSemaphore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskSemaphore.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskSemaphore.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskSemaphore.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskSemaphore.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskSemaphore.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskSemaphore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskSemaphore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskSemaphore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(maxParallelism: Int): Task[TaskSemaphore]", "member" : "monix.eval.TaskSemaphore.apply", "link" : "monix\/eval\/TaskSemaphore$.html#apply(maxParallelism:Int):monix.eval.Task[monix.eval.TaskSemaphore]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskSemaphore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskSemaphore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskSemaphore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskSemaphore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskSemaphore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskSemaphore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskSemaphore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskSemaphore$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskSemaphore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskSemaphore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskSemaphore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskSemaphore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskSemaphore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskSemaphore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskSemaphore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskSemaphore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskSemaphore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskSemaphore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskSemaphore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/TaskSemaphore.html", "kind" : "class"}], "monix.execution.rstreams" : [{"name" : "monix.execution.rstreams.SingleAssignSubscription", "shortDescription" : "Represents a org.reactivestreams.Subscription that can be assignedonly once to another subscription reference.", "object" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html", "members_class" : [{"label" : "request", "tail" : "(n: Long): Unit", "member" : "monix.execution.rstreams.SingleAssignSubscription.request", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#request(n:Long):Unit", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.rstreams.SingleAssignSubscription.cancel", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#cancel():Unit", "kind" : "def"}, {"label" : "set", "tail" : "(s: org.reactivestreams.Subscription): Unit", "member" : "monix.execution.rstreams.SingleAssignSubscription.set", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#set(s:org.reactivestreams.Subscription):Unit", "kind" : "def"}, {"label" : ":=", "tail" : "(s: org.reactivestreams.Subscription): Unit", "member" : "monix.execution.rstreams.SingleAssignSubscription.:=", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#:=(s:org.reactivestreams.Subscription):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): SingleAssignSubscription", "member" : "monix.execution.rstreams.SingleAssignSubscription.apply", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#apply():monix.execution.rstreams.SingleAssignSubscription", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/rstreams\/SingleAssignSubscription.html", "kind" : "class"}, {"name" : "monix.execution.rstreams.Subscription", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/rstreams\/Subscription.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/rstreams\/Subscription.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/rstreams\/Subscription.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/rstreams\/Subscription.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/rstreams\/Subscription.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/rstreams\/Subscription.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/rstreams\/Subscription.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/rstreams\/Subscription.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/rstreams\/Subscription.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/rstreams\/Subscription.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/rstreams\/Subscription.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/rstreams\/Subscription.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/rstreams\/Subscription.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/rstreams\/Subscription.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/rstreams\/Subscription.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/rstreams\/Subscription.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "request", "tail" : "(n: Long): Unit", "member" : "monix.execution.rstreams.Subscription.request", "link" : "monix\/execution\/rstreams\/Subscription.html#request(n:Long):Unit", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/rstreams\/Subscription.html#cancel():Unit", "kind" : "abstract def"}], "shortDescription" : "The Subscription represents a cross between theMonix Cancelable andorg.reactivestreams.Subcription.", "object" : "monix\/execution\/rstreams\/Subscription$.html", "members_object" : [{"label" : "empty", "tail" : ": Subscription", "member" : "monix.execution.rstreams.Subscription.empty", "link" : "monix\/execution\/rstreams\/Subscription$.html#empty:monix.execution.rstreams.Subscription", "kind" : "val"}, {"label" : "apply", "tail" : "(ref: org.reactivestreams.Subscription): Subscription", "member" : "monix.execution.rstreams.Subscription.apply", "link" : "monix\/execution\/rstreams\/Subscription$.html#apply(ref:org.reactivestreams.Subscription):monix.execution.rstreams.Subscription", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/rstreams\/Subscription$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/rstreams\/Subscription$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/rstreams\/Subscription$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/rstreams\/Subscription$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/rstreams\/Subscription$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/rstreams\/Subscription$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/rstreams\/Subscription$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/rstreams\/Subscription$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/rstreams\/Subscription$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/rstreams\/Subscription$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/rstreams\/Subscription$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/rstreams\/Subscription$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/rstreams\/Subscription$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/rstreams\/Subscription$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/rstreams\/Subscription$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/rstreams\/Subscription$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/rstreams\/Subscription.html", "kind" : "trait"}], "monix.execution.schedulers" : [{"name" : "monix.execution.schedulers.AsyncScheduler", "shortDescription" : "An AsyncScheduler schedules tasks to happen in the future with thegiven ScheduledExecutorService and the tasks themselves are executed onthe given ExecutionContext.", "object" : "monix\/execution\/schedulers\/AsyncScheduler$.html", "members_class" : [{"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): AsyncScheduler", "member" : "monix.execution.schedulers.AsyncScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.AsyncScheduler", "kind" : "def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.AsyncScheduler.reportFailure", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.AsyncScheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#scheduleOnce(initialDelay:Long,unit:java.util.concurrent.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "executeAsync", "tail" : "(r: Runnable): Unit", "member" : "monix.execution.schedulers.AsyncScheduler.executeAsync", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#executeAsync(r:Runnable):Unit", "kind" : "def"}, {"label" : "executionModel", "tail" : ": ExecutionModel", "member" : "monix.execution.schedulers.AsyncScheduler.executionModel", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "val"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(schedulerService: ScheduledExecutorService, ec: ExecutionContext, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): AsyncScheduler", "member" : "monix.execution.schedulers.AsyncScheduler.apply", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#apply(schedulerService:java.util.concurrent.ScheduledExecutorService,ec:scala.concurrent.ExecutionContext,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.AsyncScheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/AsyncScheduler.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.BatchingScheduler", "members_trait" : [{"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(r: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.executeAsync", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#executeAsync(r:Runnable):Unit", "kind" : "abstract def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): Scheduler", "member" : "monix.execution.Scheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "abstract def"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.Scheduler.executionModel", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "abstract def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.Scheduler.reportFailure", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "abstract def"}], "shortDescription" : "Adds trampoline execution capabilities toschedulers, wheninherited.", "trait" : "monix\/execution\/schedulers\/BatchingScheduler.html", "kind" : "trait"}, {"name" : "monix.execution.schedulers.CanBlock", "shortDescription" : "Marker for blocking operations that need to be disallowed on top ofJavaScript engines, or other platforms that don't support the blockingof threads.", "object" : "monix\/execution\/schedulers\/CanBlock$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/CanBlock.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/CanBlock.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/CanBlock.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/CanBlock.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/CanBlock.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/CanBlock.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/CanBlock.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/CanBlock.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/CanBlock.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/CanBlock.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/CanBlock.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/CanBlock.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/CanBlock.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/CanBlock.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/CanBlock.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/CanBlock.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "permit", "tail" : ": CanBlock", "member" : "monix.execution.schedulers.CanBlock.permit", "link" : "monix\/execution\/schedulers\/CanBlock$.html#permit:monix.execution.schedulers.CanBlock", "kind" : "implicit final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/CanBlock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/CanBlock$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/CanBlock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/CanBlock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/CanBlock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/CanBlock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/CanBlock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/CanBlock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/CanBlock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/CanBlock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/CanBlock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/CanBlock$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/CanBlock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/CanBlock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/CanBlock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/CanBlock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/CanBlock.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.ExecutorScheduler", "shortDescription" : "An ExecutorScheduler is a class for building aSchedulerServiceout of a Java ExecutorService.", "object" : "monix\/execution\/schedulers\/ExecutorScheduler$.html", "members_class" : [{"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.ExecutorScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "awaitTermination", "tail" : "(timeout: Long, unit: TimeUnit, awaitOn: ExecutionContext): Future[Boolean]", "member" : "monix.execution.schedulers.ExecutorScheduler.awaitTermination", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#awaitTermination(timeout:Long,unit:concurrent.duration.TimeUnit,awaitOn:scala.concurrent.ExecutionContext):scala.concurrent.Future[Boolean]", "kind" : "final def"}, {"label" : "shutdown", "tail" : "(): Unit", "member" : "monix.execution.schedulers.ExecutorScheduler.shutdown", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#shutdown():Unit", "kind" : "final def"}, {"label" : "isTerminated", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.ExecutorScheduler.isTerminated", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#isTerminated:Boolean", "kind" : "final def"}, {"label" : "isShutdown", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.ExecutorScheduler.isShutdown", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#isShutdown:Boolean", "kind" : "final def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.ExecutorScheduler.reportFailure", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(r: Runnable): Unit", "member" : "monix.execution.schedulers.ExecutorScheduler.executeAsync", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#executeAsync(r:Runnable):Unit", "kind" : "final def"}, {"label" : "executor", "tail" : "(): ExecutorService", "member" : "monix.execution.schedulers.ExecutorScheduler.executor", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#executor:java.util.concurrent.ExecutorService", "kind" : "def"}, {"member" : "monix.execution.schedulers.ExecutorScheduler#<init>", "error" : "unsupported entity"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.Scheduler.executionModel", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "abstract def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "forkJoinDynamic", "tail" : "(name: String, parallelism: Int, maxThreads: Int, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): ExecutorScheduler", "member" : "monix.execution.schedulers.ExecutorScheduler.forkJoinDynamic", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#forkJoinDynamic(name:String,parallelism:Int,maxThreads:Int,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.ExecutorScheduler", "kind" : "def"}, {"label" : "forkJoinStatic", "tail" : "(name: String, parallelism: Int, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): ExecutorScheduler", "member" : "monix.execution.schedulers.ExecutorScheduler.forkJoinStatic", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#forkJoinStatic(name:String,parallelism:Int,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.ExecutorScheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(service: ExecutorService, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): ExecutorScheduler", "member" : "monix.execution.schedulers.ExecutorScheduler.apply", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#apply(service:java.util.concurrent.ExecutorService,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.ExecutorScheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/ExecutorScheduler.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.ReferenceScheduler", "members_trait" : [{"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.ReferenceScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.Scheduler.executionModel", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "abstract def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.Scheduler.reportFailure", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "abstract def"}, {"label" : "execute", "tail" : "(command: Runnable): Unit", "member" : "monix.execution.Scheduler.execute", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#execute(command:Runnable):Unit", "kind" : "abstract def"}], "shortDescription" : "Helper for building a Scheduler.", "object" : "monix\/execution\/schedulers\/ReferenceScheduler$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/schedulers\/ReferenceScheduler.html", "kind" : "trait"}, {"name" : "monix.execution.schedulers.SchedulerService", "members_trait" : [{"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/SchedulerService.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/SchedulerService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/SchedulerService.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/SchedulerService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/SchedulerService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/SchedulerService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/SchedulerService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/SchedulerService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/SchedulerService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/SchedulerService.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/SchedulerService.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/SchedulerService.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/SchedulerService.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/SchedulerService.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/SchedulerService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/SchedulerService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/SchedulerService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerService.withExecutionModel", "link" : "monix\/execution\/schedulers\/SchedulerService.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "abstract def"}, {"label" : "awaitTermination", "tail" : "(timeout: Long, unit: TimeUnit, awaitOn: ExecutionContext): Future[Boolean]", "member" : "monix.execution.schedulers.SchedulerService.awaitTermination", "link" : "monix\/execution\/schedulers\/SchedulerService.html#awaitTermination(timeout:Long,unit:concurrent.duration.TimeUnit,awaitOn:scala.concurrent.ExecutionContext):scala.concurrent.Future[Boolean]", "kind" : "abstract def"}, {"label" : "shutdown", "tail" : "(): Unit", "member" : "monix.execution.schedulers.SchedulerService.shutdown", "link" : "monix\/execution\/schedulers\/SchedulerService.html#shutdown():Unit", "kind" : "abstract def"}, {"label" : "isTerminated", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.SchedulerService.isTerminated", "link" : "monix\/execution\/schedulers\/SchedulerService.html#isTerminated:Boolean", "kind" : "abstract def"}, {"label" : "isShutdown", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.SchedulerService.isShutdown", "link" : "monix\/execution\/schedulers\/SchedulerService.html#isShutdown:Boolean", "kind" : "abstract def"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.Scheduler.executionModel", "link" : "monix\/execution\/schedulers\/SchedulerService.html#executionModel:monix.execution.ExecutionModel", "kind" : "abstract def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/SchedulerService.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/SchedulerService.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/SchedulerService.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/SchedulerService.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/SchedulerService.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.Scheduler.reportFailure", "link" : "monix\/execution\/schedulers\/SchedulerService.html#reportFailure(t:Throwable):Unit", "kind" : "abstract def"}, {"label" : "execute", "tail" : "(command: Runnable): Unit", "member" : "monix.execution.Scheduler.execute", "link" : "monix\/execution\/schedulers\/SchedulerService.html#execute(command:Runnable):Unit", "kind" : "abstract def"}], "shortDescription" : "A Scheduler type that providesmethods for managing termination.", "object" : "monix\/execution\/schedulers\/SchedulerService$.html", "members_object" : [{"label" : "Extensions", "tail" : "", "member" : "monix.execution.schedulers.SchedulerService.Extensions", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#ExtensionsextendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/SchedulerService$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/schedulers\/SchedulerService.html", "kind" : "trait"}, {"name" : "monix.execution.schedulers.ShiftedRunnable", "shortDescription" : "Runnable that defers the execution of the given referencewith an executeAsync.", "members_class" : [{"label" : "run", "tail" : "(): Unit", "member" : "monix.execution.schedulers.ShiftedRunnable.run", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#run():Unit", "kind" : "def"}, {"member" : "monix.execution.schedulers.ShiftedRunnable#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/ShiftedRunnable.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.StartAsyncBatchRunnable", "shortDescription" : "Forces a real asynchronous boundary before executing thegiven TrampolinedRunnable.", "members_case class" : [{"label" : "run", "tail" : "(): Unit", "member" : "monix.execution.schedulers.StartAsyncBatchRunnable.run", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#run():Unit", "kind" : "def"}, {"member" : "monix.execution.schedulers.StartAsyncBatchRunnable#<init>", "error" : "unsupported entity"}, {"label" : "s", "tail" : ": Scheduler", "member" : "monix.execution.schedulers.StartAsyncBatchRunnable.s", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#s:monix.execution.Scheduler", "kind" : "val"}, {"label" : "start", "tail" : ": TrampolinedRunnable", "member" : "monix.execution.schedulers.StartAsyncBatchRunnable.start", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#start:monix.execution.schedulers.TrampolinedRunnable", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html", "kind" : "case class"}, {"name" : "monix.execution.schedulers.TestScheduler", "shortDescription" : "Scheduler and a provider of cats.effect.Timer instances,that can simulate async boundaries and time passage, useful fortesting purposes.", "object" : "monix\/execution\/schedulers\/TestScheduler$.html", "members_class" : [{"label" : "tick", "tail" : "(time: FiniteDuration): Unit", "member" : "monix.execution.schedulers.TestScheduler.tick", "link" : "monix\/execution\/schedulers\/TestScheduler.html#tick(time:scala.concurrent.duration.FiniteDuration):Unit", "kind" : "def"}, {"label" : "tickOne", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.TestScheduler.tickOne", "link" : "monix\/execution\/schedulers\/TestScheduler.html#tickOne():Boolean", "kind" : "def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): TestScheduler", "member" : "monix.execution.schedulers.TestScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/TestScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.TestScheduler", "kind" : "def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.TestScheduler.reportFailure", "link" : "monix\/execution\/schedulers\/TestScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "def"}, {"label" : "executeAsync", "tail" : "(r: Runnable): Unit", "member" : "monix.execution.schedulers.TestScheduler.executeAsync", "link" : "monix\/execution\/schedulers\/TestScheduler.html#executeAsync(r:Runnable):Unit", "kind" : "def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TestScheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/TestScheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TestScheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/TestScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TestScheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/TestScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "state", "tail" : "(): State", "member" : "monix.execution.schedulers.TestScheduler.state", "link" : "monix\/execution\/schedulers\/TestScheduler.html#state:monix.execution.schedulers.TestScheduler.State", "kind" : "def"}, {"label" : "executionModel", "tail" : ": ExecutionModel", "member" : "monix.execution.schedulers.TestScheduler.executionModel", "link" : "monix\/execution\/schedulers\/TestScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "val"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/TestScheduler.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TestScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TestScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/TestScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TestScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TestScheduler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TestScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TestScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TestScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TestScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TestScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TestScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TestScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TestScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TestScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TestScheduler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TestScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TestScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TestScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TestScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "State", "tail" : "", "member" : "monix.execution.schedulers.TestScheduler.State", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#StateextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "Task", "tail" : "", "member" : "monix.execution.schedulers.TestScheduler.Task", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#Task", "kind" : "object"}, {"label" : "Task", "tail" : "", "member" : "monix.execution.schedulers.TestScheduler.Task", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#TaskextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "apply", "tail" : "(executionModel: ExecutionModel): TestScheduler", "member" : "monix.execution.schedulers.TestScheduler.apply", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#apply(executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.TestScheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(): TestScheduler", "member" : "monix.execution.schedulers.TestScheduler.apply", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#apply():monix.execution.schedulers.TestScheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TestScheduler$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TestScheduler.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.TracingRunnable", "shortDescription" : "Wraps a Runnable into one that restores the givenLocal.Contextupon execution of run().", "members_class" : [{"label" : "run", "tail" : "(): Unit", "member" : "monix.execution.schedulers.TracingRunnable.run", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#run():Unit", "kind" : "def"}, {"member" : "monix.execution.schedulers.TracingRunnable#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TracingRunnable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TracingRunnable.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.TracingScheduler", "shortDescription" : "The TracingScheduler is a Schedulerimplementation that wraps another Scheduler reference, butthat propagates the Local.Contexton async execution.", "object" : "monix\/execution\/schedulers\/TracingScheduler$.html", "members_class" : [{"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): TracingScheduler", "member" : "monix.execution.schedulers.TracingScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.TracingScheduler", "kind" : "def"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.schedulers.TracingScheduler.Base.executionModel", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "final def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TracingScheduler.Base.clockMonotonic", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TracingScheduler.Base.clockRealTime", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "final def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.TracingScheduler.Base.reportFailure", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleOnce", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(r: Runnable): Unit", "member" : "monix.execution.schedulers.TracingScheduler.Base.executeAsync", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#executeAsync(r:Runnable):Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TracingScheduler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(underlying: Scheduler): TracingScheduler", "member" : "monix.execution.schedulers.TracingScheduler.apply", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#apply(underlying:monix.execution.Scheduler):monix.execution.schedulers.TracingScheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TracingScheduler.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.TracingSchedulerService", "shortDescription" : "The TracingScheduler is a Schedulerimplementation that wraps anotherSchedulerServicereference, with the purpose of propagating theLocal.Context on asyncexecution.", "object" : "monix\/execution\/schedulers\/TracingSchedulerService$.html", "members_class" : [{"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): TracingSchedulerService", "member" : "monix.execution.schedulers.TracingSchedulerService.withExecutionModel", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.TracingSchedulerService", "kind" : "def"}, {"label" : "awaitTermination", "tail" : "(timeout: Long, unit: TimeUnit, awaitOn: ExecutionContext): Future[Boolean]", "member" : "monix.execution.schedulers.TracingSchedulerService.awaitTermination", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#awaitTermination(timeout:Long,unit:concurrent.duration.TimeUnit,awaitOn:scala.concurrent.ExecutionContext):scala.concurrent.Future[Boolean]", "kind" : "def"}, {"label" : "shutdown", "tail" : "(): Unit", "member" : "monix.execution.schedulers.TracingSchedulerService.shutdown", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#shutdown():Unit", "kind" : "def"}, {"label" : "isTerminated", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.TracingSchedulerService.isTerminated", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#isTerminated:Boolean", "kind" : "def"}, {"label" : "isShutdown", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.TracingSchedulerService.isShutdown", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#isShutdown:Boolean", "kind" : "def"}, {"member" : "monix.execution.schedulers.TracingSchedulerService#<init>", "error" : "unsupported entity"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.schedulers.TracingScheduler.Base.executionModel", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#executionModel:monix.execution.ExecutionModel", "kind" : "final def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TracingScheduler.Base.clockMonotonic", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TracingScheduler.Base.clockRealTime", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "final def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.TracingScheduler.Base.reportFailure", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#reportFailure(t:Throwable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleOnce", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(r: Runnable): Unit", "member" : "monix.execution.schedulers.TracingScheduler.Base.executeAsync", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#executeAsync(r:Runnable):Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(underlying: SchedulerService): TracingSchedulerService", "member" : "monix.execution.schedulers.TracingSchedulerService.apply", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#apply(underlying:monix.execution.schedulers.SchedulerService):monix.execution.schedulers.TracingSchedulerService", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TracingSchedulerService.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.TrampolinedRunnable", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(): Unit", "member" : "java.lang.Runnable.run", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#run():Unit", "kind" : "abstract def"}], "shortDescription" : "A marker for callbacks that can be batched and executedlocally (on the current thread) by means of a trampoline(if the execution context \/ scheduler allows it).", "trait" : "monix\/execution\/schedulers\/TrampolinedRunnable.html", "kind" : "trait"}, {"name" : "monix.execution.schedulers.TrampolineExecutionContext", "shortDescription" : "A scala.concurrentExecutionContext implementationthat executes runnables immediately, on the current thread,by means of a trampoline implementation.", "object" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html", "members_class" : [{"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.TrampolineExecutionContext.reportFailure", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#reportFailure(t:Throwable):Unit", "kind" : "def"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.TrampolineExecutionContext.execute", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#execute(runnable:Runnable):Unit", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "immediate", "tail" : ": TrampolineExecutionContext", "member" : "monix.execution.schedulers.TrampolineExecutionContext.immediate", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#immediate:monix.execution.schedulers.TrampolineExecutionContext", "kind" : "val"}, {"label" : "apply", "tail" : "(underlying: ExecutionContext): TrampolineExecutionContext", "member" : "monix.execution.schedulers.TrampolineExecutionContext.apply", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#apply(underlying:scala.concurrent.ExecutionContext):monix.execution.schedulers.TrampolineExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.TrampolineScheduler", "shortDescription" : "A Scheduler implementationthat executes runnables immediately, on the current thread,by means of a trampoline implementation.", "object" : "monix\/execution\/schedulers\/TrampolineScheduler$.html", "members_class" : [{"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): TrampolineScheduler", "member" : "monix.execution.schedulers.TrampolineScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.TrampolineScheduler", "kind" : "def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TrampolineScheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#clockMonotonic(unit:java.util.concurrent.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TrampolineScheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#clockRealTime(unit:java.util.concurrent.TimeUnit):Long", "kind" : "def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TrampolineScheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:java.util.concurrent.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TrampolineScheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:java.util.concurrent.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TrampolineScheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#scheduleOnce(initialDelay:Long,unit:java.util.concurrent.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.TrampolineScheduler.reportFailure", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "def"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.TrampolineScheduler.execute", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#execute(runnable:Runnable):Unit", "kind" : "def"}, {"member" : "monix.execution.schedulers.TrampolineScheduler#<init>", "error" : "unsupported entity"}, {"label" : "executionModel", "tail" : ": ExecutionModel", "member" : "monix.execution.schedulers.TrampolineScheduler.executionModel", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "val"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(underlying: Scheduler, em: ExecutionModel): TrampolineScheduler", "member" : "monix.execution.schedulers.TrampolineScheduler.apply", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#apply(underlying:monix.execution.Scheduler,em:monix.execution.ExecutionModel):monix.execution.schedulers.TrampolineScheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TrampolineScheduler.html", "kind" : "class"}], "monix.reactive.observables" : [{"name" : "monix.reactive.observables.CachedObservable", "shortDescription" : "A CachedObservable is an observable that wraps a regularObservable, initiating the connection on the firstsubscribe() and then staying connected for as long asthe source is emitting.", "object" : "monix\/reactive\/observables\/CachedObservable$.html", "members_class" : [{"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.observables.CachedObservable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/CachedObservable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/observables\/CachedObservable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (A) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/observables\/CachedObservable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/observables\/CachedObservable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/observables\/CachedObservable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/observables\/CachedObservable.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/observables\/CachedObservable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/observables\/CachedObservable.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/observables\/CachedObservable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/observables\/CachedObservable.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/observables\/CachedObservable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/observables\/CachedObservable.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/observables\/CachedObservable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/observables\/CachedObservable.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/observables\/CachedObservable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/observables\/CachedObservable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/observables\/CachedObservable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/observables\/CachedObservable.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/observables\/CachedObservable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/observables\/CachedObservable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/observables\/CachedObservable.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/observables\/CachedObservable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/observables\/CachedObservable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/observables\/CachedObservable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/observables\/CachedObservable.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/observables\/CachedObservable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/observables\/CachedObservable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/observables\/CachedObservable.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/observables\/CachedObservable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/observables\/CachedObservable.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/observables\/CachedObservable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/observables\/CachedObservable.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/observables\/CachedObservable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/observables\/CachedObservable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/observables\/CachedObservable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/observables\/CachedObservable.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/observables\/CachedObservable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/observables\/CachedObservable.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/observables\/CachedObservable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/observables\/CachedObservable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/observables\/CachedObservable.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/observables\/CachedObservable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/observables\/CachedObservable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/observables\/CachedObservable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/observables\/CachedObservable.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/observables\/CachedObservable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/observables\/CachedObservable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/observables\/CachedObservable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/CachedObservable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/CachedObservable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/observables\/CachedObservable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/CachedObservable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/CachedObservable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/observables\/CachedObservable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/observables\/CachedObservable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/observables\/CachedObservable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/observables\/CachedObservable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/CachedObservable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/CachedObservable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/observables\/CachedObservable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/observables\/CachedObservable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/observables\/CachedObservable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/observables\/CachedObservable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/observables\/CachedObservable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/observables\/CachedObservable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/observables\/CachedObservable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/observables\/CachedObservable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/observables\/CachedObservable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/observables\/CachedObservable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/observables\/CachedObservable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/observables\/CachedObservable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/observables\/CachedObservable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/observables\/CachedObservable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/observables\/CachedObservable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/CachedObservable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/observables\/CachedObservable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/observables\/CachedObservable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, A) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/observables\/CachedObservable.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/observables\/CachedObservable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/observables\/CachedObservable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/observables\/CachedObservable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/observables\/CachedObservable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/observables\/CachedObservable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/observables\/CachedObservable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/observables\/CachedObservable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/observables\/CachedObservable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/observables\/CachedObservable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/observables\/CachedObservable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/CachedObservable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/CachedObservable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/observables\/CachedObservable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/observables\/CachedObservable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/observables\/CachedObservable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/observables\/CachedObservable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/observables\/CachedObservable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/observables\/CachedObservable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (A) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/observables\/CachedObservable.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/observables\/CachedObservable.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/observables\/CachedObservable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/observables\/CachedObservable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/observables\/CachedObservable.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/observables\/CachedObservable.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/observables\/CachedObservable.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/observables\/CachedObservable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/observables\/CachedObservable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/observables\/CachedObservable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/observables\/CachedObservable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/observables\/CachedObservable.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/observables\/CachedObservable.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/observables\/CachedObservable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/observables\/CachedObservable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/observables\/CachedObservable.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/observables\/CachedObservable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/observables\/CachedObservable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/observables\/CachedObservable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/observables\/CachedObservable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/observables\/CachedObservable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/observables\/CachedObservable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/observables\/CachedObservable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/observables\/CachedObservable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (A, Ack) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (A, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (A) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/observables\/CachedObservable.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/observables\/CachedObservable.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/observables\/CachedObservable.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/observables\/CachedObservable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/observables\/CachedObservable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/observables\/CachedObservable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) ⇒ Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/observables\/CachedObservable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/observables\/CachedObservable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/observables\/CachedObservable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/observables\/CachedObservable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/observables\/CachedObservable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/observables\/CachedObservable.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/observables\/CachedObservable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/observables\/CachedObservable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/observables\/CachedObservable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/observables\/CachedObservable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/observables\/CachedObservable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/observables\/CachedObservable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/observables\/CachedObservable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/CachedObservable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/CachedObservable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/CachedObservable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/CachedObservable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/CachedObservable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/CachedObservable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/CachedObservable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/CachedObservable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/CachedObservable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/CachedObservable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/CachedObservable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/CachedObservable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/CachedObservable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/CachedObservable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/CachedObservable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/CachedObservable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/CachedObservable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "create", "tail" : "(observable: Observable[A], maxCapacity: Int): Observable[A]", "member" : "monix.reactive.observables.CachedObservable.create", "link" : "monix\/reactive\/observables\/CachedObservable$.html#create[A](observable:monix.reactive.Observable[A],maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "create", "tail" : "(observable: Observable[A]): Observable[A]", "member" : "monix.reactive.observables.CachedObservable.create", "link" : "monix\/reactive\/observables\/CachedObservable$.html#create[A](observable:monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/CachedObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/CachedObservable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/CachedObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/CachedObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/CachedObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/CachedObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/CachedObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/CachedObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/CachedObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/CachedObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/CachedObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/CachedObservable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/CachedObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/CachedObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/CachedObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/CachedObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observables\/CachedObservable.html", "kind" : "class"}, {"name" : "monix.reactive.observables.ChainedObservable", "shortDescription" : "A StackedObservable is an Observable type used in operators thatend up being used in loops and that need to be memory safe(e.g.", "object" : "monix\/reactive\/observables\/ChainedObservable$.html", "members_class" : [{"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.observables.ChainedObservable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"member" : "monix.reactive.observables.ChainedObservable#<init>", "error" : "unsupported entity"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (A) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/observables\/ChainedObservable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/observables\/ChainedObservable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/observables\/ChainedObservable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/observables\/ChainedObservable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/ChainedObservable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/ChainedObservable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/observables\/ChainedObservable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/ChainedObservable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/ChainedObservable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/observables\/ChainedObservable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/observables\/ChainedObservable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/observables\/ChainedObservable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/ChainedObservable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/ChainedObservable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/observables\/ChainedObservable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/observables\/ChainedObservable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/observables\/ChainedObservable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/observables\/ChainedObservable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/observables\/ChainedObservable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/observables\/ChainedObservable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/observables\/ChainedObservable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/observables\/ChainedObservable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/observables\/ChainedObservable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/observables\/ChainedObservable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/observables\/ChainedObservable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/observables\/ChainedObservable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/ChainedObservable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/observables\/ChainedObservable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/observables\/ChainedObservable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, A) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/observables\/ChainedObservable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/observables\/ChainedObservable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/observables\/ChainedObservable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/observables\/ChainedObservable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/observables\/ChainedObservable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/observables\/ChainedObservable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/observables\/ChainedObservable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/observables\/ChainedObservable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/observables\/ChainedObservable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/observables\/ChainedObservable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (A) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/observables\/ChainedObservable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/observables\/ChainedObservable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/observables\/ChainedObservable.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/observables\/ChainedObservable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/observables\/ChainedObservable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/observables\/ChainedObservable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/observables\/ChainedObservable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/observables\/ChainedObservable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/observables\/ChainedObservable.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/observables\/ChainedObservable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/observables\/ChainedObservable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (A, Ack) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (A, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (A) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/observables\/ChainedObservable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/observables\/ChainedObservable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) ⇒ Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/observables\/ChainedObservable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/observables\/ChainedObservable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/observables\/ChainedObservable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/observables\/ChainedObservable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/observables\/ChainedObservable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/observables\/ChainedObservable.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/observables\/ChainedObservable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/observables\/ChainedObservable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/observables\/ChainedObservable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/observables\/ChainedObservable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/observables\/ChainedObservable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/observables\/ChainedObservable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/observables\/ChainedObservable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/ChainedObservable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/ChainedObservable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/ChainedObservable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/ChainedObservable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/ChainedObservable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/ChainedObservable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/ChainedObservable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/ChainedObservable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/ChainedObservable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/ChainedObservable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/ChainedObservable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/ChainedObservable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/ChainedObservable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/ChainedObservable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/ChainedObservable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/ChainedObservable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(conn: Multi, subscriber: Subscriber[A]): Unit", "member" : "monix.reactive.observables.ChainedObservable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#unsafeSubscribeFn(conn:monix.execution.cancelables.AssignableCancelable.Multi,subscriber:monix.reactive.observers.Subscriber[A]):Unit", "kind" : "abstract def"}], "members_object" : [{"label" : "subscribe", "tail" : "(source: Observable[A], conn: Multi, out: Subscriber[A]): Unit", "member" : "monix.reactive.observables.ChainedObservable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#subscribe[A](source:monix.reactive.Observable[A],conn:monix.execution.cancelables.AssignableCancelable.Multi,out:monix.reactive.observers.Subscriber[A]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/ChainedObservable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observables\/ChainedObservable.html", "kind" : "class"}, {"name" : "monix.reactive.observables.CombineObservable", "shortDescription" : "Newtype encoding for an Observable datatype that has a cats.Applyinstance which uses Observable.combineLatest to combine elementsneeded for implementing cats.NonEmptyParallel", "object" : "monix\/reactive\/observables\/CombineObservable$.html", "members_object" : [{"label" : "Tag", "tail" : "", "member" : "monix.execution.internal.Newtype1.Tag", "link" : "monix\/reactive\/observables\/CombineObservable$.html#TagextendsAny", "kind" : "trait"}, {"label" : "combineObservableApplicative", "tail" : ": Apply[Type]", "member" : "monix.reactive.observables.CombineObservable.combineObservableApplicative", "link" : "monix\/reactive\/observables\/CombineObservable$.html#combineObservableApplicative:cats.Apply[monix.reactive.observables.CombineObservable.Type]", "kind" : "implicit val"}, {"label" : "unwrap", "tail" : "(fa: Type[A]): Observable[A]", "member" : "monix.execution.internal.Newtype1.unwrap", "link" : "monix\/reactive\/observables\/CombineObservable$.html#unwrap[A](fa:Newtype1.this.Type[A]):F[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(fa: Observable[A]): Type[A]", "member" : "monix.execution.internal.Newtype1.apply", "link" : "monix\/reactive\/observables\/CombineObservable$.html#apply[A](fa:F[A]):Newtype1.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/CombineObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/CombineObservable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/CombineObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/CombineObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/CombineObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/CombineObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/CombineObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CombineObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CombineObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CombineObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/CombineObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/CombineObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/CombineObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/CombineObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/CombineObservable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/CombineObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/CombineObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/CombineObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/CombineObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "monix.execution.internal.Newtype1.Type", "error" : "unsupported entity"}, {"member" : "monix.execution.internal.Newtype1.Base", "error" : "unsupported entity"}], "kind" : "object"}, {"name" : "monix.reactive.observables.ConnectableObservable", "shortDescription" : "Represents an Observable that waits forthe call to connect() beforestarting to emit elements to its subscriber(s).", "object" : "monix\/reactive\/observables\/ConnectableObservable$.html", "members_class" : [{"label" : "refCount", "tail" : "(): Observable[A]", "member" : "monix.reactive.observables.ConnectableObservable.refCount", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#refCount:monix.reactive.Observable[A]", "kind" : "final def"}, {"member" : "monix.reactive.observables.ConnectableObservable#<init>", "error" : "unsupported entity"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (A) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, A) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (A) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (A, Ack) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (A, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (A) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) ⇒ Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/ConnectableObservable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "connect", "tail" : "(): Cancelable", "member" : "monix.reactive.observables.ConnectableObservable.connect", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#connect():monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "cacheUntilConnect", "tail" : "(source: Observable[A], subject: Subject[A, B])(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.observables.ConnectableObservable.cacheUntilConnect", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#cacheUntilConnect[A,B](source:monix.reactive.Observable[A],subject:monix.reactive.subjects.Subject[A,B])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "def"}, {"label" : "multicast", "tail" : "(source: Observable[A], recipe: Pipe[A, B])(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.observables.ConnectableObservable.multicast", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#multicast[A,B](source:monix.reactive.Observable[A],recipe:monix.reactive.Pipe[A,B])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "def"}, {"label" : "unsafeMulticast", "tail" : "(source: Observable[A], subject: Subject[A, B])(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.observables.ConnectableObservable.unsafeMulticast", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#unsafeMulticast[A,B](source:monix.reactive.Observable[A],subject:monix.reactive.subjects.Subject[A,B])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observables\/ConnectableObservable.html", "kind" : "class"}, {"name" : "monix.reactive.observables.GroupedObservable", "shortDescription" : "A GroupedObservable is an observable type generatedby Observable.groupBy.", "object" : "monix\/reactive\/observables\/GroupedObservable$.html", "members_class" : [{"member" : "monix.reactive.observables.GroupedObservable#<init>", "error" : "unsupported entity"}, {"label" : "foreach", "tail" : "(cb: (V) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (V) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/observables\/GroupedObservable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[V]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (V) ⇒ K)(K: Order[K]): Observable[V]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (V) ⇒ K)(K: Order[K]): Task[Option[V]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (V) ⇒ K)(K: Order[K]): Observable[V]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (V) ⇒ K)(K: Order[K]): Task[Option[V]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[V]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[V]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[V]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, V) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, V) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[V]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/observables\/GroupedObservable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (V) ⇒ Boolean): Observable[V]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/observables\/GroupedObservable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (V) ⇒ Boolean): Observable[V]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (V) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (V) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[V]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[V]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, V) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, V) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (V) ⇒ Boolean): Task[Option[V]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[V]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[V]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[V]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/observables\/GroupedObservable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[V]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[V]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/GroupedObservable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[V]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/GroupedObservable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/observables\/GroupedObservable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[V]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/GroupedObservable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/GroupedObservable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[V]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/observables\/GroupedObservable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[V]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/observables\/GroupedObservable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/observables\/GroupedObservable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/GroupedObservable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/GroupedObservable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(V, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/observables\/GroupedObservable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (V, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(V, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/observables\/GroupedObservable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (V, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (V, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (V, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (V, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (V, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (V, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/observables\/GroupedObservable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/observables\/GroupedObservable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/observables\/GroupedObservable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/observables\/GroupedObservable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/observables\/GroupedObservable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/observables\/GroupedObservable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/observables\/GroupedObservable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/observables\/GroupedObservable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/observables\/GroupedObservable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[V]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/observables\/GroupedObservable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[V]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (V) ⇒ Boolean): Observable[V]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[V]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[V]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[V]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/GroupedObservable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/observables\/GroupedObservable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/observables\/GroupedObservable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[V]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, V) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (V) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, V) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, V) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[V]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (V) ⇒ Boolean): Observable[V]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/observables\/GroupedObservable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/observables\/GroupedObservable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/observables\/GroupedObservable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/observables\/GroupedObservable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[V]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/observables\/GroupedObservable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/observables\/GroupedObservable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[V]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[V]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[V]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[V]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/observables\/GroupedObservable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/observables\/GroupedObservable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[V]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (V) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[V, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (V) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[V, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/observables\/GroupedObservable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[V]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/observables\/GroupedObservable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (V) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (V) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (V) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[V]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/observables\/GroupedObservable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/observables\/GroupedObservable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (V) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, V]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/observables\/GroupedObservable.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (V) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (V) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/observables\/GroupedObservable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (V) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/observables\/GroupedObservable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, V) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, V) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (V) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (V) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (V) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (V) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (V) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/observables\/GroupedObservable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/observables\/GroupedObservable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[V]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/observables\/GroupedObservable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/observables\/GroupedObservable.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/observables\/GroupedObservable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/observables\/GroupedObservable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[V]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (V, Int) ⇒ Boolean): Observable[V]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (V) ⇒ Boolean): Observable[V]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[V]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[V]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[V]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[V]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (V) ⇒ Unit): Observable[V]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (V, Ack) ⇒ Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (V, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (V, Ack) ⇒ Unit): Observable[V]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (V) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (V) ⇒ Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (V) ⇒ F[Unit])(F: Effect[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (V) ⇒ Unit): Observable[V]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[V]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[V]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[V]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[V]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[V]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[V]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[V]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (V) ⇒ K)(K: Eq[K]): Observable[V]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/observables\/GroupedObservable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/observables\/GroupedObservable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[V, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[V]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (V) ⇒ Observable[B]): Observable[V]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/observables\/GroupedObservable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/observables\/GroupedObservable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/observables\/GroupedObservable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/observables\/GroupedObservable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/observables\/GroupedObservable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (V) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/observables\/GroupedObservable.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (V) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/observables\/GroupedObservable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/observables\/GroupedObservable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (V, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(V, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/observables\/GroupedObservable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[V, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/observables\/GroupedObservable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[V]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/observables\/GroupedObservable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/observables\/GroupedObservable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[V, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[V, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/observables\/GroupedObservable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (V) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (V) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (V) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[V]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[V])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[V])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/GroupedObservable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/GroupedObservable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/GroupedObservable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/GroupedObservable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/GroupedObservable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/GroupedObservable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/GroupedObservable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/GroupedObservable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/GroupedObservable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/GroupedObservable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/GroupedObservable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/GroupedObservable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/GroupedObservable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/GroupedObservable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/GroupedObservable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/GroupedObservable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "key", "tail" : "(): K", "member" : "monix.reactive.observables.GroupedObservable.key", "link" : "monix\/reactive\/observables\/GroupedObservable.html#key:K", "kind" : "abstract def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[V]): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/GroupedObservable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observables\/GroupedObservable.html", "kind" : "class"}, {"name" : "monix.reactive.observables.RefCountObservable", "shortDescription" : "A RefCountObservable is an observable that wraps aConnectableObservable, initiating the connection on the firstsubscribe() and then staying connected as long as there is at leastone subscription active.", "object" : "monix\/reactive\/observables\/RefCountObservable$.html", "members_class" : [{"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.observables.RefCountObservable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (A) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/observables\/RefCountObservable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/observables\/RefCountObservable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/observables\/RefCountObservable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/observables\/RefCountObservable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/RefCountObservable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/RefCountObservable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/observables\/RefCountObservable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/RefCountObservable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/RefCountObservable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/observables\/RefCountObservable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/observables\/RefCountObservable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/observables\/RefCountObservable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/RefCountObservable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/RefCountObservable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/observables\/RefCountObservable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/observables\/RefCountObservable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/observables\/RefCountObservable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/observables\/RefCountObservable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/observables\/RefCountObservable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/observables\/RefCountObservable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/observables\/RefCountObservable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/observables\/RefCountObservable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/observables\/RefCountObservable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/observables\/RefCountObservable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/observables\/RefCountObservable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/observables\/RefCountObservable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/RefCountObservable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/observables\/RefCountObservable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/observables\/RefCountObservable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, A) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/observables\/RefCountObservable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/observables\/RefCountObservable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/observables\/RefCountObservable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/observables\/RefCountObservable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/observables\/RefCountObservable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/observables\/RefCountObservable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/observables\/RefCountObservable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/observables\/RefCountObservable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/observables\/RefCountObservable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/observables\/RefCountObservable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (A) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/observables\/RefCountObservable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/observables\/RefCountObservable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/observables\/RefCountObservable.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/observables\/RefCountObservable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/observables\/RefCountObservable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/observables\/RefCountObservable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/observables\/RefCountObservable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/observables\/RefCountObservable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/observables\/RefCountObservable.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/observables\/RefCountObservable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/observables\/RefCountObservable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (A, Ack) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (A, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (A) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/observables\/RefCountObservable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/observables\/RefCountObservable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) ⇒ Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/observables\/RefCountObservable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/observables\/RefCountObservable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/observables\/RefCountObservable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/observables\/RefCountObservable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/observables\/RefCountObservable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/observables\/RefCountObservable.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/observables\/RefCountObservable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/observables\/RefCountObservable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/observables\/RefCountObservable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/observables\/RefCountObservable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/observables\/RefCountObservable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/observables\/RefCountObservable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/observables\/RefCountObservable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/RefCountObservable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/RefCountObservable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/RefCountObservable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/RefCountObservable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/RefCountObservable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/RefCountObservable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/RefCountObservable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/RefCountObservable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/RefCountObservable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/RefCountObservable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/RefCountObservable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/RefCountObservable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/RefCountObservable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/RefCountObservable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/RefCountObservable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/RefCountObservable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(connectable: ConnectableObservable[A]): Observable[A]", "member" : "monix.reactive.observables.RefCountObservable.apply", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#apply[A](connectable:monix.reactive.observables.ConnectableObservable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/RefCountObservable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observables\/RefCountObservable.html", "kind" : "class"}], "monix.eval.instances" : [{"name" : "monix.eval.instances.CatsAsyncForTask", "shortDescription" : "Cats type class instance of Taskfor  cats.effect.Async and CoflatMap (and implicitly forApplicative, Monad, MonadError, etc).", "members_class" : [{"label" : "async", "tail" : "(k: ((Either[Throwable, A]) ⇒ Unit) ⇒ Unit): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.async", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: ⇒ Task[A]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.suspend", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: ⇒ A): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.delay", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#delay[A](thunk:=>A):monix.eval.Task[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsAsyncForTask#<init>", "error" : "unsupported entity"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "cats.effect.Async.liftIO", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: ⇒ A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) ⇒ Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[Throwable, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#rethrow[A](fa:F[Either[E,A]]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: ⇒ Task[B], ifFalse: ⇒ Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "forEffectEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.forEffectEval", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#forEffectEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "followedByEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.followedByEval", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#followedByEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) ⇒ Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) ⇒ Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.Apply.ap2", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "forEffect", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.forEffect", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#forEffect[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "followedBy", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.followedBy", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#followedBy[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.productL", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.productR", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (Task[A]) ⇒ Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) ⇒ B)(g: (B) ⇒ A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsAsyncForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsBaseForTask", "shortDescription" : "Cats type class instances for Taskfor  cats.MonadError and CoflatMap (and implicitly forApplicative, Monad, etc).", "members_class" : [{"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: ⇒ A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) ⇒ Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsBaseForTask#<init>", "error" : "unsupported entity"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[Throwable, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#rethrow[A](fa:F[Either[E,A]]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: ⇒ Task[B], ifFalse: ⇒ Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "forEffectEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.forEffectEval", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#forEffectEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "followedByEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.followedByEval", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#followedByEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) ⇒ Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) ⇒ Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.Apply.ap2", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "forEffect", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.forEffect", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#forEffect[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "followedBy", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.followedBy", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#followedBy[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.productL", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.productR", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (Task[A]) ⇒ Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) ⇒ B)(g: (B) ⇒ A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsBaseForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsBaseForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsConcurrentEffectForTask", "shortDescription" : "Cats type class instances of Task forcats.effect.ConcurrentEffect.", "members_class" : [{"label" : "race", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[A, B]]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.race", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#race[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[A,B]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[(A, Fiber[B]), (Fiber[A], B)]]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.racePair", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#racePair[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[(A,monix.eval.Fiber[B]),(monix.eval.Fiber[A],B)]]", "kind" : "def"}, {"label" : "start", "tail" : "(fa: Task[A]): Task[Fiber[A]]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.start", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#start[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Fiber[A]]", "kind" : "def"}, {"label" : "onCancelRaiseError", "tail" : "(fa: Task[A], e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.onCancelRaiseError", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#onCancelRaiseError[A](fa:monix.eval.Task[A],e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.uncancelable", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#uncancelable[A](fa:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(k: ((Either[Throwable, A]) ⇒ Unit) ⇒ IO[Unit]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.cancelable", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#cancelable[A](k:(Either[Throwable,A]=>Unit)=>cats.effect.IO[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "runCancelable", "tail" : "(fa: Task[A])(cb: (Either[Throwable, A]) ⇒ IO[Unit]): IO[IO[Unit]]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.runCancelable", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#runCancelable[A](fa:monix.eval.Task[A])(cb:Either[Throwable,A]=>cats.effect.IO[Unit]):cats.effect.IO[cats.effect.IO[Unit]]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsConcurrentEffectForTask#<init>", "error" : "unsupported entity"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "cats.effect.Concurrent.liftIO", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) ⇒ Unit) ⇒ Unit): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.async", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: ⇒ Task[A]): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.suspend", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: ⇒ A): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.delay", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#delay[A](thunk:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "runAsync", "tail" : "(fa: Task[A])(cb: (Either[Throwable, A]) ⇒ IO[Unit]): IO[Unit]", "member" : "monix.eval.instances.CatsEffectForTask.runAsync", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#runAsync[A](fa:monix.eval.Task[A])(cb:Either[Throwable,A]=>cats.effect.IO[Unit]):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: ⇒ A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) ⇒ Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[Throwable, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#rethrow[A](fa:F[Either[E,A]]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: ⇒ Task[B], ifFalse: ⇒ Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "forEffectEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.forEffectEval", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#forEffectEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "followedByEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.followedByEval", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#followedByEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) ⇒ Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) ⇒ Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.Apply.ap2", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "forEffect", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.forEffect", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#forEffect[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "followedBy", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.followedBy", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#followedBy[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.productL", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.productR", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (Task[A]) ⇒ Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) ⇒ B)(g: (B) ⇒ A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsConcurrentForTask", "shortDescription" : "Cats type class instance of Taskfor  cats.effect.Concurrent.", "object" : "monix\/eval\/instances\/CatsConcurrentForTask$.html", "members_class" : [{"label" : "race", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[A, B]]", "member" : "monix.eval.instances.CatsConcurrentForTask.race", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#race[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[A,B]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[(A, Fiber[B]), (Fiber[A], B)]]", "member" : "monix.eval.instances.CatsConcurrentForTask.racePair", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#racePair[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[(A,monix.eval.Fiber[B]),(monix.eval.Fiber[A],B)]]", "kind" : "def"}, {"label" : "start", "tail" : "(fa: Task[A]): Task[Fiber[A]]", "member" : "monix.eval.instances.CatsConcurrentForTask.start", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#start[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Fiber[A]]", "kind" : "def"}, {"label" : "onCancelRaiseError", "tail" : "(fa: Task[A], e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsConcurrentForTask.onCancelRaiseError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#onCancelRaiseError[A](fa:monix.eval.Task[A],e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentForTask.uncancelable", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#uncancelable[A](fa:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(k: ((Either[Throwable, A]) ⇒ Unit) ⇒ IO[Unit]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentForTask.cancelable", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#cancelable[A](k:(Either[Throwable,A]=>Unit)=>cats.effect.IO[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsConcurrentForTask#<init>", "error" : "unsupported entity"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "cats.effect.Concurrent.liftIO", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) ⇒ Unit) ⇒ Unit): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.async", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: ⇒ Task[A]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.suspend", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: ⇒ A): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.delay", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#delay[A](thunk:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: ⇒ A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) ⇒ Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[Throwable, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#rethrow[A](fa:F[Either[E,A]]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: ⇒ Task[B], ifFalse: ⇒ Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "forEffectEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.forEffectEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#forEffectEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "followedByEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.followedByEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#followedByEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) ⇒ Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) ⇒ Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.Apply.ap2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "forEffect", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.forEffect", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#forEffect[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "followedBy", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.followedBy", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#followedBy[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.productL", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.productR", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (Task[A]) ⇒ Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) ⇒ B)(g: (B) ⇒ A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "race", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[A, B]]", "member" : "monix.eval.instances.CatsConcurrentForTask.race", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#race[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[A,B]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[(A, Fiber[B]), (Fiber[A], B)]]", "member" : "monix.eval.instances.CatsConcurrentForTask.racePair", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#racePair[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[(A,monix.eval.Fiber[B]),(monix.eval.Fiber[A],B)]]", "kind" : "def"}, {"label" : "start", "tail" : "(fa: Task[A]): Task[Fiber[A]]", "member" : "monix.eval.instances.CatsConcurrentForTask.start", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#start[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Fiber[A]]", "kind" : "def"}, {"label" : "onCancelRaiseError", "tail" : "(fa: Task[A], e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsConcurrentForTask.onCancelRaiseError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#onCancelRaiseError[A](fa:monix.eval.Task[A],e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentForTask.uncancelable", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#uncancelable[A](fa:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(k: ((Either[Throwable, A]) ⇒ Unit) ⇒ IO[Unit]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentForTask.cancelable", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#cancelable[A](k:(Either[Throwable,A]=>Unit)=>cats.effect.IO[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "cats.effect.Concurrent.liftIO", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) ⇒ Unit) ⇒ Unit): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.async", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: ⇒ Task[A]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.suspend", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: ⇒ A): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.delay", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#delay[A](thunk:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: ⇒ A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) ⇒ Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[Throwable, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#rethrow[A](fa:F[Either[E,A]]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: ⇒ Task[B], ifFalse: ⇒ Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "forEffectEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.forEffectEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#forEffectEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "followedByEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.followedByEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#followedByEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) ⇒ Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) ⇒ Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.Apply.ap2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "forEffect", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.forEffect", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#forEffect[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "followedBy", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.followedBy", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#followedBy[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.productL", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.productR", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (Task[A]) ⇒ Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) ⇒ B)(g: (B) ⇒ A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsConcurrentForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsEffectForTask", "shortDescription" : "Cats type class instances of Task forcats.effect.Effect (and implicitly for Applicative, Monad,MonadError, Sync, etc).", "members_class" : [{"label" : "async", "tail" : "(k: ((Either[Throwable, A]) ⇒ Unit) ⇒ Unit): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.async", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: ⇒ Task[A]): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.suspend", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: ⇒ A): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.delay", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#delay[A](thunk:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "runAsync", "tail" : "(fa: Task[A])(cb: (Either[Throwable, A]) ⇒ IO[Unit]): IO[Unit]", "member" : "monix.eval.instances.CatsEffectForTask.runAsync", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#runAsync[A](fa:monix.eval.Task[A])(cb:Either[Throwable,A]=>cats.effect.IO[Unit]):cats.effect.IO[Unit]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsEffectForTask#<init>", "error" : "unsupported entity"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "cats.effect.Async.liftIO", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: ⇒ A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) ⇒ A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) ⇒ Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[Throwable, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#rethrow[A](fa:F[Either[E,A]]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: ⇒ Throwable)(predicate: (A) ⇒ Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) ⇒ Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) ⇒ Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: ⇒ Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: ⇒ Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: ⇒ Task[B], ifFalse: ⇒ Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "forEffectEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.forEffectEval", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#forEffectEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "followedByEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.followedByEval", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#followedByEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: ⇒ Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) ⇒ Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) ⇒ Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.Apply.ap2", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "forEffect", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.forEffect", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#forEffect[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "followedBy", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.followedBy", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#followedBy[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) ⇒ B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.productL", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.productR", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) ⇒ Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) ⇒ Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (Task[A]) ⇒ Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) ⇒ B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) ⇒ B)(g: (B) ⇒ A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsEffectForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsEffectForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsMonadToMonoid", "shortDescription" : "Given that A has a cats.Semigroup implementation, thisbuilds a Semigroup[F[A]] instance for any F[_] data typethat implements cats.Monad.", "members_class" : [{"label" : "empty", "tail" : "(): F[A]", "member" : "monix.eval.instances.CatsMonadToMonoid.empty", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#empty:F[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsMonadToMonoid#<init>", "error" : "unsupported entity"}, {"label" : "combineAllOption", "tail" : "(as: TraversableOnce[F[A]]): Option[F[A]]", "member" : "cats.kernel.Monoid.combineAllOption", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#combineAllOption(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "combineAll", "tail" : "(as: TraversableOnce[F[A]]): F[A]", "member" : "cats.kernel.Monoid.combineAll", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#combineAll(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "combineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Monoid.combineN", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(a: F[A])(ev: Eq[F[A]]): Boolean", "member" : "cats.kernel.Monoid.isEmpty", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#isEmpty(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "combine", "tail" : "(x: F[A], y: F[A]): F[A]", "member" : "monix.eval.instances.CatsMonadToSemigroup.combine", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#combine(x:F[A],y:F[A]):F[A]", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsMonadToMonoid.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsMonadToSemigroup", "shortDescription" : "Given that A has a cats.Monoid implementation, this buildsa Semigroup[F[A]] instance for any F[_] data type thatimplements cats.effect.Sync.", "members_class" : [{"label" : "combine", "tail" : "(x: F[A], y: F[A]): F[A]", "member" : "monix.eval.instances.CatsMonadToSemigroup.combine", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#combine(x:F[A],y:F[A]):F[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsMonadToSemigroup#<init>", "error" : "unsupported entity"}, {"label" : "combineAllOption", "tail" : "(as: TraversableOnce[F[A]]): Option[F[A]]", "member" : "cats.kernel.Semigroup.combineAllOption", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#combineAllOption(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "combineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Semigroup.combineN", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsMonadToSemigroup.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsParallelForTask", "shortDescription" : "cats.Parallel type class instance for Task.", "object" : "monix\/eval\/instances\/CatsParallelForTask$.html", "members_class" : [{"label" : "parallel", "tail" : ": ~>[Task, Task.Par]", "member" : "monix.eval.instances.CatsParallelForTask.parallel", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#parallel:monix.eval.Task~>monix.eval.Task.Par", "kind" : "val"}, {"label" : "sequential", "tail" : ": ~>[Task.Par, Task]", "member" : "monix.eval.instances.CatsParallelForTask.sequential", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#sequential:monix.eval.Task.Par~>monix.eval.Task", "kind" : "val"}, {"label" : "monad", "tail" : "(): Monad[Task]", "member" : "monix.eval.instances.CatsParallelForTask.monad", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#monad:cats.Monad[monix.eval.Task]", "kind" : "def"}, {"label" : "applicative", "tail" : "(): Applicative[Task.Par]", "member" : "monix.eval.instances.CatsParallelForTask.applicative", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#applicative:cats.Applicative[monix.eval.Task.Par]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsParallelForTask#<init>", "error" : "unsupported entity"}, {"label" : "applicativeError", "tail" : "(E: MonadError[Task, E]): ApplicativeError[Task.Par, E]", "member" : "cats.Parallel.applicativeError", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#applicativeError[E](implicitE:cats.MonadError[M,E]):cats.ApplicativeError[F,E]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(): FlatMap[Task]", "member" : "cats.Parallel.flatMap", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#flatMap:cats.FlatMap[M]", "kind" : "def"}, {"label" : "apply", "tail" : "(): Apply[Task.Par]", "member" : "cats.Parallel.apply", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#apply:cats.Apply[F]", "kind" : "def"}, {"label" : "parForEffect", "tail" : "(ma: Task[A])(mb: Task[B]): Task[A]", "member" : "cats.NonEmptyParallel.parForEffect", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#parForEffect[A,B](ma:M[A])(mb:M[B]):M[A]", "kind" : "def"}, {"label" : "parProductL", "tail" : "(ma: Task[A])(mb: Task[B]): Task[A]", "member" : "cats.NonEmptyParallel.parProductL", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#parProductL[A,B](ma:M[A])(mb:M[B]):M[A]", "kind" : "def"}, {"label" : "parFollowedBy", "tail" : "(ma: Task[A])(mb: Task[B]): Task[B]", "member" : "cats.NonEmptyParallel.parFollowedBy", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#parFollowedBy[A,B](ma:M[A])(mb:M[B]):M[B]", "kind" : "def"}, {"label" : "parProductR", "tail" : "(ma: Task[A])(mb: Task[B]): Task[B]", "member" : "cats.NonEmptyParallel.parProductR", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#parProductR[A,B](ma:M[A])(mb:M[B]):M[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsParallelForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "parallel", "tail" : ": ~>[Task, Task.Par]", "member" : "monix.eval.instances.CatsParallelForTask.parallel", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#parallel:monix.eval.Task~>monix.eval.Task.Par", "kind" : "val"}, {"label" : "sequential", "tail" : ": ~>[Task.Par, Task]", "member" : "monix.eval.instances.CatsParallelForTask.sequential", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#sequential:monix.eval.Task.Par~>monix.eval.Task", "kind" : "val"}, {"label" : "monad", "tail" : "(): Monad[Task]", "member" : "monix.eval.instances.CatsParallelForTask.monad", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#monad:cats.Monad[monix.eval.Task]", "kind" : "def"}, {"label" : "applicative", "tail" : "(): Applicative[Task.Par]", "member" : "monix.eval.instances.CatsParallelForTask.applicative", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#applicative:cats.Applicative[monix.eval.Task.Par]", "kind" : "def"}, {"label" : "applicativeError", "tail" : "(E: MonadError[Task, E]): ApplicativeError[Task.Par, E]", "member" : "cats.Parallel.applicativeError", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#applicativeError[E](implicitE:cats.MonadError[M,E]):cats.ApplicativeError[F,E]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(): FlatMap[Task]", "member" : "cats.Parallel.flatMap", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#flatMap:cats.FlatMap[M]", "kind" : "def"}, {"label" : "apply", "tail" : "(): Apply[Task.Par]", "member" : "cats.Parallel.apply", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#apply:cats.Apply[F]", "kind" : "def"}, {"label" : "parForEffect", "tail" : "(ma: Task[A])(mb: Task[B]): Task[A]", "member" : "cats.NonEmptyParallel.parForEffect", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#parForEffect[A,B](ma:M[A])(mb:M[B]):M[A]", "kind" : "def"}, {"label" : "parProductL", "tail" : "(ma: Task[A])(mb: Task[B]): Task[A]", "member" : "cats.NonEmptyParallel.parProductL", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#parProductL[A,B](ma:M[A])(mb:M[B]):M[A]", "kind" : "def"}, {"label" : "parFollowedBy", "tail" : "(ma: Task[A])(mb: Task[B]): Task[B]", "member" : "cats.NonEmptyParallel.parFollowedBy", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#parFollowedBy[A,B](ma:M[A])(mb:M[B]):M[B]", "kind" : "def"}, {"label" : "parProductR", "tail" : "(ma: Task[A])(mb: Task[B]): Task[B]", "member" : "cats.NonEmptyParallel.parProductR", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#parProductR[A,B](ma:M[A])(mb:M[B]):M[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsParallelForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsSyncForCoeval", "shortDescription" : "Cats type class instances for Coeval.", "object" : "monix\/eval\/instances\/CatsSyncForCoeval$.html", "members_class" : [{"label" : "coflatten", "tail" : "(fa: Coeval[A]): Coeval[Coeval[A]]", "member" : "monix.eval.instances.CatsSyncForCoeval.coflatten", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#coflatten[A](fa:monix.eval.Coeval[A]):monix.eval.Coeval[monix.eval.Coeval[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Coeval[A])(f: (Coeval[A]) ⇒ B): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.coflatMap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#coflatMap[A,B](fa:monix.eval.Coeval[A])(f:monix.eval.Coeval[A]=>B):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.fromTry", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: ⇒ A)(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.catchNonFatal", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Coeval[A]): Coeval[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsSyncForCoeval.attempt", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#attempt[A](fa:monix.eval.Coeval[A]):monix.eval.Coeval[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Coeval[A]]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.recoverWith", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#recoverWith[A](fa:monix.eval.Coeval[A])(pf:PartialFunction[Throwable,monix.eval.Coeval[A]]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.recover", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#recover[A](fa:monix.eval.Coeval[A])(pf:PartialFunction[Throwable,A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Coeval[A])(f: (Throwable) ⇒ Coeval[A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.handleErrorWith", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#handleErrorWith[A](fa:monix.eval.Coeval[A])(f:Throwable=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Coeval[A])(f: (Throwable) ⇒ A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.handleError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#handleError[A](fa:monix.eval.Coeval[A])(f:Throwable=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.raiseError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#raiseError[A](e:Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Coeval[A])(f: (A) ⇒ B): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.map", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map[A,B](fa:monix.eval.Coeval[A])(f:A=>B):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Coeval[A], fb: Coeval[B])(f: (A, B) ⇒ Z): Coeval[Z]", "member" : "monix.eval.instances.CatsSyncForCoeval.map2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map2[A,B,Z](fa:monix.eval.Coeval[A],fb:monix.eval.Coeval[B])(f:(A,B)=>Z):monix.eval.Coeval[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Coeval[(A) ⇒ B])(fa: Coeval[A]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.ap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap[A,B](ff:monix.eval.Coeval[A=>B])(fa:monix.eval.Coeval[A]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Coeval[Either[A, B]]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.tailRecM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Coeval[Either[A,B]]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Coeval[Coeval[A]]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.flatten", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#flatten[A](ffa:monix.eval.Coeval[monix.eval.Coeval[A]]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Coeval[A])(f: (A) ⇒ Coeval[B]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.flatMap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#flatMap[A,B](fa:monix.eval.Coeval[A])(f:A=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Coeval[Unit]", "member" : "monix.eval.instances.CatsSyncForCoeval.unit", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#unit:monix.eval.Coeval[Unit]", "kind" : "val"}, {"label" : "suspend", "tail" : "(fa: ⇒ Coeval[A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.suspend", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#suspend[A](fa:=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: ⇒ A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.delay", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#delay[A](thunk:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.pure", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#pure[A](a:A):monix.eval.Coeval[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsSyncForCoeval#<init>", "error" : "unsupported entity"}, {"label" : "rethrow", "tail" : "(fa: Coeval[Either[Throwable, A]]): Coeval[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#rethrow[A](fa:F[Either[E,A]]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Throwable]): Coeval[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Coeval[A])(error: (A) ⇒ Throwable)(predicate: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Coeval[A])(error: ⇒ Throwable)(predicate: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) ⇒ Coeval[A])(p: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) ⇒ Coeval[A])(p: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Coeval[A])(p: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Coeval[A])(p: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Coeval[A])(cond: ⇒ Coeval[Boolean]): Coeval[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Coeval[A])(cond: ⇒ Coeval[Boolean])(G: Alternative[G]): Coeval[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Coeval[Boolean])(body: ⇒ Coeval[A]): Coeval[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Coeval[Boolean])(body: ⇒ Coeval[A])(G: Alternative[G]): Coeval[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Coeval[A])(f: (A) ⇒ Coeval[B]): Coeval[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Coeval[Boolean])(ifTrue: ⇒ Coeval[B], ifFalse: ⇒ Coeval[B]): Coeval[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Coeval[A])(f: (A) ⇒ Coeval[B]): Coeval[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Coeval[A], fb: Coeval[B]): Coeval[(A, B)]", "member" : "cats.FlatMap.product", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "forEffectEval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[A]", "member" : "cats.FlatMap.forEffectEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#forEffectEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "followedByEval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[B]", "member" : "cats.FlatMap.followedByEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#followedByEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Coeval[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Coeval[Unit]]): Coeval[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Coeval[A]): EitherT[Coeval, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: ⇒ Coeval[A]): Coeval[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: ⇒ Coeval[A]): Coeval[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Coeval[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Coeval[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Coeval[A]): Coeval[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Coeval[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Coeval[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Coeval[A], fb: Eval[Coeval[B]])(f: (A, B) ⇒ Z): Eval[Coeval[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Coeval[(A, B) ⇒ Z])(fa: Coeval[A], fb: Coeval[B]): Coeval[Z]", "member" : "cats.Apply.ap2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "forEffect", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[A]", "member" : "cats.Apply.forEffect", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#forEffect[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "followedBy", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[B]", "member" : "cats.Apply.followedBy", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#followedBy[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Coeval[(A) ⇒ B])(fa: Coeval[A]): Coeval[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[A]", "member" : "cats.Apply.productL", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[B]", "member" : "cats.Apply.productR", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6]): Coeval[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6])(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5]): Coeval[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5])(f: (A0, A1, A2, A3, A4, A5) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4]): Coeval[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4])(f: (A0, A1, A2, A3, A4) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3]): Coeval[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3])(f: (A0, A1, A2, A3) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Coeval[(A0, A1, A2, A3) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2]): Coeval[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2])(f: (A0, A1, A2) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Coeval[(A0, A1, A2) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Coeval[A], f2: Coeval[B]): Coeval[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Coeval[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Coeval[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Coeval[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Coeval[A], b: B): Coeval[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Coeval[A], b: B): Coeval[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Coeval[A], b: B): Coeval[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Coeval[A])(f: (A) ⇒ B): Coeval[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Coeval[A]): Coeval[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (Coeval[A]) ⇒ Coeval[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Coeval[A]): Coeval[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Coeval[A])(f: (A) ⇒ B): Coeval[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Coeval[A])(f: (A) ⇒ B)(g: (B) ⇒ A): Coeval[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Coeval[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Coeval[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "coflatten", "tail" : "(fa: Coeval[A]): Coeval[Coeval[A]]", "member" : "monix.eval.instances.CatsSyncForCoeval.coflatten", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#coflatten[A](fa:monix.eval.Coeval[A]):monix.eval.Coeval[monix.eval.Coeval[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Coeval[A])(f: (Coeval[A]) ⇒ B): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.coflatMap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#coflatMap[A,B](fa:monix.eval.Coeval[A])(f:monix.eval.Coeval[A]=>B):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.fromTry", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: ⇒ A)(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.catchNonFatal", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Coeval[A]): Coeval[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsSyncForCoeval.attempt", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#attempt[A](fa:monix.eval.Coeval[A]):monix.eval.Coeval[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Coeval[A]]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.recoverWith", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#recoverWith[A](fa:monix.eval.Coeval[A])(pf:PartialFunction[Throwable,monix.eval.Coeval[A]]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.recover", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#recover[A](fa:monix.eval.Coeval[A])(pf:PartialFunction[Throwable,A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Coeval[A])(f: (Throwable) ⇒ Coeval[A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.handleErrorWith", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#handleErrorWith[A](fa:monix.eval.Coeval[A])(f:Throwable=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Coeval[A])(f: (Throwable) ⇒ A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.handleError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#handleError[A](fa:monix.eval.Coeval[A])(f:Throwable=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.raiseError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#raiseError[A](e:Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Coeval[A])(f: (A) ⇒ B): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.map", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map[A,B](fa:monix.eval.Coeval[A])(f:A=>B):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Coeval[A], fb: Coeval[B])(f: (A, B) ⇒ Z): Coeval[Z]", "member" : "monix.eval.instances.CatsSyncForCoeval.map2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map2[A,B,Z](fa:monix.eval.Coeval[A],fb:monix.eval.Coeval[B])(f:(A,B)=>Z):monix.eval.Coeval[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Coeval[(A) ⇒ B])(fa: Coeval[A]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.ap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap[A,B](ff:monix.eval.Coeval[A=>B])(fa:monix.eval.Coeval[A]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Coeval[Either[A, B]]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.tailRecM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Coeval[Either[A,B]]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Coeval[Coeval[A]]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.flatten", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#flatten[A](ffa:monix.eval.Coeval[monix.eval.Coeval[A]]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Coeval[A])(f: (A) ⇒ Coeval[B]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.flatMap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#flatMap[A,B](fa:monix.eval.Coeval[A])(f:A=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Coeval[Unit]", "member" : "monix.eval.instances.CatsSyncForCoeval.unit", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#unit:monix.eval.Coeval[Unit]", "kind" : "val"}, {"label" : "suspend", "tail" : "(fa: ⇒ Coeval[A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.suspend", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#suspend[A](fa:=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: ⇒ A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.delay", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#delay[A](thunk:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.pure", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#pure[A](a:A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Coeval[Either[Throwable, A]]): Coeval[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#rethrow[A](fa:F[Either[E,A]]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Throwable]): Coeval[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Coeval[A])(error: (A) ⇒ Throwable)(predicate: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Coeval[A])(error: ⇒ Throwable)(predicate: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) ⇒ Coeval[A])(p: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) ⇒ Coeval[A])(p: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Coeval[A])(p: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Coeval[A])(p: (A) ⇒ Boolean): Coeval[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Coeval[A])(cond: ⇒ Coeval[Boolean]): Coeval[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Coeval[A])(cond: ⇒ Coeval[Boolean])(G: Alternative[G]): Coeval[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Coeval[Boolean])(body: ⇒ Coeval[A]): Coeval[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Coeval[Boolean])(body: ⇒ Coeval[A])(G: Alternative[G]): Coeval[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Coeval[A])(f: (A) ⇒ Coeval[B]): Coeval[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Coeval[Boolean])(ifTrue: ⇒ Coeval[B], ifFalse: ⇒ Coeval[B]): Coeval[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Coeval[A])(f: (A) ⇒ Coeval[B]): Coeval[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Coeval[A], fb: Coeval[B]): Coeval[(A, B)]", "member" : "cats.FlatMap.product", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "forEffectEval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[A]", "member" : "cats.FlatMap.forEffectEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#forEffectEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "followedByEval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[B]", "member" : "cats.FlatMap.followedByEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#followedByEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Coeval[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Coeval[Unit]]): Coeval[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Coeval[A]): EitherT[Coeval, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: ⇒ Coeval[A]): Coeval[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: ⇒ Coeval[A]): Coeval[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Coeval[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Coeval[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Coeval[A]): Coeval[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Coeval[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Coeval[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Coeval[A], fb: Eval[Coeval[B]])(f: (A, B) ⇒ Z): Eval[Coeval[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Coeval[(A, B) ⇒ Z])(fa: Coeval[A], fb: Coeval[B]): Coeval[Z]", "member" : "cats.Apply.ap2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "forEffect", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[A]", "member" : "cats.Apply.forEffect", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#forEffect[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "followedBy", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[B]", "member" : "cats.Apply.followedBy", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#followedBy[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Coeval[(A) ⇒ B])(fa: Coeval[A]): Coeval[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "productL", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[A]", "member" : "cats.Apply.productL", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[B]", "member" : "cats.Apply.productR", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "tuple22", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6]): Coeval[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6])(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5]): Coeval[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5])(f: (A0, A1, A2, A3, A4, A5) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4]): Coeval[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4])(f: (A0, A1, A2, A3, A4) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3]): Coeval[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3])(f: (A0, A1, A2, A3) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Coeval[(A0, A1, A2, A3) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2]): Coeval[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2])(f: (A0, A1, A2) ⇒ Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Coeval[(A0, A1, A2) ⇒ Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Coeval[A], f2: Coeval[B]): Coeval[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Coeval[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Coeval[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Coeval[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Coeval[A], b: B): Coeval[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Coeval[A], b: B): Coeval[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Coeval[A], b: B): Coeval[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Coeval[A])(f: (A) ⇒ B): Coeval[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Coeval[A]): Coeval[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (Coeval[A]) ⇒ Coeval[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Coeval[A]): Coeval[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Coeval[A])(f: (A) ⇒ B): Coeval[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Coeval[A])(f: (A) ⇒ B)(g: (B) ⇒ A): Coeval[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Coeval[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Coeval[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsSyncForCoeval.html", "kind" : "class"}], "monix.execution.cancelables" : [{"name" : "monix.execution.cancelables.AssignableCancelable", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : ":=", "tail" : "(value: Cancelable): AssignableCancelable.this.type", "member" : "monix.execution.cancelables.AssignableCancelable.:=", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#:=(value:monix.execution.Cancelable):AssignableCancelable.this.type", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#cancel():Unit", "kind" : "abstract def"}], "shortDescription" : "Represents a class of cancelables that can holdan internal reference to another cancelable (and thushas to support the assignment operator).", "object" : "monix\/execution\/cancelables\/AssignableCancelable$.html", "members_object" : [{"label" : "dummy", "tail" : ": Multi", "member" : "monix.execution.cancelables.AssignableCancelable.dummy", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#dummy:monix.execution.cancelables.AssignableCancelable.Multi", "kind" : "val"}, {"label" : "alreadyCanceled", "tail" : ": Bool", "member" : "monix.execution.cancelables.AssignableCancelable.alreadyCanceled", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#alreadyCanceled:monix.execution.cancelables.AssignableCancelable.Bool", "kind" : "val"}, {"label" : "single", "tail" : "(): AssignableCancelable", "member" : "monix.execution.cancelables.AssignableCancelable.single", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#single():monix.execution.cancelables.AssignableCancelable", "kind" : "def"}, {"label" : "multi", "tail" : "(initial: Cancelable): AssignableCancelable", "member" : "monix.execution.cancelables.AssignableCancelable.multi", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#multi(initial:monix.execution.Cancelable):monix.execution.cancelables.AssignableCancelable", "kind" : "def"}, {"label" : "Multi", "tail" : "", "member" : "monix.execution.cancelables.AssignableCancelable.Multi", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#MultiextendsAssignableCancelable.Bool", "kind" : "trait"}, {"label" : "Bool", "tail" : "", "member" : "monix.execution.cancelables.AssignableCancelable.Bool", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#BoolextendsAssignableCancelablewithBooleanCancelable", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/cancelables\/AssignableCancelable.html", "kind" : "trait"}, {"name" : "monix.execution.cancelables.BooleanCancelable", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.BooleanCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#isCanceled:Boolean", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#cancel():Unit", "kind" : "abstract def"}], "shortDescription" : "Represents a Cancelable that can be queriedfor the canceled status.", "object" : "monix\/execution\/cancelables\/BooleanCancelable$.html", "members_object" : [{"label" : "dummy", "tail" : ": BooleanCancelable", "member" : "monix.execution.cancelables.BooleanCancelable.dummy", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#dummy:monix.execution.cancelables.BooleanCancelable", "kind" : "final val"}, {"label" : "alreadyCanceled", "tail" : ": BooleanCancelable", "member" : "monix.execution.cancelables.BooleanCancelable.alreadyCanceled", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#alreadyCanceled:monix.execution.cancelables.BooleanCancelable", "kind" : "final val"}, {"label" : "apply", "tail" : "(callback: () ⇒ Unit): BooleanCancelable", "member" : "monix.execution.cancelables.BooleanCancelable.apply", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#apply(callback:()=>Unit):monix.execution.cancelables.BooleanCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): BooleanCancelable", "member" : "monix.execution.cancelables.BooleanCancelable.apply", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#apply():monix.execution.cancelables.BooleanCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/cancelables\/BooleanCancelable.html", "kind" : "trait"}, {"name" : "monix.execution.cancelables.ChainedCancelable", "shortDescription" : "Represents a monix.execution.Cancelable whose underlyingcancelable reference can be swapped for another.", "object" : "monix\/execution\/cancelables\/ChainedCancelable$.html", "members_class" : [{"label" : "forwardTo", "tail" : "(other: ChainedCancelable): Unit", "member" : "monix.execution.cancelables.ChainedCancelable.forwardTo", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#forwardTo(other:monix.execution.cancelables.ChainedCancelable):Unit", "kind" : "def"}, {"label" : ":=", "tail" : "(value: Cancelable): ChainedCancelable.this.type", "member" : "monix.execution.cancelables.ChainedCancelable.:=", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#:=(value:monix.execution.Cancelable):ChainedCancelable.this.type", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.ChainedCancelable.cancel", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(ref: Cancelable): ChainedCancelable", "member" : "monix.execution.cancelables.ChainedCancelable.apply", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#apply(ref:monix.execution.Cancelable):monix.execution.cancelables.ChainedCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): ChainedCancelable", "member" : "monix.execution.cancelables.ChainedCancelable.apply", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#apply():monix.execution.cancelables.ChainedCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/ChainedCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.CompositeCancelable", "shortDescription" : "Represents a composite of multiple cancelables.", "object" : "monix\/execution\/cancelables\/CompositeCancelable$.html", "members_class" : [{"label" : "getAndSet", "tail" : "(that: GenTraversableOnce[Cancelable]): Set[Cancelable]", "member" : "monix.execution.cancelables.CompositeCancelable.getAndSet", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#getAndSet(that:scala.collection.GenTraversableOnce[monix.execution.Cancelable]):Set[monix.execution.Cancelable]", "kind" : "def"}, {"label" : "reset", "tail" : "(): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.reset", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#reset():CompositeCancelable.this.type", "kind" : "def"}, {"label" : "removeAll", "tail" : "(that: GenTraversableOnce[Cancelable]): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.removeAll", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#removeAll(that:scala.collection.GenTraversableOnce[monix.execution.Cancelable]):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "--=", "tail" : "(that: GenTraversableOnce[Cancelable]): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.--=", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#--=(that:scala.collection.GenTraversableOnce[monix.execution.Cancelable]):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "remove", "tail" : "(s: Cancelable): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.remove", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#remove(s:monix.execution.Cancelable):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "-=", "tail" : "(s: Cancelable): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.-=", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#-=(s:monix.execution.Cancelable):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "addAll", "tail" : "(that: GenTraversableOnce[Cancelable]): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.addAll", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#addAll(that:scala.collection.GenTraversableOnce[monix.execution.Cancelable]):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "++=", "tail" : "(that: GenTraversableOnce[Cancelable]): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.++=", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#++=(that:scala.collection.GenTraversableOnce[monix.execution.Cancelable]):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "add", "tail" : "(other: Cancelable): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.add", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#add(other:monix.execution.Cancelable):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "+=", "tail" : "(other: Cancelable): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.+=", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#+=(other:monix.execution.Cancelable):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.CompositeCancelable.cancel", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.CompositeCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "withPadding", "tail" : "(initial: Set[Cancelable], ps: PaddingStrategy): CompositeCancelable", "member" : "monix.execution.cancelables.CompositeCancelable.withPadding", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#withPadding(initial:Set[monix.execution.Cancelable],ps:monix.execution.atomic.PaddingStrategy):monix.execution.cancelables.CompositeCancelable", "kind" : "def"}, {"label" : "withPadding", "tail" : "(ps: PaddingStrategy): CompositeCancelable", "member" : "monix.execution.cancelables.CompositeCancelable.withPadding", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#withPadding(ps:monix.execution.atomic.PaddingStrategy):monix.execution.cancelables.CompositeCancelable", "kind" : "def"}, {"label" : "fromSet", "tail" : "(initial: Set[Cancelable]): CompositeCancelable", "member" : "monix.execution.cancelables.CompositeCancelable.fromSet", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#fromSet(initial:Set[monix.execution.Cancelable]):monix.execution.cancelables.CompositeCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(initial: Cancelable*): CompositeCancelable", "member" : "monix.execution.cancelables.CompositeCancelable.apply", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#apply(initial:monix.execution.Cancelable*):monix.execution.cancelables.CompositeCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/CompositeCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.MultiAssignCancelable", "shortDescription" : "Represents a Cancelable whoseunderlying cancelable reference can be swapped for another.", "object" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html", "members_class" : [{"label" : "clear", "tail" : "(): Cancelable", "member" : "monix.execution.cancelables.MultiAssignCancelable.clear", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#clear():monix.execution.Cancelable", "kind" : "def"}, {"label" : ":=", "tail" : "(value: Cancelable): MultiAssignCancelable.this.type", "member" : "monix.execution.cancelables.MultiAssignCancelable.:=", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#:=(value:monix.execution.Cancelable):MultiAssignCancelable.this.type", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.MultiAssignCancelable.cancel", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.MultiAssignCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(s: Cancelable): MultiAssignCancelable", "member" : "monix.execution.cancelables.MultiAssignCancelable.apply", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#apply(s:monix.execution.Cancelable):monix.execution.cancelables.MultiAssignCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): MultiAssignCancelable", "member" : "monix.execution.cancelables.MultiAssignCancelable.apply", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#apply():monix.execution.cancelables.MultiAssignCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/MultiAssignCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.OrderedCancelable", "shortDescription" : "Represents a Cancelable whoseunderlying cancelable reference can be swapped for another andthat has the capability to force ordering of updates.", "object" : "monix\/execution\/cancelables\/OrderedCancelable$.html", "members_class" : [{"label" : "orderedUpdate", "tail" : "(value: Cancelable, order: Long): OrderedCancelable.this.type", "member" : "monix.execution.cancelables.OrderedCancelable.orderedUpdate", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#orderedUpdate(value:monix.execution.Cancelable,order:Long):OrderedCancelable.this.type", "kind" : "def"}, {"label" : ":=", "tail" : "(value: Cancelable): OrderedCancelable.this.type", "member" : "monix.execution.cancelables.OrderedCancelable.:=", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#:=(value:monix.execution.Cancelable):OrderedCancelable.this.type", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.OrderedCancelable.cancel", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "currentOrder", "tail" : "(): Long", "member" : "monix.execution.cancelables.OrderedCancelable.currentOrder", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#currentOrder:Long", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.OrderedCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(s: Cancelable): OrderedCancelable", "member" : "monix.execution.cancelables.OrderedCancelable.apply", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#apply(s:monix.execution.Cancelable):monix.execution.cancelables.OrderedCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): OrderedCancelable", "member" : "monix.execution.cancelables.OrderedCancelable.apply", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#apply():monix.execution.cancelables.OrderedCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/OrderedCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.RefCountCancelable", "shortDescription" : "Represents a Cancelable that only executes the canceling logic when alldependent cancelable objects have been canceled.", "object" : "monix\/execution\/cancelables\/RefCountCancelable$.html", "members_class" : [{"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.RefCountCancelable.cancel", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "acquire", "tail" : "(): Cancelable", "member" : "monix.execution.cancelables.RefCountCancelable.acquire", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#acquire():monix.execution.Cancelable", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.RefCountCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(onCancel: () ⇒ Unit): RefCountCancelable", "member" : "monix.execution.cancelables.RefCountCancelable.apply", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#apply(onCancel:()=>Unit):monix.execution.cancelables.RefCountCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/RefCountCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.SerialCancelable", "shortDescription" : "Represents a monix.execution.Cancelable whose underlying cancelablecan be swapped for another cancelable which causes the previous underlyingcancelable to be canceled.", "object" : "monix\/execution\/cancelables\/SerialCancelable$.html", "members_class" : [{"label" : ":=", "tail" : "(value: Cancelable): SerialCancelable.this.type", "member" : "monix.execution.cancelables.SerialCancelable.:=", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#:=(value:monix.execution.Cancelable):SerialCancelable.this.type", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.SerialCancelable.cancel", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.SerialCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/SerialCancelable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(initial: Cancelable): SerialCancelable", "member" : "monix.execution.cancelables.SerialCancelable.apply", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#apply(initial:monix.execution.Cancelable):monix.execution.cancelables.SerialCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): SerialCancelable", "member" : "monix.execution.cancelables.SerialCancelable.apply", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#apply():monix.execution.cancelables.SerialCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/SerialCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.SingleAssignCancelable", "shortDescription" : "Represents a monix.execution.Cancelable that can be assigned onlyonce to another cancelable reference.", "object" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html", "members_class" : [{"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.SingleAssignCancelable.cancel", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : ":=", "tail" : "(value: Cancelable): SingleAssignCancelable.this.type", "member" : "monix.execution.cancelables.SingleAssignCancelable.:=", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#:=(value:monix.execution.Cancelable):SingleAssignCancelable.this.type", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.SingleAssignCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "plusOne", "tail" : "(guest: Cancelable): SingleAssignCancelable", "member" : "monix.execution.cancelables.SingleAssignCancelable.plusOne", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#plusOne(guest:monix.execution.Cancelable):monix.execution.cancelables.SingleAssignCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): SingleAssignCancelable", "member" : "monix.execution.cancelables.SingleAssignCancelable.apply", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#apply():monix.execution.cancelables.SingleAssignCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/SingleAssignCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.StackedCancelable", "shortDescription" : "Represents a composite of cancelables that are stacked,so you can push a new reference, or pop an existing one andwhen it gets canceled, then the whole stack gets canceled.", "object" : "monix\/execution\/cancelables\/StackedCancelable$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/StackedCancelable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "pop", "tail" : "(): Cancelable", "member" : "monix.execution.cancelables.StackedCancelable.pop", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#pop():monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "push", "tail" : "(value: Cancelable): Unit", "member" : "monix.execution.cancelables.StackedCancelable.push", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#push(value:monix.execution.Cancelable):Unit", "kind" : "abstract def"}, {"label" : "pushList", "tail" : "(list: List[Cancelable]): Unit", "member" : "monix.execution.cancelables.StackedCancelable.pushList", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#pushList(list:List[monix.execution.Cancelable]):Unit", "kind" : "abstract def"}, {"label" : "popAndPush", "tail" : "(value: Cancelable): Cancelable", "member" : "monix.execution.cancelables.StackedCancelable.popAndPush", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#popAndPush(value:monix.execution.Cancelable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "popAndPushList", "tail" : "(list: List[Cancelable]): Cancelable", "member" : "monix.execution.cancelables.StackedCancelable.popAndPushList", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#popAndPushList(list:List[monix.execution.Cancelable]):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.BooleanCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#isCanceled:Boolean", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#cancel():Unit", "kind" : "abstract def"}], "members_object" : [{"label" : "uncancelable", "tail" : ": StackedCancelable", "member" : "monix.execution.cancelables.StackedCancelable.uncancelable", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#uncancelable:monix.execution.cancelables.StackedCancelable", "kind" : "final val"}, {"label" : "alreadyCanceled", "tail" : ": StackedCancelable", "member" : "monix.execution.cancelables.StackedCancelable.alreadyCanceled", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#alreadyCanceled:monix.execution.cancelables.StackedCancelable", "kind" : "final val"}, {"label" : "apply", "tail" : "(initial: List[Cancelable]): StackedCancelable", "member" : "monix.execution.cancelables.StackedCancelable.apply", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#apply(initial:List[monix.execution.Cancelable]):monix.execution.cancelables.StackedCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(initial: Cancelable): StackedCancelable", "member" : "monix.execution.cancelables.StackedCancelable.apply", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#apply(initial:monix.execution.Cancelable):monix.execution.cancelables.StackedCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): StackedCancelable", "member" : "monix.execution.cancelables.StackedCancelable.apply", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#apply():monix.execution.cancelables.StackedCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/StackedCancelable.html", "kind" : "class"}], "monix" : [], "monix.tail.batches" : [{"name" : "monix.tail.batches.ArrayBatch", "shortDescription" : "Batch implementation that wrapsan array, based on ArrayCursor.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) ⇒ R): R", "member" : "monix.tail.batches.ArrayBatch.foldLeft", "link" : "monix\/tail\/batches\/ArrayBatch.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): ArrayBatch[B]", "member" : "monix.tail.batches.ArrayBatch.collect", "link" : "monix\/tail\/batches\/ArrayBatch.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): ArrayBatch[A]", "member" : "monix.tail.batches.ArrayBatch.filter", "link" : "monix\/tail\/batches\/ArrayBatch.html#filter(p:A=>Boolean):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): ArrayBatch[B]", "member" : "monix.tail.batches.ArrayBatch.map", "link" : "monix\/tail\/batches\/ArrayBatch.html#map[B](f:A=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): ArrayBatch[A]", "member" : "monix.tail.batches.ArrayBatch.slice", "link" : "monix\/tail\/batches\/ArrayBatch.html#slice(from:Int,until:Int):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): ArrayBatch[A]", "member" : "monix.tail.batches.ArrayBatch.drop", "link" : "monix\/tail\/batches\/ArrayBatch.html#drop(n:Int):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ArrayBatch[A]", "member" : "monix.tail.batches.ArrayBatch.take", "link" : "monix\/tail\/batches\/ArrayBatch.html#take(n:Int):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "cursor", "tail" : "(): ArrayCursor[A]", "member" : "monix.tail.batches.ArrayBatch.cursor", "link" : "monix\/tail\/batches\/ArrayBatch.html#cursor():monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"member" : "monix.tail.batches.ArrayBatch#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.ArrayBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/ArrayBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/ArrayBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/ArrayBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/ArrayBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/ArrayBatch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/ArrayBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/ArrayBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/ArrayBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/ArrayBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/ArrayBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/ArrayBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/ArrayBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/ArrayBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/ArrayBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/ArrayBatch.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/ArrayBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/ArrayBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/ArrayBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/ArrayBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/ArrayBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.ArrayCursor", "shortDescription" : "BatchCursor type that works over an underlying Array.", "members_class" : [{"label" : "toIterator", "tail" : "(): Iterator[A]", "member" : "monix.tail.batches.ArrayCursor.toIterator", "link" : "monix\/tail\/batches\/ArrayCursor.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toGenerator", "tail" : "(): Batch[A]", "member" : "monix.tail.batches.ArrayCursor.toGenerator", "link" : "monix\/tail\/batches\/ArrayCursor.html#toGenerator:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): ArrayCursor[B]", "member" : "monix.tail.batches.ArrayCursor.collect", "link" : "monix\/tail\/batches\/ArrayCursor.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): ArrayCursor[A]", "member" : "monix.tail.batches.ArrayCursor.filter", "link" : "monix\/tail\/batches\/ArrayCursor.html#filter(p:A=>Boolean):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): ArrayCursor[B]", "member" : "monix.tail.batches.ArrayCursor.map", "link" : "monix\/tail\/batches\/ArrayCursor.html#map[B](f:A=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): ArrayCursor[A]", "member" : "monix.tail.batches.ArrayCursor.slice", "link" : "monix\/tail\/batches\/ArrayCursor.html#slice(from:Int,until:Int):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): ArrayCursor[A]", "member" : "monix.tail.batches.ArrayCursor.drop", "link" : "monix\/tail\/batches\/ArrayCursor.html#drop(n:Int):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ArrayCursor[A]", "member" : "monix.tail.batches.ArrayCursor.take", "link" : "monix\/tail\/batches\/ArrayCursor.html#take(n:Int):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "next", "tail" : "(): A", "member" : "monix.tail.batches.ArrayCursor.next", "link" : "monix\/tail\/batches\/ArrayCursor.html#next():A", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.ArrayCursor.hasNext", "link" : "monix\/tail\/batches\/ArrayCursor.html#hasNext():Boolean", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "monix.tail.batches.ArrayCursor.length", "link" : "monix\/tail\/batches\/ArrayCursor.html#length:Int", "kind" : "def"}, {"label" : "offset", "tail" : "(): Int", "member" : "monix.tail.batches.ArrayCursor.offset", "link" : "monix\/tail\/batches\/ArrayCursor.html#offset:Int", "kind" : "def"}, {"label" : "array", "tail" : "(): Array[A]", "member" : "monix.tail.batches.ArrayCursor.array", "link" : "monix\/tail\/batches\/ArrayCursor.html#array:Array[A]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : ": Int", "member" : "monix.tail.batches.ArrayCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/ArrayCursor.html#recommendedBatchSize:Int", "kind" : "val"}, {"member" : "monix.tail.batches.ArrayCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.ArrayCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.ArrayCursor#<init>", "error" : "unsupported entity"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/ArrayCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/ArrayCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) ⇒ R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/ArrayCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/ArrayCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/ArrayCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/ArrayCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/ArrayCursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/ArrayCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/ArrayCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/ArrayCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/ArrayCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/ArrayCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/ArrayCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/ArrayCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/ArrayCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/ArrayCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/ArrayCursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/ArrayCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/ArrayCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/ArrayCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/ArrayCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/ArrayCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.Batch", "shortDescription" : "The Batch is a BatchCursor factory, similar in spiritwith Scala's Iterable.", "object" : "monix\/tail\/batches\/Batch$.html", "members_class" : [{"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/Batch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/Batch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/Batch.html#toList:List[A]", "kind" : "def"}, {"member" : "monix.tail.batches.Batch#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/Batch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/Batch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/Batch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/Batch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/Batch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/Batch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/Batch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/Batch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/Batch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/Batch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/Batch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/Batch.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/Batch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/Batch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/Batch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/Batch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) ⇒ R): R", "member" : "monix.tail.batches.Batch.foldLeft", "link" : "monix\/tail\/batches\/Batch.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "abstract def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Batch[B]", "member" : "monix.tail.batches.Batch.collect", "link" : "monix\/tail\/batches\/Batch.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.Batch[B]", "kind" : "abstract def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Batch[A]", "member" : "monix.tail.batches.Batch.filter", "link" : "monix\/tail\/batches\/Batch.html#filter(p:A=>Boolean):monix.tail.batches.Batch[A]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Batch[B]", "member" : "monix.tail.batches.Batch.map", "link" : "monix\/tail\/batches\/Batch.html#map[B](f:A=>B):monix.tail.batches.Batch[B]", "kind" : "abstract def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Batch[A]", "member" : "monix.tail.batches.Batch.slice", "link" : "monix\/tail\/batches\/Batch.html#slice(from:Int,until:Int):monix.tail.batches.Batch[A]", "kind" : "abstract def"}, {"label" : "drop", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.Batch.drop", "link" : "monix\/tail\/batches\/Batch.html#drop(n:Int):monix.tail.batches.Batch[A]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.Batch.take", "link" : "monix\/tail\/batches\/Batch.html#take(n:Int):monix.tail.batches.Batch[A]", "kind" : "abstract def"}, {"label" : "cursor", "tail" : "(): BatchCursor[A]", "member" : "monix.tail.batches.Batch.cursor", "link" : "monix\/tail\/batches\/Batch.html#cursor():monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "range", "tail" : "(from: Int, until: Int, step: Int): Batch[Int]", "member" : "monix.tail.batches.Batch.range", "link" : "monix\/tail\/batches\/Batch$.html#range(from:Int,until:Int,step:Int):monix.tail.batches.Batch[Int]", "kind" : "def"}, {"label" : "doubles", "tail" : "(array: Array[Double], offset: Int, length: Int): DoublesBatch", "member" : "monix.tail.batches.Batch.doubles", "link" : "monix\/tail\/batches\/Batch$.html#doubles(array:Array[Double],offset:Int,length:Int):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "doubles", "tail" : "(array: Array[Double]): DoublesBatch", "member" : "monix.tail.batches.Batch.doubles", "link" : "monix\/tail\/batches\/Batch$.html#doubles(array:Array[Double]):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "longs", "tail" : "(array: Array[Long], offset: Int, length: Int): LongsBatch", "member" : "monix.tail.batches.Batch.longs", "link" : "monix\/tail\/batches\/Batch$.html#longs(array:Array[Long],offset:Int,length:Int):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "longs", "tail" : "(array: Array[Long]): LongsBatch", "member" : "monix.tail.batches.Batch.longs", "link" : "monix\/tail\/batches\/Batch$.html#longs(array:Array[Long]):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "integers", "tail" : "(array: Array[Int]): IntegersBatch", "member" : "monix.tail.batches.Batch.integers", "link" : "monix\/tail\/batches\/Batch$.html#integers(array:Array[Int]):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "integers", "tail" : "(array: Array[Int], offset: Int, length: Int): IntegersBatch", "member" : "monix.tail.batches.Batch.integers", "link" : "monix\/tail\/batches\/Batch$.html#integers(array:Array[Int],offset:Int,length:Int):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "chars", "tail" : "(array: Array[Char], offset: Int, length: Int): CharsBatch", "member" : "monix.tail.batches.Batch.chars", "link" : "monix\/tail\/batches\/Batch$.html#chars(array:Array[Char],offset:Int,length:Int):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "chars", "tail" : "(array: Array[Char]): CharsBatch", "member" : "monix.tail.batches.Batch.chars", "link" : "monix\/tail\/batches\/Batch$.html#chars(array:Array[Char]):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "bytes", "tail" : "(array: Array[Byte], offset: Int, length: Int): BytesBatch", "member" : "monix.tail.batches.Batch.bytes", "link" : "monix\/tail\/batches\/Batch$.html#bytes(array:Array[Byte],offset:Int,length:Int):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "bytes", "tail" : "(array: Array[Byte]): BytesBatch", "member" : "monix.tail.batches.Batch.bytes", "link" : "monix\/tail\/batches\/Batch$.html#bytes(array:Array[Byte]):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "booleans", "tail" : "(array: Array[Boolean], offset: Int, length: Int): BooleansBatch", "member" : "monix.tail.batches.Batch.booleans", "link" : "monix\/tail\/batches\/Batch$.html#booleans(array:Array[Boolean],offset:Int,length:Int):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "booleans", "tail" : "(array: Array[Boolean]): BooleansBatch", "member" : "monix.tail.batches.Batch.booleans", "link" : "monix\/tail\/batches\/Batch$.html#booleans(array:Array[Boolean]):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "empty", "tail" : "(): Batch[A]", "member" : "monix.tail.batches.Batch.empty", "link" : "monix\/tail\/batches\/Batch$.html#empty[A]:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromIndexedSeq", "tail" : "(seq: IndexedSeq[A]): Batch[A]", "member" : "monix.tail.batches.Batch.fromIndexedSeq", "link" : "monix\/tail\/batches\/Batch$.html#fromIndexedSeq[A](seq:IndexedSeq[A]):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(seq: Seq[A], recommendedBatchSize: Int): Batch[A]", "member" : "monix.tail.batches.Batch.fromSeq", "link" : "monix\/tail\/batches\/Batch$.html#fromSeq[A](seq:Seq[A],recommendedBatchSize:Int):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(seq: Seq[A]): Batch[A]", "member" : "monix.tail.batches.Batch.fromSeq", "link" : "monix\/tail\/batches\/Batch$.html#fromSeq[A](seq:Seq[A]):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(iter: Iterable[A], recommendedBatchSize: Int): Batch[A]", "member" : "monix.tail.batches.Batch.fromIterable", "link" : "monix\/tail\/batches\/Batch$.html#fromIterable[A](iter:Iterable[A],recommendedBatchSize:Int):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(iter: Iterable[A]): Batch[A]", "member" : "monix.tail.batches.Batch.fromIterable", "link" : "monix\/tail\/batches\/Batch$.html#fromIterable[A](iter:Iterable[A]):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromAnyArray", "tail" : "(array: Array[_]): ArrayBatch[A]", "member" : "monix.tail.batches.Batch.fromAnyArray", "link" : "monix\/tail\/batches\/Batch$.html#fromAnyArray[A](array:Array[_]):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "fromAnyArray", "tail" : "(array: Array[_], offset: Int, length: Int): ArrayBatch[A]", "member" : "monix.tail.batches.Batch.fromAnyArray", "link" : "monix\/tail\/batches\/Batch$.html#fromAnyArray[A](array:Array[_],offset:Int,length:Int):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(array: Array[A], offset: Int, length: Int)(arg0: ClassTag[A]): ArrayBatch[A]", "member" : "monix.tail.batches.Batch.fromArray", "link" : "monix\/tail\/batches\/Batch$.html#fromArray[A](array:Array[A],offset:Int,length:Int)(implicitevidence$3:scala.reflect.ClassTag[A]):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(array: Array[A])(arg0: ClassTag[A]): ArrayBatch[A]", "member" : "monix.tail.batches.Batch.fromArray", "link" : "monix\/tail\/batches\/Batch$.html#fromArray[A](array:Array[A])(implicitevidence$2:scala.reflect.ClassTag[A]):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(elems: A*): Batch[A]", "member" : "monix.tail.batches.Batch.apply", "link" : "monix\/tail\/batches\/Batch$.html#apply[A](elems:A*):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/Batch$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/Batch$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/Batch$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/Batch$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/Batch$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/Batch$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/Batch$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/Batch$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/Batch$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/Batch$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/Batch$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/Batch$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/Batch$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/Batch$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/Batch$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/Batch$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/Batch.html", "kind" : "class"}, {"name" : "monix.tail.batches.BatchCursor", "shortDescription" : "Similar to Java's and Scala's Iterator, the BatchCursor type cancan be used to iterate over the data in a collection, but it cannotbe used to modify the underlying collection.", "object" : "monix\/tail\/batches\/BatchCursor$.html", "members_class" : [{"label" : "toGenerator", "tail" : "(): Batch[A]", "member" : "monix.tail.batches.BatchCursor.toGenerator", "link" : "monix\/tail\/batches\/BatchCursor.html#toGenerator:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/BatchCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/BatchCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) ⇒ R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/BatchCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/BatchCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/BatchCursor.html#isEmpty:Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.BatchCursor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BatchCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BatchCursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BatchCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BatchCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BatchCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BatchCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BatchCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BatchCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BatchCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BatchCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BatchCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BatchCursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BatchCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BatchCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BatchCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BatchCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toIterator", "tail" : "(): Iterator[A]", "member" : "monix.tail.batches.BatchCursor.toIterator", "link" : "monix\/tail\/batches\/BatchCursor.html#toIterator:Iterator[A]", "kind" : "abstract def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): BatchCursor[B]", "member" : "monix.tail.batches.BatchCursor.collect", "link" : "monix\/tail\/batches\/BatchCursor.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.BatchCursor[B]", "kind" : "abstract def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.filter", "link" : "monix\/tail\/batches\/BatchCursor.html#filter(p:A=>Boolean):monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): BatchCursor[B]", "member" : "monix.tail.batches.BatchCursor.map", "link" : "monix\/tail\/batches\/BatchCursor.html#map[B](f:A=>B):monix.tail.batches.BatchCursor[B]", "kind" : "abstract def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.slice", "link" : "monix\/tail\/batches\/BatchCursor.html#slice(from:Int,until:Int):monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}, {"label" : "drop", "tail" : "(n: Int): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.drop", "link" : "monix\/tail\/batches\/BatchCursor.html#drop(n:Int):monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(n: Int): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.take", "link" : "monix\/tail\/batches\/BatchCursor.html#take(n:Int):monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.BatchCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/BatchCursor.html#recommendedBatchSize:Int", "kind" : "abstract def"}, {"label" : "next", "tail" : "(): A", "member" : "monix.tail.batches.BatchCursor.next", "link" : "monix\/tail\/batches\/BatchCursor.html#next():A", "kind" : "abstract def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.hasNext", "link" : "monix\/tail\/batches\/BatchCursor.html#hasNext():Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "continually", "tail" : "(f: ⇒ A): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.continually", "link" : "monix\/tail\/batches\/BatchCursor$.html#continually[A](f:=>A):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "range", "tail" : "(from: Int, until: Int, step: Int): BatchCursor[Int]", "member" : "monix.tail.batches.BatchCursor.range", "link" : "monix\/tail\/batches\/BatchCursor$.html#range(from:Int,until:Int,step:Int):monix.tail.batches.BatchCursor[Int]", "kind" : "def"}, {"label" : "doubles", "tail" : "(array: Array[Double], offset: Int, length: Int): DoublesCursor", "member" : "monix.tail.batches.BatchCursor.doubles", "link" : "monix\/tail\/batches\/BatchCursor$.html#doubles(array:Array[Double],offset:Int,length:Int):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "doubles", "tail" : "(array: Array[Double]): DoublesCursor", "member" : "monix.tail.batches.BatchCursor.doubles", "link" : "monix\/tail\/batches\/BatchCursor$.html#doubles(array:Array[Double]):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "longs", "tail" : "(array: Array[Long], offset: Int, length: Int): LongsCursor", "member" : "monix.tail.batches.BatchCursor.longs", "link" : "monix\/tail\/batches\/BatchCursor$.html#longs(array:Array[Long],offset:Int,length:Int):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "longs", "tail" : "(array: Array[Long]): LongsCursor", "member" : "monix.tail.batches.BatchCursor.longs", "link" : "monix\/tail\/batches\/BatchCursor$.html#longs(array:Array[Long]):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "integers", "tail" : "(array: Array[Int], offset: Int, length: Int): IntegersCursor", "member" : "monix.tail.batches.BatchCursor.integers", "link" : "monix\/tail\/batches\/BatchCursor$.html#integers(array:Array[Int],offset:Int,length:Int):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "integers", "tail" : "(array: Array[Int]): IntegersCursor", "member" : "monix.tail.batches.BatchCursor.integers", "link" : "monix\/tail\/batches\/BatchCursor$.html#integers(array:Array[Int]):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "chars", "tail" : "(array: Array[Char], offset: Int, length: Int): CharsCursor", "member" : "monix.tail.batches.BatchCursor.chars", "link" : "monix\/tail\/batches\/BatchCursor$.html#chars(array:Array[Char],offset:Int,length:Int):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "chars", "tail" : "(array: Array[Char]): CharsCursor", "member" : "monix.tail.batches.BatchCursor.chars", "link" : "monix\/tail\/batches\/BatchCursor$.html#chars(array:Array[Char]):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "bytes", "tail" : "(array: Array[Byte], offset: Int, length: Int): BytesCursor", "member" : "monix.tail.batches.BatchCursor.bytes", "link" : "monix\/tail\/batches\/BatchCursor$.html#bytes(array:Array[Byte],offset:Int,length:Int):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "bytes", "tail" : "(array: Array[Byte]): BytesCursor", "member" : "monix.tail.batches.BatchCursor.bytes", "link" : "monix\/tail\/batches\/BatchCursor$.html#bytes(array:Array[Byte]):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "booleans", "tail" : "(array: Array[Boolean], offset: Int, length: Int): BooleansCursor", "member" : "monix.tail.batches.BatchCursor.booleans", "link" : "monix\/tail\/batches\/BatchCursor$.html#booleans(array:Array[Boolean],offset:Int,length:Int):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "booleans", "tail" : "(array: Array[Boolean]): BooleansCursor", "member" : "monix.tail.batches.BatchCursor.booleans", "link" : "monix\/tail\/batches\/BatchCursor$.html#booleans(array:Array[Boolean]):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "empty", "tail" : "(): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.empty", "link" : "monix\/tail\/batches\/BatchCursor$.html#empty[A]:monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "fromIndexedSeq", "tail" : "(seq: IndexedSeq[A]): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromIndexedSeq", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromIndexedSeq[A](seq:IndexedSeq[A]):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(seq: Seq[A], recommendedBatchSize: Int): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromSeq", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromSeq[A](seq:Seq[A],recommendedBatchSize:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(seq: Seq[A]): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromSeq", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromSeq[A](seq:Seq[A]):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "fromAnyArray", "tail" : "(array: Array[_]): ArrayCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromAnyArray", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromAnyArray[A](array:Array[_]):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "fromAnyArray", "tail" : "(array: Array[_], offset: Int, length: Int): ArrayCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromAnyArray", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromAnyArray[A](array:Array[_],offset:Int,length:Int):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(array: Array[A], offset: Int, length: Int)(arg0: ClassTag[A]): ArrayCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromArray", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromArray[A](array:Array[A],offset:Int,length:Int)(implicitevidence$3:scala.reflect.ClassTag[A]):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(array: Array[A])(arg0: ClassTag[A]): ArrayCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromArray", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromArray[A](array:Array[A])(implicitevidence$2:scala.reflect.ClassTag[A]):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(iter: Iterator[A], recommendedBatchSize: Int): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromIterator", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromIterator[A](iter:Iterator[A],recommendedBatchSize:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(iter: Iterator[A]): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromIterator", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromIterator[A](iter:Iterator[A]):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(elems: A*): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.apply", "link" : "monix\/tail\/batches\/BatchCursor$.html#apply[A](elems:A*):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BatchCursor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BatchCursor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BatchCursor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BatchCursor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BatchCursor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BatchCursor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BatchCursor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BatchCursor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BatchCursor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BatchCursor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BatchCursor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BatchCursor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BatchCursor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BatchCursor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BatchCursor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BatchCursor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/BatchCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.BooleansBatch", "shortDescription" : "Batch implementation specialized for Boolean.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Boolean) ⇒ R): R", "member" : "monix.tail.batches.BooleansBatch.foldLeft", "link" : "monix\/tail\/batches\/BooleansBatch.html#foldLeft[R](initial:R)(op:(R,Boolean)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Boolean, B]): ArrayBatch[B]", "member" : "monix.tail.batches.BooleansBatch.collect", "link" : "monix\/tail\/batches\/BooleansBatch.html#collect[B](pf:PartialFunction[Boolean,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Boolean) ⇒ B): ArrayBatch[B]", "member" : "monix.tail.batches.BooleansBatch.map", "link" : "monix\/tail\/batches\/BooleansBatch.html#map[B](f:Boolean=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Boolean) ⇒ Boolean): BooleansBatch", "member" : "monix.tail.batches.BooleansBatch.filter", "link" : "monix\/tail\/batches\/BooleansBatch.html#filter(p:Boolean=>Boolean):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BooleansBatch", "member" : "monix.tail.batches.BooleansBatch.slice", "link" : "monix\/tail\/batches\/BooleansBatch.html#slice(from:Int,until:Int):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BooleansBatch", "member" : "monix.tail.batches.BooleansBatch.drop", "link" : "monix\/tail\/batches\/BooleansBatch.html#drop(n:Int):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BooleansBatch", "member" : "monix.tail.batches.BooleansBatch.take", "link" : "monix\/tail\/batches\/BooleansBatch.html#take(n:Int):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): BooleansCursor", "member" : "monix.tail.batches.BooleansBatch.cursor", "link" : "monix\/tail\/batches\/BooleansBatch.html#cursor():monix.tail.batches.BooleansCursor", "kind" : "def"}, {"member" : "monix.tail.batches.BooleansBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Boolean]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/BooleansBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/BooleansBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Boolean]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/BooleansBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BooleansBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BooleansBatch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BooleansBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BooleansBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BooleansBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BooleansBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BooleansBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BooleansBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BooleansBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BooleansBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BooleansBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BooleansBatch.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BooleansBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BooleansBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BooleansBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BooleansBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/BooleansBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.BooleansCursor", "shortDescription" : "BatchCursor implementation specialized for Boolean.", "members_class" : [{"label" : "filter", "tail" : "(p: (Boolean) ⇒ Boolean): BooleansCursor", "member" : "monix.tail.batches.BooleansCursor.filter", "link" : "monix\/tail\/batches\/BooleansCursor.html#filter(p:Boolean=>Boolean):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BooleansCursor", "member" : "monix.tail.batches.BooleansCursor.slice", "link" : "monix\/tail\/batches\/BooleansCursor.html#slice(from:Int,until:Int):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BooleansCursor", "member" : "monix.tail.batches.BooleansCursor.drop", "link" : "monix\/tail\/batches\/BooleansCursor.html#drop(n:Int):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BooleansCursor", "member" : "monix.tail.batches.BooleansCursor.take", "link" : "monix\/tail\/batches\/BooleansCursor.html#take(n:Int):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Boolean, B]): ArrayCursor[B]", "member" : "monix.tail.batches.BooleansCursor.collect", "link" : "monix\/tail\/batches\/BooleansCursor.html#collect[B](pf:PartialFunction[Boolean,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Boolean) ⇒ B): ArrayCursor[B]", "member" : "monix.tail.batches.BooleansCursor.map", "link" : "monix\/tail\/batches\/BooleansCursor.html#map[B](f:Boolean=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Boolean]", "member" : "monix.tail.batches.BooleansCursor.toIterator", "link" : "monix\/tail\/batches\/BooleansCursor.html#toIterator:Iterator[Boolean]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.BooleansCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/BooleansCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Boolean", "member" : "monix.tail.batches.BooleansCursor.next", "link" : "monix\/tail\/batches\/BooleansCursor.html#next():Boolean", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.BooleansCursor.hasNext", "link" : "monix\/tail\/batches\/BooleansCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.BooleansCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.BooleansCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.BooleansCursor#<init>", "error" : "unsupported entity"}, {"label" : "toGenerator", "tail" : "(): Batch[Boolean]", "member" : "monix.tail.batches.BatchCursor.toGenerator", "link" : "monix\/tail\/batches\/BooleansCursor.html#toGenerator:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/BooleansCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Boolean]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/BooleansCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Boolean) ⇒ R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/BooleansCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/BooleansCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/BooleansCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BooleansCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BooleansCursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BooleansCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BooleansCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BooleansCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BooleansCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BooleansCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BooleansCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BooleansCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BooleansCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BooleansCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BooleansCursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BooleansCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BooleansCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BooleansCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BooleansCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/BooleansCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.BytesBatch", "shortDescription" : "Batch implementation specialized for Byte.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Byte) ⇒ R): R", "member" : "monix.tail.batches.BytesBatch.foldLeft", "link" : "monix\/tail\/batches\/BytesBatch.html#foldLeft[R](initial:R)(op:(R,Byte)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Byte, B]): ArrayBatch[B]", "member" : "monix.tail.batches.BytesBatch.collect", "link" : "monix\/tail\/batches\/BytesBatch.html#collect[B](pf:PartialFunction[Byte,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Byte) ⇒ B): ArrayBatch[B]", "member" : "monix.tail.batches.BytesBatch.map", "link" : "monix\/tail\/batches\/BytesBatch.html#map[B](f:Byte=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Byte) ⇒ Boolean): BytesBatch", "member" : "monix.tail.batches.BytesBatch.filter", "link" : "monix\/tail\/batches\/BytesBatch.html#filter(p:Byte=>Boolean):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BytesBatch", "member" : "monix.tail.batches.BytesBatch.slice", "link" : "monix\/tail\/batches\/BytesBatch.html#slice(from:Int,until:Int):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BytesBatch", "member" : "monix.tail.batches.BytesBatch.drop", "link" : "monix\/tail\/batches\/BytesBatch.html#drop(n:Int):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BytesBatch", "member" : "monix.tail.batches.BytesBatch.take", "link" : "monix\/tail\/batches\/BytesBatch.html#take(n:Int):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): BytesCursor", "member" : "monix.tail.batches.BytesBatch.cursor", "link" : "monix\/tail\/batches\/BytesBatch.html#cursor():monix.tail.batches.BytesCursor", "kind" : "def"}, {"member" : "monix.tail.batches.BytesBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Byte]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/BytesBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/BytesBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Byte]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/BytesBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BytesBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BytesBatch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BytesBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BytesBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BytesBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BytesBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BytesBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BytesBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BytesBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BytesBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BytesBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BytesBatch.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BytesBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BytesBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BytesBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BytesBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/BytesBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.BytesCursor", "shortDescription" : "BatchCursor implementation specialized for Byte.", "members_class" : [{"label" : "filter", "tail" : "(p: (Byte) ⇒ Boolean): BytesCursor", "member" : "monix.tail.batches.BytesCursor.filter", "link" : "monix\/tail\/batches\/BytesCursor.html#filter(p:Byte=>Boolean):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BytesCursor", "member" : "monix.tail.batches.BytesCursor.slice", "link" : "monix\/tail\/batches\/BytesCursor.html#slice(from:Int,until:Int):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BytesCursor", "member" : "monix.tail.batches.BytesCursor.drop", "link" : "monix\/tail\/batches\/BytesCursor.html#drop(n:Int):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BytesCursor", "member" : "monix.tail.batches.BytesCursor.take", "link" : "monix\/tail\/batches\/BytesCursor.html#take(n:Int):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Byte, B]): ArrayCursor[B]", "member" : "monix.tail.batches.BytesCursor.collect", "link" : "monix\/tail\/batches\/BytesCursor.html#collect[B](pf:PartialFunction[Byte,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Byte) ⇒ B): ArrayCursor[B]", "member" : "monix.tail.batches.BytesCursor.map", "link" : "monix\/tail\/batches\/BytesCursor.html#map[B](f:Byte=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Byte]", "member" : "monix.tail.batches.BytesCursor.toIterator", "link" : "monix\/tail\/batches\/BytesCursor.html#toIterator:Iterator[Byte]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.BytesCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/BytesCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Byte", "member" : "monix.tail.batches.BytesCursor.next", "link" : "monix\/tail\/batches\/BytesCursor.html#next():Byte", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.BytesCursor.hasNext", "link" : "monix\/tail\/batches\/BytesCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.BytesCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.BytesCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.BytesCursor#<init>", "error" : "unsupported entity"}, {"label" : "toGenerator", "tail" : "(): Batch[Byte]", "member" : "monix.tail.batches.BatchCursor.toGenerator", "link" : "monix\/tail\/batches\/BytesCursor.html#toGenerator:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/BytesCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Byte]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/BytesCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Byte) ⇒ R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/BytesCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/BytesCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/BytesCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BytesCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BytesCursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BytesCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BytesCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BytesCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BytesCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BytesCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BytesCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BytesCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BytesCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BytesCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BytesCursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BytesCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BytesCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BytesCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BytesCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/BytesCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.CharsBatch", "shortDescription" : "Batch implementation specialized for Char.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Char) ⇒ R): R", "member" : "monix.tail.batches.CharsBatch.foldLeft", "link" : "monix\/tail\/batches\/CharsBatch.html#foldLeft[R](initial:R)(op:(R,Char)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Char, B]): ArrayBatch[B]", "member" : "monix.tail.batches.CharsBatch.collect", "link" : "monix\/tail\/batches\/CharsBatch.html#collect[B](pf:PartialFunction[Char,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Char) ⇒ B): ArrayBatch[B]", "member" : "monix.tail.batches.CharsBatch.map", "link" : "monix\/tail\/batches\/CharsBatch.html#map[B](f:Char=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Char) ⇒ Boolean): CharsBatch", "member" : "monix.tail.batches.CharsBatch.filter", "link" : "monix\/tail\/batches\/CharsBatch.html#filter(p:Char=>Boolean):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): CharsBatch", "member" : "monix.tail.batches.CharsBatch.slice", "link" : "monix\/tail\/batches\/CharsBatch.html#slice(from:Int,until:Int):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): CharsBatch", "member" : "monix.tail.batches.CharsBatch.drop", "link" : "monix\/tail\/batches\/CharsBatch.html#drop(n:Int):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): CharsBatch", "member" : "monix.tail.batches.CharsBatch.take", "link" : "monix\/tail\/batches\/CharsBatch.html#take(n:Int):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): CharsCursor", "member" : "monix.tail.batches.CharsBatch.cursor", "link" : "monix\/tail\/batches\/CharsBatch.html#cursor():monix.tail.batches.CharsCursor", "kind" : "def"}, {"member" : "monix.tail.batches.CharsBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Char]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/CharsBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/CharsBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Char]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/CharsBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/CharsBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/CharsBatch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/CharsBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/CharsBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/CharsBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/CharsBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/CharsBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/CharsBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/CharsBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/CharsBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/CharsBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/CharsBatch.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/CharsBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/CharsBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/CharsBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/CharsBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/CharsBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.CharsCursor", "shortDescription" : "BatchCursor implementation specialized for Char.", "members_class" : [{"label" : "filter", "tail" : "(p: (Char) ⇒ Boolean): CharsCursor", "member" : "monix.tail.batches.CharsCursor.filter", "link" : "monix\/tail\/batches\/CharsCursor.html#filter(p:Char=>Boolean):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): CharsCursor", "member" : "monix.tail.batches.CharsCursor.slice", "link" : "monix\/tail\/batches\/CharsCursor.html#slice(from:Int,until:Int):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): CharsCursor", "member" : "monix.tail.batches.CharsCursor.drop", "link" : "monix\/tail\/batches\/CharsCursor.html#drop(n:Int):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): CharsCursor", "member" : "monix.tail.batches.CharsCursor.take", "link" : "monix\/tail\/batches\/CharsCursor.html#take(n:Int):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Char, B]): ArrayCursor[B]", "member" : "monix.tail.batches.CharsCursor.collect", "link" : "monix\/tail\/batches\/CharsCursor.html#collect[B](pf:PartialFunction[Char,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Char) ⇒ B): ArrayCursor[B]", "member" : "monix.tail.batches.CharsCursor.map", "link" : "monix\/tail\/batches\/CharsCursor.html#map[B](f:Char=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Char]", "member" : "monix.tail.batches.CharsCursor.toIterator", "link" : "monix\/tail\/batches\/CharsCursor.html#toIterator:Iterator[Char]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.CharsCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/CharsCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Char", "member" : "monix.tail.batches.CharsCursor.next", "link" : "monix\/tail\/batches\/CharsCursor.html#next():Char", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.CharsCursor.hasNext", "link" : "monix\/tail\/batches\/CharsCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.CharsCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.CharsCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.CharsCursor#<init>", "error" : "unsupported entity"}, {"label" : "toGenerator", "tail" : "(): Batch[Char]", "member" : "monix.tail.batches.BatchCursor.toGenerator", "link" : "monix\/tail\/batches\/CharsCursor.html#toGenerator:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/CharsCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Char]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/CharsCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Char) ⇒ R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/CharsCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/CharsCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/CharsCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/CharsCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/CharsCursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/CharsCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/CharsCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/CharsCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/CharsCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/CharsCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/CharsCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/CharsCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/CharsCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/CharsCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/CharsCursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/CharsCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/CharsCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/CharsCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/CharsCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/CharsCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.DoublesBatch", "shortDescription" : "Batch implementation specialized for Double.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Double) ⇒ R): R", "member" : "monix.tail.batches.DoublesBatch.foldLeft", "link" : "monix\/tail\/batches\/DoublesBatch.html#foldLeft[R](initial:R)(op:(R,Double)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Double, B]): ArrayBatch[B]", "member" : "monix.tail.batches.DoublesBatch.collect", "link" : "monix\/tail\/batches\/DoublesBatch.html#collect[B](pf:PartialFunction[Double,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Double) ⇒ B): ArrayBatch[B]", "member" : "monix.tail.batches.DoublesBatch.map", "link" : "monix\/tail\/batches\/DoublesBatch.html#map[B](f:Double=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Double) ⇒ Boolean): DoublesBatch", "member" : "monix.tail.batches.DoublesBatch.filter", "link" : "monix\/tail\/batches\/DoublesBatch.html#filter(p:Double=>Boolean):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): DoublesBatch", "member" : "monix.tail.batches.DoublesBatch.slice", "link" : "monix\/tail\/batches\/DoublesBatch.html#slice(from:Int,until:Int):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): DoublesBatch", "member" : "monix.tail.batches.DoublesBatch.drop", "link" : "monix\/tail\/batches\/DoublesBatch.html#drop(n:Int):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): DoublesBatch", "member" : "monix.tail.batches.DoublesBatch.take", "link" : "monix\/tail\/batches\/DoublesBatch.html#take(n:Int):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): DoublesCursor", "member" : "monix.tail.batches.DoublesBatch.cursor", "link" : "monix\/tail\/batches\/DoublesBatch.html#cursor():monix.tail.batches.DoublesCursor", "kind" : "def"}, {"member" : "monix.tail.batches.DoublesBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Double]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/DoublesBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/DoublesBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Double]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/DoublesBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/DoublesBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/DoublesBatch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/DoublesBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/DoublesBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/DoublesBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/DoublesBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/DoublesBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/DoublesBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/DoublesBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/DoublesBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/DoublesBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/DoublesBatch.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/DoublesBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/DoublesBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/DoublesBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/DoublesBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/DoublesBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.DoublesCursor", "shortDescription" : "BatchCursor implementation specialized for Double.", "members_class" : [{"label" : "filter", "tail" : "(p: (Double) ⇒ Boolean): DoublesCursor", "member" : "monix.tail.batches.DoublesCursor.filter", "link" : "monix\/tail\/batches\/DoublesCursor.html#filter(p:Double=>Boolean):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): DoublesCursor", "member" : "monix.tail.batches.DoublesCursor.slice", "link" : "monix\/tail\/batches\/DoublesCursor.html#slice(from:Int,until:Int):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): DoublesCursor", "member" : "monix.tail.batches.DoublesCursor.drop", "link" : "monix\/tail\/batches\/DoublesCursor.html#drop(n:Int):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): DoublesCursor", "member" : "monix.tail.batches.DoublesCursor.take", "link" : "monix\/tail\/batches\/DoublesCursor.html#take(n:Int):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Double, B]): ArrayCursor[B]", "member" : "monix.tail.batches.DoublesCursor.collect", "link" : "monix\/tail\/batches\/DoublesCursor.html#collect[B](pf:PartialFunction[Double,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Double) ⇒ B): ArrayCursor[B]", "member" : "monix.tail.batches.DoublesCursor.map", "link" : "monix\/tail\/batches\/DoublesCursor.html#map[B](f:Double=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Double]", "member" : "monix.tail.batches.DoublesCursor.toIterator", "link" : "monix\/tail\/batches\/DoublesCursor.html#toIterator:Iterator[Double]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.DoublesCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/DoublesCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Double", "member" : "monix.tail.batches.DoublesCursor.next", "link" : "monix\/tail\/batches\/DoublesCursor.html#next():Double", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.DoublesCursor.hasNext", "link" : "monix\/tail\/batches\/DoublesCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.DoublesCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.DoublesCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.DoublesCursor#<init>", "error" : "unsupported entity"}, {"label" : "toGenerator", "tail" : "(): Batch[Double]", "member" : "monix.tail.batches.BatchCursor.toGenerator", "link" : "monix\/tail\/batches\/DoublesCursor.html#toGenerator:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/DoublesCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Double]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/DoublesCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Double) ⇒ R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/DoublesCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/DoublesCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/DoublesCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/DoublesCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/DoublesCursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/DoublesCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/DoublesCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/DoublesCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/DoublesCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/DoublesCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/DoublesCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/DoublesCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/DoublesCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/DoublesCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/DoublesCursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/DoublesCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/DoublesCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/DoublesCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/DoublesCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/DoublesCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.EmptyBatch", "shortDescription" : "Reusable Batch implementationthat's always empty.", "object" : "monix\/tail\/batches\/EmptyBatch$.html", "members_object" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Nothing) ⇒ R): R", "member" : "monix.tail.batches.EmptyBatch.foldLeft", "link" : "monix\/tail\/batches\/EmptyBatch$.html#foldLeft[R](initial:R)(op:(R,Nothing)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Nothing, B]): Batch[B]", "member" : "monix.tail.batches.EmptyBatch.collect", "link" : "monix\/tail\/batches\/EmptyBatch$.html#collect[B](pf:PartialFunction[Nothing,B]):monix.tail.batches.Batch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Nothing) ⇒ Boolean): Batch[Nothing]", "member" : "monix.tail.batches.EmptyBatch.filter", "link" : "monix\/tail\/batches\/EmptyBatch$.html#filter(p:Nothing=>Boolean):monix.tail.batches.Batch[Nothing]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Nothing) ⇒ B): Batch[B]", "member" : "monix.tail.batches.EmptyBatch.map", "link" : "monix\/tail\/batches\/EmptyBatch$.html#map[B](f:Nothing=>B):monix.tail.batches.Batch[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Batch[Nothing]", "member" : "monix.tail.batches.EmptyBatch.slice", "link" : "monix\/tail\/batches\/EmptyBatch$.html#slice(from:Int,until:Int):monix.tail.batches.Batch[Nothing]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Batch[Nothing]", "member" : "monix.tail.batches.EmptyBatch.drop", "link" : "monix\/tail\/batches\/EmptyBatch$.html#drop(n:Int):monix.tail.batches.Batch[Nothing]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Batch[Nothing]", "member" : "monix.tail.batches.EmptyBatch.take", "link" : "monix\/tail\/batches\/EmptyBatch$.html#take(n:Int):monix.tail.batches.Batch[Nothing]", "kind" : "def"}, {"label" : "cursor", "tail" : "(): EmptyCursor.type", "member" : "monix.tail.batches.EmptyBatch.cursor", "link" : "monix\/tail\/batches\/EmptyBatch$.html#cursor():monix.tail.batches.EmptyCursor.type", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Nothing]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/EmptyBatch$.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/EmptyBatch$.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Nothing]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/EmptyBatch$.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/EmptyBatch$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/EmptyBatch$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/EmptyBatch$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/EmptyBatch$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/EmptyBatch$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/EmptyBatch$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/EmptyBatch$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyBatch$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyBatch$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyBatch$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/EmptyBatch$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/EmptyBatch$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/EmptyBatch$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/EmptyBatch$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/EmptyBatch$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/EmptyBatch$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/EmptyBatch$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/EmptyBatch$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/EmptyBatch$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.tail.batches.EmptyCursor", "shortDescription" : "BatchCursor implementation that's always empty.", "object" : "monix\/tail\/batches\/EmptyCursor$.html", "members_object" : [{"label" : "slice", "tail" : "(from: Int, until: Int): BatchCursor[Nothing]", "member" : "monix.tail.batches.EmptyCursor.slice", "link" : "monix\/tail\/batches\/EmptyCursor$.html#slice(from:Int,until:Int):monix.tail.batches.BatchCursor[Nothing]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Nothing, B]): BatchCursor[B]", "member" : "monix.tail.batches.EmptyCursor.collect", "link" : "monix\/tail\/batches\/EmptyCursor$.html#collect[B](pf:PartialFunction[Nothing,B]):monix.tail.batches.BatchCursor[B]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (Nothing) ⇒ Boolean): BatchCursor[Nothing]", "member" : "monix.tail.batches.EmptyCursor.filter", "link" : "monix\/tail\/batches\/EmptyCursor$.html#filter(p:Nothing=>Boolean):monix.tail.batches.BatchCursor[Nothing]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (Nothing) ⇒ B): BatchCursor[B]", "member" : "monix.tail.batches.EmptyCursor.map", "link" : "monix\/tail\/batches\/EmptyCursor$.html#map[B](f:Nothing=>B):monix.tail.batches.BatchCursor[B]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): BatchCursor[Nothing]", "member" : "monix.tail.batches.EmptyCursor.drop", "link" : "monix\/tail\/batches\/EmptyCursor$.html#drop(n:Int):monix.tail.batches.BatchCursor[Nothing]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Int): BatchCursor[Nothing]", "member" : "monix.tail.batches.EmptyCursor.take", "link" : "monix\/tail\/batches\/EmptyCursor$.html#take(n:Int):monix.tail.batches.BatchCursor[Nothing]", "kind" : "final def"}, {"label" : "toIterator", "tail" : "(): Iterator[Nothing]", "member" : "monix.tail.batches.EmptyCursor.toIterator", "link" : "monix\/tail\/batches\/EmptyCursor$.html#toIterator:Iterator[Nothing]", "kind" : "def"}, {"label" : "next", "tail" : "(): Nothing", "member" : "monix.tail.batches.EmptyCursor.next", "link" : "monix\/tail\/batches\/EmptyCursor$.html#next():Nothing", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.EmptyCursor.hasNext", "link" : "monix\/tail\/batches\/EmptyCursor$.html#hasNext():Boolean", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.EmptyCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/EmptyCursor$.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "toGenerator", "tail" : "(): Batch[Nothing]", "member" : "monix.tail.batches.BatchCursor.toGenerator", "link" : "monix\/tail\/batches\/EmptyCursor$.html#toGenerator:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/EmptyCursor$.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Nothing]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/EmptyCursor$.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Nothing) ⇒ R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/EmptyCursor$.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/EmptyCursor$.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/EmptyCursor$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/EmptyCursor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/EmptyCursor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/EmptyCursor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/EmptyCursor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/EmptyCursor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/EmptyCursor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/EmptyCursor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyCursor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyCursor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyCursor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/EmptyCursor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/EmptyCursor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/EmptyCursor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/EmptyCursor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/EmptyCursor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/EmptyCursor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/EmptyCursor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/EmptyCursor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/EmptyCursor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.tail.batches.GenericBatch", "shortDescription" : "Reusable Batch base class that canbe used for implementing generators that simply modify their underlyingcursor reference.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) ⇒ R): R", "member" : "monix.tail.batches.GenericBatch.foldLeft", "link" : "monix\/tail\/batches\/GenericBatch.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Batch[B]", "member" : "monix.tail.batches.GenericBatch.collect", "link" : "monix\/tail\/batches\/GenericBatch.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.Batch[B]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Batch[A]", "member" : "monix.tail.batches.GenericBatch.filter", "link" : "monix\/tail\/batches\/GenericBatch.html#filter(p:A=>Boolean):monix.tail.batches.Batch[A]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Batch[B]", "member" : "monix.tail.batches.GenericBatch.map", "link" : "monix\/tail\/batches\/GenericBatch.html#map[B](f:A=>B):monix.tail.batches.Batch[B]", "kind" : "final def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Batch[A]", "member" : "monix.tail.batches.GenericBatch.slice", "link" : "monix\/tail\/batches\/GenericBatch.html#slice(from:Int,until:Int):monix.tail.batches.Batch[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.GenericBatch.drop", "link" : "monix\/tail\/batches\/GenericBatch.html#drop(n:Int):monix.tail.batches.Batch[A]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.GenericBatch.take", "link" : "monix\/tail\/batches\/GenericBatch.html#take(n:Int):monix.tail.batches.Batch[A]", "kind" : "final def"}, {"label" : "transform", "tail" : "(f: (BatchCursor[A]) ⇒ BatchCursor[B]): Batch[B]", "member" : "monix.tail.batches.GenericBatch.transform", "link" : "monix\/tail\/batches\/GenericBatch.html#transform[B](f:monix.tail.batches.BatchCursor[A]=>monix.tail.batches.BatchCursor[B]):monix.tail.batches.Batch[B]", "kind" : "def"}, {"member" : "monix.tail.batches.GenericBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/GenericBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/GenericBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/GenericBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/GenericBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/GenericBatch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/GenericBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/GenericBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/GenericBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/GenericBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/GenericBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/GenericBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/GenericBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/GenericBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/GenericBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/GenericBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/GenericBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/GenericBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/GenericBatch.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/GenericBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/GenericBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/GenericBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/GenericBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cursor", "tail" : "(): BatchCursor[A]", "member" : "monix.tail.batches.Batch.cursor", "link" : "monix\/tail\/batches\/GenericBatch.html#cursor():monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}], "class" : "monix\/tail\/batches\/GenericBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.IntegersBatch", "shortDescription" : "Batch implementation specialized for Int.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Int) ⇒ R): R", "member" : "monix.tail.batches.IntegersBatch.foldLeft", "link" : "monix\/tail\/batches\/IntegersBatch.html#foldLeft[R](initial:R)(op:(R,Int)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Int, B]): ArrayBatch[B]", "member" : "monix.tail.batches.IntegersBatch.collect", "link" : "monix\/tail\/batches\/IntegersBatch.html#collect[B](pf:PartialFunction[Int,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Int) ⇒ B): ArrayBatch[B]", "member" : "monix.tail.batches.IntegersBatch.map", "link" : "monix\/tail\/batches\/IntegersBatch.html#map[B](f:Int=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Int) ⇒ Boolean): IntegersBatch", "member" : "monix.tail.batches.IntegersBatch.filter", "link" : "monix\/tail\/batches\/IntegersBatch.html#filter(p:Int=>Boolean):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): IntegersBatch", "member" : "monix.tail.batches.IntegersBatch.slice", "link" : "monix\/tail\/batches\/IntegersBatch.html#slice(from:Int,until:Int):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): IntegersBatch", "member" : "monix.tail.batches.IntegersBatch.drop", "link" : "monix\/tail\/batches\/IntegersBatch.html#drop(n:Int):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): IntegersBatch", "member" : "monix.tail.batches.IntegersBatch.take", "link" : "monix\/tail\/batches\/IntegersBatch.html#take(n:Int):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): IntegersCursor", "member" : "monix.tail.batches.IntegersBatch.cursor", "link" : "monix\/tail\/batches\/IntegersBatch.html#cursor():monix.tail.batches.IntegersCursor", "kind" : "def"}, {"member" : "monix.tail.batches.IntegersBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Int]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/IntegersBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/IntegersBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Int]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/IntegersBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/IntegersBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/IntegersBatch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/IntegersBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/IntegersBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/IntegersBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/IntegersBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/IntegersBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/IntegersBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/IntegersBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/IntegersBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/IntegersBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/IntegersBatch.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/IntegersBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/IntegersBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/IntegersBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/IntegersBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/IntegersBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.IntegersCursor", "shortDescription" : "BatchCursor implementation specialized for Int.", "members_class" : [{"label" : "filter", "tail" : "(p: (Int) ⇒ Boolean): IntegersCursor", "member" : "monix.tail.batches.IntegersCursor.filter", "link" : "monix\/tail\/batches\/IntegersCursor.html#filter(p:Int=>Boolean):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): IntegersCursor", "member" : "monix.tail.batches.IntegersCursor.slice", "link" : "monix\/tail\/batches\/IntegersCursor.html#slice(from:Int,until:Int):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): IntegersCursor", "member" : "monix.tail.batches.IntegersCursor.drop", "link" : "monix\/tail\/batches\/IntegersCursor.html#drop(n:Int):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): IntegersCursor", "member" : "monix.tail.batches.IntegersCursor.take", "link" : "monix\/tail\/batches\/IntegersCursor.html#take(n:Int):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Int, B]): ArrayCursor[B]", "member" : "monix.tail.batches.IntegersCursor.collect", "link" : "monix\/tail\/batches\/IntegersCursor.html#collect[B](pf:PartialFunction[Int,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Int) ⇒ B): ArrayCursor[B]", "member" : "monix.tail.batches.IntegersCursor.map", "link" : "monix\/tail\/batches\/IntegersCursor.html#map[B](f:Int=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Int]", "member" : "monix.tail.batches.IntegersCursor.toIterator", "link" : "monix\/tail\/batches\/IntegersCursor.html#toIterator:Iterator[Int]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.IntegersCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/IntegersCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Int", "member" : "monix.tail.batches.IntegersCursor.next", "link" : "monix\/tail\/batches\/IntegersCursor.html#next():Int", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.IntegersCursor.hasNext", "link" : "monix\/tail\/batches\/IntegersCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.IntegersCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.IntegersCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.IntegersCursor#<init>", "error" : "unsupported entity"}, {"label" : "toGenerator", "tail" : "(): Batch[Int]", "member" : "monix.tail.batches.BatchCursor.toGenerator", "link" : "monix\/tail\/batches\/IntegersCursor.html#toGenerator:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/IntegersCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Int]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/IntegersCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Int) ⇒ R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/IntegersCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/IntegersCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/IntegersCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/IntegersCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/IntegersCursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/IntegersCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/IntegersCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/IntegersCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/IntegersCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/IntegersCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/IntegersCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/IntegersCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/IntegersCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/IntegersCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/IntegersCursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/IntegersCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/IntegersCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/IntegersCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/IntegersCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/IntegersCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.IteratorCursor", "shortDescription" : "BatchCursor type that works over anunderlying Iterator.", "members_class" : [{"label" : "toIterator", "tail" : "(): Iterator[A]", "member" : "monix.tail.batches.IteratorCursor.toIterator", "link" : "monix\/tail\/batches\/IteratorCursor.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): BatchCursor[B]", "member" : "monix.tail.batches.IteratorCursor.collect", "link" : "monix\/tail\/batches\/IteratorCursor.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.BatchCursor[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): BatchCursor[A]", "member" : "monix.tail.batches.IteratorCursor.filter", "link" : "monix\/tail\/batches\/IteratorCursor.html#filter(p:A=>Boolean):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): BatchCursor[B]", "member" : "monix.tail.batches.IteratorCursor.map", "link" : "monix\/tail\/batches\/IteratorCursor.html#map[B](f:A=>B):monix.tail.batches.BatchCursor[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BatchCursor[A]", "member" : "monix.tail.batches.IteratorCursor.slice", "link" : "monix\/tail\/batches\/IteratorCursor.html#slice(from:Int,until:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BatchCursor[A]", "member" : "monix.tail.batches.IteratorCursor.drop", "link" : "monix\/tail\/batches\/IteratorCursor.html#drop(n:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BatchCursor[A]", "member" : "monix.tail.batches.IteratorCursor.take", "link" : "monix\/tail\/batches\/IteratorCursor.html#take(n:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "next", "tail" : "(): A", "member" : "monix.tail.batches.IteratorCursor.next", "link" : "monix\/tail\/batches\/IteratorCursor.html#next():A", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.IteratorCursor.hasNext", "link" : "monix\/tail\/batches\/IteratorCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.IteratorCursor#<init>", "error" : "unsupported entity"}, {"label" : "recommendedBatchSize", "tail" : ": Int", "member" : "monix.tail.batches.IteratorCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/IteratorCursor.html#recommendedBatchSize:Int", "kind" : "val"}, {"label" : "toGenerator", "tail" : "(): Batch[A]", "member" : "monix.tail.batches.BatchCursor.toGenerator", "link" : "monix\/tail\/batches\/IteratorCursor.html#toGenerator:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/IteratorCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/IteratorCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) ⇒ R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/IteratorCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/IteratorCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/IteratorCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/IteratorCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/IteratorCursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/IteratorCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/IteratorCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/IteratorCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/IteratorCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/IteratorCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IteratorCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IteratorCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IteratorCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/IteratorCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/IteratorCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/IteratorCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/IteratorCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/IteratorCursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/IteratorCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/IteratorCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/IteratorCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/IteratorCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/IteratorCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.LongsBatch", "shortDescription" : "Batch implementation specialized for Long.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Long) ⇒ R): R", "member" : "monix.tail.batches.LongsBatch.foldLeft", "link" : "monix\/tail\/batches\/LongsBatch.html#foldLeft[R](initial:R)(op:(R,Long)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Long, B]): ArrayBatch[B]", "member" : "monix.tail.batches.LongsBatch.collect", "link" : "monix\/tail\/batches\/LongsBatch.html#collect[B](pf:PartialFunction[Long,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Long) ⇒ B): ArrayBatch[B]", "member" : "monix.tail.batches.LongsBatch.map", "link" : "monix\/tail\/batches\/LongsBatch.html#map[B](f:Long=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Long) ⇒ Boolean): LongsBatch", "member" : "monix.tail.batches.LongsBatch.filter", "link" : "monix\/tail\/batches\/LongsBatch.html#filter(p:Long=>Boolean):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): LongsBatch", "member" : "monix.tail.batches.LongsBatch.slice", "link" : "monix\/tail\/batches\/LongsBatch.html#slice(from:Int,until:Int):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): LongsBatch", "member" : "monix.tail.batches.LongsBatch.drop", "link" : "monix\/tail\/batches\/LongsBatch.html#drop(n:Int):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): LongsBatch", "member" : "monix.tail.batches.LongsBatch.take", "link" : "monix\/tail\/batches\/LongsBatch.html#take(n:Int):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): LongsCursor", "member" : "monix.tail.batches.LongsBatch.cursor", "link" : "monix\/tail\/batches\/LongsBatch.html#cursor():monix.tail.batches.LongsCursor", "kind" : "def"}, {"member" : "monix.tail.batches.LongsBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Long]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/LongsBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/LongsBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Long]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/LongsBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/LongsBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/LongsBatch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/LongsBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/LongsBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/LongsBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/LongsBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/LongsBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/LongsBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/LongsBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/LongsBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/LongsBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/LongsBatch.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/LongsBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/LongsBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/LongsBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/LongsBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/LongsBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.LongsCursor", "shortDescription" : "BatchCursor implementation specialized for Long.", "members_class" : [{"label" : "filter", "tail" : "(p: (Long) ⇒ Boolean): LongsCursor", "member" : "monix.tail.batches.LongsCursor.filter", "link" : "monix\/tail\/batches\/LongsCursor.html#filter(p:Long=>Boolean):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): LongsCursor", "member" : "monix.tail.batches.LongsCursor.slice", "link" : "monix\/tail\/batches\/LongsCursor.html#slice(from:Int,until:Int):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): LongsCursor", "member" : "monix.tail.batches.LongsCursor.drop", "link" : "monix\/tail\/batches\/LongsCursor.html#drop(n:Int):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): LongsCursor", "member" : "monix.tail.batches.LongsCursor.take", "link" : "monix\/tail\/batches\/LongsCursor.html#take(n:Int):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Long, B]): ArrayCursor[B]", "member" : "monix.tail.batches.LongsCursor.collect", "link" : "monix\/tail\/batches\/LongsCursor.html#collect[B](pf:PartialFunction[Long,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Long) ⇒ B): ArrayCursor[B]", "member" : "monix.tail.batches.LongsCursor.map", "link" : "monix\/tail\/batches\/LongsCursor.html#map[B](f:Long=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Long]", "member" : "monix.tail.batches.LongsCursor.toIterator", "link" : "monix\/tail\/batches\/LongsCursor.html#toIterator:Iterator[Long]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.LongsCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/LongsCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Long", "member" : "monix.tail.batches.LongsCursor.next", "link" : "monix\/tail\/batches\/LongsCursor.html#next():Long", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.LongsCursor.hasNext", "link" : "monix\/tail\/batches\/LongsCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.LongsCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.LongsCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.LongsCursor#<init>", "error" : "unsupported entity"}, {"label" : "toGenerator", "tail" : "(): Batch[Long]", "member" : "monix.tail.batches.BatchCursor.toGenerator", "link" : "monix\/tail\/batches\/LongsCursor.html#toGenerator:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/LongsCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Long]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/LongsCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Long) ⇒ R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/LongsCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/LongsCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/LongsCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/LongsCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/LongsCursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/LongsCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/LongsCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/LongsCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/LongsCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/LongsCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/LongsCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/LongsCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/LongsCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/LongsCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/LongsCursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/LongsCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/LongsCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/LongsCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/LongsCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/LongsCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.SeqBatch", "shortDescription" : "Batch implementation that wraps anyScala Seq.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) ⇒ R): R", "member" : "monix.tail.batches.SeqBatch.foldLeft", "link" : "monix\/tail\/batches\/SeqBatch.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Batch[B]", "member" : "monix.tail.batches.SeqBatch.collect", "link" : "monix\/tail\/batches\/SeqBatch.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.Batch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Batch[A]", "member" : "monix.tail.batches.SeqBatch.filter", "link" : "monix\/tail\/batches\/SeqBatch.html#filter(p:A=>Boolean):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Batch[B]", "member" : "monix.tail.batches.SeqBatch.map", "link" : "monix\/tail\/batches\/SeqBatch.html#map[B](f:A=>B):monix.tail.batches.Batch[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Batch[A]", "member" : "monix.tail.batches.SeqBatch.slice", "link" : "monix\/tail\/batches\/SeqBatch.html#slice(from:Int,until:Int):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.SeqBatch.drop", "link" : "monix\/tail\/batches\/SeqBatch.html#drop(n:Int):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.SeqBatch.take", "link" : "monix\/tail\/batches\/SeqBatch.html#take(n:Int):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "cursor", "tail" : "(): BatchCursor[A]", "member" : "monix.tail.batches.SeqBatch.cursor", "link" : "monix\/tail\/batches\/SeqBatch.html#cursor():monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"member" : "monix.tail.batches.SeqBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/SeqBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/SeqBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/SeqBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/SeqBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/SeqBatch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/SeqBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/SeqBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/SeqBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/SeqBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/SeqBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/SeqBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/SeqBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/SeqBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/SeqBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/SeqBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/SeqBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/SeqBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/SeqBatch.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/SeqBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/SeqBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/SeqBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/SeqBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/SeqBatch.html", "kind" : "class"}], "monix.reactive" : [{"name" : "monix.reactive.Consumer", "shortDescription" : "The Consumer is a specification of how to consume an observable.", "object" : "monix\/reactive\/Consumer$.html", "members_class" : [{"label" : "mapTask", "tail" : "(f: (R) ⇒ Task[R2]): Consumer[In, R2]", "member" : "monix.reactive.Consumer.mapTask", "link" : "monix\/reactive\/Consumer.html#mapTask[R2](f:R=>monix.eval.Task[R2]):monix.reactive.Consumer[In,R2]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (R) ⇒ F[R2])(F: Effect[F]): Consumer[In, R2]", "member" : "monix.reactive.Consumer.mapEval", "link" : "monix\/reactive\/Consumer.html#mapEval[F[_],R2](f:R=>F[R2])(implicitF:cats.effect.Effect[F]):monix.reactive.Consumer[In,R2]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (R) ⇒ R2): Consumer[In, R2]", "member" : "monix.reactive.Consumer.map", "link" : "monix\/reactive\/Consumer.html#map[R2](f:R=>R2):monix.reactive.Consumer[In,R2]", "kind" : "final def"}, {"label" : "transformInput", "tail" : "(f: (Observable[In2]) ⇒ Observable[In]): Consumer[In2, R]", "member" : "monix.reactive.Consumer.transformInput", "link" : "monix\/reactive\/Consumer.html#transformInput[In2](f:monix.reactive.Observable[In2]=>monix.reactive.Observable[In]):monix.reactive.Consumer[In2,R]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (In2) ⇒ In): Consumer[In2, R]", "member" : "monix.reactive.Consumer.contramap", "link" : "monix\/reactive\/Consumer.html#contramap[In2](f:In2=>In):monix.reactive.Consumer[In2,R]", "kind" : "final def"}, {"label" : "apply", "tail" : "(source: Observable[In]): Task[R]", "member" : "monix.reactive.Consumer.apply", "link" : "monix\/reactive\/Consumer.html#apply(source:monix.reactive.Observable[In]):monix.eval.Task[R]", "kind" : "final def"}, {"member" : "monix.reactive.Consumer#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/reactive\/Consumer.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Task[R]) ⇒ A): (Observable[In]) ⇒ A", "member" : "scala.Function1.andThen", "link" : "monix\/reactive\/Consumer.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Observable[In]): (A) ⇒ Task[R]", "member" : "scala.Function1.compose", "link" : "monix\/reactive\/Consumer.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Consumer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Consumer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Consumer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Consumer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Consumer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Consumer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Consumer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Consumer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Consumer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Consumer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Consumer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Consumer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Consumer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Consumer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Consumer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "createSubscriber", "tail" : "(cb: Callback[R], s: Scheduler): (Subscriber[In], AssignableCancelable)", "member" : "monix.reactive.Consumer.createSubscriber", "link" : "monix\/reactive\/Consumer.html#createSubscriber(cb:monix.eval.Callback[R],s:monix.execution.Scheduler):(monix.reactive.observers.Subscriber[In],monix.execution.cancelables.AssignableCancelable)", "kind" : "abstract def"}], "members_object" : [{"label" : "Sync", "tail" : "", "member" : "monix.reactive.Consumer.Sync", "link" : "monix\/reactive\/Consumer$.html#Sync[-In,+R]extendsConsumer[In,R]", "kind" : "trait"}, {"label" : "loadBalance", "tail" : "(consumers: Consumer[A, R]*): Consumer[A, List[R]]", "member" : "monix.reactive.Consumer.loadBalance", "link" : "monix\/reactive\/Consumer$.html#loadBalance[A,R](consumers:monix.reactive.Consumer[A,R]*):monix.reactive.Consumer[A,List[R]]", "kind" : "def"}, {"label" : "loadBalance", "tail" : "(parallelism: Int, consumer: Consumer[A, R]): Consumer[A, List[R]]", "member" : "monix.reactive.Consumer.loadBalance", "link" : "monix\/reactive\/Consumer$.html#loadBalance[A,R](parallelism:Int,consumer:monix.reactive.Consumer[A,R]):monix.reactive.Consumer[A,List[R]]", "kind" : "def"}, {"label" : "foreachParallelTask", "tail" : "(parallelism: Int)(cb: (A) ⇒ Task[Unit]): Consumer[A, Unit]", "member" : "monix.reactive.Consumer.foreachParallelTask", "link" : "monix\/reactive\/Consumer$.html#foreachParallelTask[A](parallelism:Int)(cb:A=>monix.eval.Task[Unit]):monix.reactive.Consumer[A,Unit]", "kind" : "def"}, {"label" : "foreachParallel", "tail" : "(parallelism: Int)(cb: (A) ⇒ Unit): Consumer[A, Unit]", "member" : "monix.reactive.Consumer.foreachParallel", "link" : "monix\/reactive\/Consumer$.html#foreachParallel[A](parallelism:Int)(cb:A=>Unit):monix.reactive.Consumer[A,Unit]", "kind" : "def"}, {"label" : "foreachTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Consumer[A, Unit]", "member" : "monix.reactive.Consumer.foreachTask", "link" : "monix\/reactive\/Consumer$.html#foreachTask[A](cb:A=>monix.eval.Task[Unit]):monix.reactive.Consumer[A,Unit]", "kind" : "def"}, {"label" : "foreachEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Consumer[A, Unit]", "member" : "monix.reactive.Consumer.foreachEval", "link" : "monix\/reactive\/Consumer$.html#foreachEval[F[_],A](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Consumer[A,Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit): Sync[A, Unit]", "member" : "monix.reactive.Consumer.foreach", "link" : "monix\/reactive\/Consumer$.html#foreach[A](cb:A=>Unit):monix.reactive.Consumer.Sync[A,Unit]", "kind" : "def"}, {"label" : "complete", "tail" : "(): Sync[A, Unit]", "member" : "monix.reactive.Consumer.complete", "link" : "monix\/reactive\/Consumer$.html#complete[A]:monix.reactive.Consumer.Sync[A,Unit]", "kind" : "def"}, {"label" : "firstNotification", "tail" : "(): Sync[A, Notification[A]]", "member" : "monix.reactive.Consumer.firstNotification", "link" : "monix\/reactive\/Consumer$.html#firstNotification[A]:monix.reactive.Consumer.Sync[A,monix.reactive.Notification[A]]", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Sync[A, Option[A]]", "member" : "monix.reactive.Consumer.headOption", "link" : "monix\/reactive\/Consumer$.html#headOption[A]:monix.reactive.Consumer.Sync[A,Option[A]]", "kind" : "def"}, {"label" : "head", "tail" : "(): Sync[A, A]", "member" : "monix.reactive.Consumer.head", "link" : "monix\/reactive\/Consumer$.html#head[A]:monix.reactive.Consumer.Sync[A,A]", "kind" : "def"}, {"label" : "foldLeftTask", "tail" : "(initial: ⇒ S)(f: (S, A) ⇒ Task[S]): Consumer[A, S]", "member" : "monix.reactive.Consumer.foldLeftTask", "link" : "monix\/reactive\/Consumer$.html#foldLeftTask[S,A](initial:=>S)(f:(S,A)=>monix.eval.Task[S]):monix.reactive.Consumer[A,S]", "kind" : "def"}, {"label" : "foldLeftEval", "tail" : "(initial: ⇒ S)(f: (S, A) ⇒ F[S])(F: Effect[F]): Consumer[A, S]", "member" : "monix.reactive.Consumer.foldLeftEval", "link" : "monix\/reactive\/Consumer$.html#foldLeftEval[F[_],S,A](initial:=>S)(f:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Consumer[A,S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: ⇒ S)(f: (S, A) ⇒ S): Sync[A, S]", "member" : "monix.reactive.Consumer.foldLeft", "link" : "monix\/reactive\/Consumer$.html#foldLeft[S,A](initial:=>S)(f:(S,A)=>S):monix.reactive.Consumer.Sync[A,S]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Sync[In, R]", "member" : "monix.reactive.Consumer.raiseError", "link" : "monix\/reactive\/Consumer$.html#raiseError[In,R](ex:Throwable):monix.reactive.Consumer.Sync[In,R]", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Sync[A, Unit]", "member" : "monix.reactive.Consumer.cancel", "link" : "monix\/reactive\/Consumer$.html#cancel[A]:monix.reactive.Consumer.Sync[A,Unit]", "kind" : "def"}, {"label" : "fromObserver", "tail" : "(f: (Scheduler) ⇒ Observer[In]): Consumer[In, Unit]", "member" : "monix.reactive.Consumer.fromObserver", "link" : "monix\/reactive\/Consumer$.html#fromObserver[In](f:monix.execution.Scheduler=>monix.reactive.Observer[In]):monix.reactive.Consumer[In,Unit]", "kind" : "def"}, {"label" : "create", "tail" : "(f: (Scheduler, Cancelable, Callback[Out]) ⇒ Observer[In]): Consumer[In, Out]", "member" : "monix.reactive.Consumer.create", "link" : "monix\/reactive\/Consumer$.html#create[In,Out](f:(monix.execution.Scheduler,monix.execution.Cancelable,monix.eval.Callback[Out])=>monix.reactive.Observer[In]):monix.reactive.Consumer[In,Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Consumer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Consumer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Consumer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Consumer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Consumer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Consumer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Consumer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Consumer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Consumer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Consumer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Consumer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Consumer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Consumer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Consumer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Consumer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Consumer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/Consumer.html", "kind" : "class"}, {"name" : "monix.reactive.MulticastStrategy", "shortDescription" : "The MulticastStrategy specifies the strategy forbuilding data-sources that are shared between multiple subscribers.", "object" : "monix\/reactive\/MulticastStrategy$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/MulticastStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/MulticastStrategy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/MulticastStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/MulticastStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/MulticastStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/MulticastStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/MulticastStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/MulticastStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/MulticastStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/MulticastStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/MulticastStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/MulticastStrategy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/MulticastStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/MulticastStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/MulticastStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/MulticastStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ReplayLimited", "tail" : "", "member" : "monix.reactive.MulticastStrategy.ReplayLimited", "link" : "monix\/reactive\/MulticastStrategy$.html#ReplayLimited[A]extendsMulticastStrategy[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "replayLimited", "tail" : "(capacity: Int, initial: Seq[A]): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.replayLimited", "link" : "monix\/reactive\/MulticastStrategy$.html#replayLimited[A](capacity:Int,initial:Seq[A]):monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.replayLimited", "link" : "monix\/reactive\/MulticastStrategy$.html#replayLimited[A](capacity:Int):monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "Replay", "tail" : "", "member" : "monix.reactive.MulticastStrategy.Replay", "link" : "monix\/reactive\/MulticastStrategy$.html#Replay[A]extendsMulticastStrategy[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "replay", "tail" : "(initial: Seq[A]): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.replay", "link" : "monix\/reactive\/MulticastStrategy$.html#replay[A](initial:Seq[A]):monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "replay", "tail" : "(): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.replay", "link" : "monix\/reactive\/MulticastStrategy$.html#replay[A]:monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "Async", "tail" : "", "member" : "monix.reactive.MulticastStrategy.Async", "link" : "monix\/reactive\/MulticastStrategy$.html#Async", "kind" : "object"}, {"label" : "async", "tail" : "(): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.async", "link" : "monix\/reactive\/MulticastStrategy$.html#async[A]:monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "Behavior", "tail" : "", "member" : "monix.reactive.MulticastStrategy.Behavior", "link" : "monix\/reactive\/MulticastStrategy$.html#Behavior[A]extendsMulticastStrategy[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "behavior", "tail" : "(initial: A): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.behavior", "link" : "monix\/reactive\/MulticastStrategy$.html#behavior[A](initial:A):monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "Publish", "tail" : "", "member" : "monix.reactive.MulticastStrategy.Publish", "link" : "monix\/reactive\/MulticastStrategy$.html#Publish", "kind" : "object"}, {"label" : "publish", "tail" : "(): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.publish", "link" : "monix\/reactive\/MulticastStrategy$.html#publish[A]:monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/MulticastStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/MulticastStrategy$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/MulticastStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/MulticastStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/MulticastStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/MulticastStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/MulticastStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/MulticastStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/MulticastStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/MulticastStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/MulticastStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/MulticastStrategy$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/MulticastStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/MulticastStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/MulticastStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/MulticastStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/MulticastStrategy.html", "kind" : "class"}, {"name" : "monix.reactive.Notification", "shortDescription" : "Used by Observable.materialize.", "object" : "monix\/reactive\/Notification$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Notification.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Notification.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Notification.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Notification.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Notification.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Notification.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Notification.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Notification.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Notification.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Notification.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Notification.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Notification.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Notification.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Notification.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Notification.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Notification.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "OnComplete", "tail" : "", "member" : "monix.reactive.Notification.OnComplete", "link" : "monix\/reactive\/Notification$.html#OnComplete", "kind" : "object"}, {"label" : "OnError", "tail" : "", "member" : "monix.reactive.Notification.OnError", "link" : "monix\/reactive\/Notification$.html#OnErrorextendsNotification[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "OnNext", "tail" : "", "member" : "monix.reactive.Notification.OnNext", "link" : "monix\/reactive\/Notification$.html#OnNext[+A]extendsNotification[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Notification$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Notification$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Notification$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Notification$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Notification$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Notification$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Notification$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Notification$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Notification$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Notification$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Notification$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Notification$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Notification$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Notification$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Notification$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Notification$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/Notification.html", "kind" : "class"}, {"name" : "monix.reactive.Observable", "shortDescription" : "The Observable type that implements the Reactive Pattern.", "object" : "monix\/reactive\/Observable$.html", "members_class" : [{"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/Observable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(cb: (A) ⇒ Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/Observable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/Observable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/Observable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sumF", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sumF", "link" : "monix\/reactive\/Observable.html#sumF[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/Observable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmptyF", "link" : "monix\/reactive\/Observable.html#nonEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/Observable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minByF", "link" : "monix\/reactive\/Observable.html#minByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/Observable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "minF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.minF", "link" : "monix\/reactive\/Observable.html#minF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/Observable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxByF", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxByF", "link" : "monix\/reactive\/Observable.html#maxByF[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/Observable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/Observable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/Observable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "maxF", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.maxF", "link" : "monix\/reactive\/Observable.html#maxF[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/Observable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/Observable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmptyF", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmptyF", "link" : "monix\/reactive\/Observable.html#isEmptyF:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/Observable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/Observable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/Observable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftF", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.foldLeftF", "link" : "monix\/reactive\/Observable.html#foldLeftF[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/Observable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/Observable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "headF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.headF", "link" : "monix\/reactive\/Observable.html#headF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/Observable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "findF", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.findF", "link" : "monix\/reactive\/Observable.html#findF(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/Observable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forAllL", "tail" : "(p: (A) ⇒ Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forAllL", "link" : "monix\/reactive\/Observable.html#forAllL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/Observable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/Observable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/Observable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftF", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeftF", "link" : "monix\/reactive\/Observable.html#foldWhileLeftF[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/Observable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldF", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.foldF", "link" : "monix\/reactive\/Observable.html#foldF[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/Observable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/Observable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "countF", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.countF", "link" : "monix\/reactive\/Observable.html#countF:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/Observable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: ⇒ B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/Observable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/Observable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/Observable.html#runAsyncGetLast(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/Observable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/Observable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/Observable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/Observable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/Observable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/Observable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/Observable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/Observable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/Observable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/Observable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/Observable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/Observable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/Observable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/Observable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/Observable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/Observable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/Observable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/Observable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/Observable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/Observable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/Observable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/Observable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/Observable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/Observable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/Observable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/Observable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/Observable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/Observable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/Observable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/Observable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/Observable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/Observable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/Observable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/Observable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/Observable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/Observable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/Observable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/Observable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/Observable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/Observable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/Observable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/Observable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/Observable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/Observable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/Observable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/Observable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanTask", "tail" : "(seed: Task[S])(op: (S, A) ⇒ Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanTask", "link" : "monix\/reactive\/Observable.html#scanTask[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/Observable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Effect[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/Observable.html#scanEval[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/Observable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/Observable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/Observable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/Observable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/Observable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/Observable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/Observable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/Observable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/Observable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/Observable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/Observable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/Observable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/Observable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/Observable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/Observable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/Observable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/Observable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/Observable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/Observable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/Observable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/Observable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/Observable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/Observable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/Observable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/Observable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) ⇒ Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/Observable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/Observable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/Observable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) ⇒ Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/Observable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapFuture", "tail" : "(f: (A) ⇒ Future[B]): Observable[B]", "member" : "monix.reactive.Observable.mapFuture", "link" : "monix\/reactive\/Observable.html#mapFuture[B](f:A=>scala.concurrent.Future[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Effect[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/Observable.html#mapEval[F[_],B](f:A=>F[B])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/Observable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "lastF", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.lastF", "link" : "monix\/reactive\/Observable.html#lastF:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/Observable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/Observable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) ⇒ K)(keysBuffer: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/Observable.html#groupBy[K](keySelector:A=>K)(implicitkeysBuffer:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "existsF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.existsF", "link" : "monix\/reactive\/Observable.html#existsF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forAllF", "tail" : "(p: (A) ⇒ Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forAllF", "link" : "monix\/reactive\/Observable.html#forAllF(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/Observable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/Observable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/Observable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/Observable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/Observable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/Observable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/Observable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/Observable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: ⇒ R)(op: (R, A) ⇒ Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/Observable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/Observable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/Observable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/Observable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/Observable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/Observable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.headOrElseF", "link" : "monix\/reactive\/Observable.html#headOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElseF", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElseF", "link" : "monix\/reactive\/Observable.html#firstOrElseF[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/Observable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/Observable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/Observable.html#++[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/Observable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/Observable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/Observable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/Observable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/Observable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/Observable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/Observable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/Observable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/Observable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/Observable.html#doAfterSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/Observable.html#doOnSubscribe(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/Observable.html#doOnStart(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckTask", "tail" : "(cb: (A, Ack) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckTask", "link" : "monix\/reactive\/Observable.html#doOnNextAckTask(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckEval", "tail" : "(cb: (A, Ack) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckEval", "link" : "monix\/reactive\/Observable.html#doOnNextAckEval[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/Observable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mapTask", "tail" : "(f: (A) ⇒ Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapTask", "link" : "monix\/reactive\/Observable.html#mapTask[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "doOnNextTask", "tail" : "(cb: (A) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextTask", "link" : "monix\/reactive\/Observable.html#doOnNextTask(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextEval", "tail" : "(cb: (A) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextEval", "link" : "monix\/reactive\/Observable.html#doOnNextEval[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/Observable.html#doOnNext(cb:A=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateTask", "link" : "monix\/reactive\/Observable.html#doAfterTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminateEval", "link" : "monix\/reactive\/Observable.html#doAfterTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doAfterTerminate", "link" : "monix\/reactive\/Observable.html#doAfterTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateTask", "tail" : "(cb: (Option[Throwable]) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateTask", "link" : "monix\/reactive\/Observable.html#doOnTerminateTask(cb:Option[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminateEval", "tail" : "(cb: (Option[Throwable]) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminateEval", "link" : "monix\/reactive\/Observable.html#doOnTerminateEval[F[_]](cb:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnTerminate", "tail" : "(cb: (Option[Throwable]) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnTerminate", "link" : "monix\/reactive\/Observable.html#doOnTerminate(cb:Option[Throwable]=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorTask", "tail" : "(cb: (Throwable) ⇒ Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorTask", "link" : "monix\/reactive\/Observable.html#doOnErrorTask(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorEval", "tail" : "(cb: (Throwable) ⇒ F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorEval", "link" : "monix\/reactive\/Observable.html#doOnErrorEval[F[_]](cb:Throwable=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/Observable.html#doOnError(cb:Throwable=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteTask", "link" : "monix\/reactive\/Observable.html#doOnCompleteTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteEval", "link" : "monix\/reactive\/Observable.html#doOnCompleteEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/Observable.html#doOnComplete(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/Observable.html#doOnSubscriptionCancel(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopTask", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopTask", "link" : "monix\/reactive\/Observable.html#doOnEarlyStopTask(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopEval", "tail" : "(effect: F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopEval", "link" : "monix\/reactive\/Observable.html#doOnEarlyStopEval[F[_]](effect:F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(cb: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/Observable.html#doOnEarlyStop(cb:()=>Unit):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/Observable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/Observable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/Observable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscriptionWith", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.delaySubscriptionWith", "link" : "monix\/reactive\/Observable.html#delaySubscriptionWith(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) ⇒ Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/Observable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/Observable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/Observable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: ⇒ B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/Observable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/Observable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/Observable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delaySubscription", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delaySubscription", "link" : "monix\/reactive\/Observable.html#delaySubscription(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) ⇒ Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/Observable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/Observable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/Observable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/Observable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/Observable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/Observable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/Observable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/Observable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/Observable.html#bufferTimedWithPressure(period:scala.concurrent.duration.FiniteDuration,maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/Observable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/Observable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/Observable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/Observable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/Observable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/Observable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/Observable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/Observable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/Observable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit, completedFn: () ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) ⇒ Future[Ack], errorFn: (Throwable) ⇒ Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/Observable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"member" : "monix.reactive.Observable#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Observable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Observable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Observable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Observable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Observable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Observable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Observable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Observable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Observable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Observable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Observable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Observable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Observable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Observable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Observable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Observable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/Observable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "DeprecatedExtensions", "tail" : "", "member" : "monix.reactive.Observable.DeprecatedExtensions", "link" : "monix\/reactive\/Observable$.html#DeprecatedExtensions[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "fork", "tail" : "(fa: Observable[A], scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.fork", "link" : "monix\/reactive\/Observable$.html#fork[A](fa:monix.reactive.Observable[A],scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fork", "tail" : "(fa: Observable[A]): Observable[A]", "member" : "monix.reactive.Observable.fork", "link" : "monix\/reactive\/Observable$.html#fork[A](fa:monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "observableNonEmptyParallel", "tail" : ": NonEmptyParallel[Observable, observables.CombineObservable.Type]", "member" : "monix.reactive.Observable.observableNonEmptyParallel", "link" : "monix\/reactive\/Observable$.html#observableNonEmptyParallel:cats.NonEmptyParallel[monix.reactive.Observable,monix.reactive.observables.CombineObservable.Type]", "kind" : "implicit val"}, {"label" : "CatsInstances", "tail" : "", "member" : "monix.reactive.Observable.CatsInstances", "link" : "monix\/reactive\/Observable$.html#CatsInstancesextendsMonadError[monix.reactive.Observable,Throwable]withMonoidK[monix.reactive.Observable]withCoflatMap[monix.reactive.Observable]", "kind" : "class"}, {"label" : "catsInstances", "tail" : ": CatsInstances", "member" : "monix.reactive.Observable.catsInstances", "link" : "monix\/reactive\/Observable$.html#catsInstances:monix.reactive.Observable.CatsInstances", "kind" : "implicit val"}, {"label" : "firstStartedOf", "tail" : "(source: Observable[A]*): Observable[A]", "member" : "monix.reactive.Observable.firstStartedOf", "link" : "monix\/reactive\/Observable$.html#firstStartedOf[A](source:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "combineLatestList", "tail" : "(sources: Observable[A]*): Observable[Seq[A]]", "member" : "monix.reactive.Observable.combineLatestList", "link" : "monix\/reactive\/Observable$.html#combineLatestList[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[Seq[A]]", "kind" : "def"}, {"label" : "combineLatestMap6", "tail" : "(a1: Observable[A1], a2: Observable[A2], a3: Observable[A3], a4: Observable[A4], a5: Observable[A5], a6: Observable[A6])(f: (A1, A2, A3, A4, A5, A6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap6", "link" : "monix\/reactive\/Observable$.html#combineLatestMap6[A1,A2,A3,A4,A5,A6,R](a1:monix.reactive.Observable[A1],a2:monix.reactive.Observable[A2],a3:monix.reactive.Observable[A3],a4:monix.reactive.Observable[A4],a5:monix.reactive.Observable[A5],a6:monix.reactive.Observable[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "combineLatest6", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5], oa6: Observable[A6]): Observable[(A1, A2, A3, A4, A5, A6)]", "member" : "monix.reactive.Observable.combineLatest6", "link" : "monix\/reactive\/Observable$.html#combineLatest6[A1,A2,A3,A4,A5,A6](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5],oa6:monix.reactive.Observable[A6]):monix.reactive.Observable[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "combineLatestMap5", "tail" : "(a1: Observable[A1], a2: Observable[A2], a3: Observable[A3], a4: Observable[A4], a5: Observable[A5])(f: (A1, A2, A3, A4, A5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap5", "link" : "monix\/reactive\/Observable$.html#combineLatestMap5[A1,A2,A3,A4,A5,R](a1:monix.reactive.Observable[A1],a2:monix.reactive.Observable[A2],a3:monix.reactive.Observable[A3],a4:monix.reactive.Observable[A4],a5:monix.reactive.Observable[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "combineLatest5", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5]): Observable[(A1, A2, A3, A4, A5)]", "member" : "monix.reactive.Observable.combineLatest5", "link" : "monix\/reactive\/Observable$.html#combineLatest5[A1,A2,A3,A4,A5](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5]):monix.reactive.Observable[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "combineLatestMap4", "tail" : "(a1: Observable[A1], a2: Observable[A2], a3: Observable[A3], a4: Observable[A4])(f: (A1, A2, A3, A4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap4", "link" : "monix\/reactive\/Observable$.html#combineLatestMap4[A1,A2,A3,A4,R](a1:monix.reactive.Observable[A1],a2:monix.reactive.Observable[A2],a3:monix.reactive.Observable[A3],a4:monix.reactive.Observable[A4])(f:(A1,A2,A3,A4)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "combineLatest4", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4]): Observable[(A1, A2, A3, A4)]", "member" : "monix.reactive.Observable.combineLatest4", "link" : "monix\/reactive\/Observable$.html#combineLatest4[A1,A2,A3,A4](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4]):monix.reactive.Observable[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "combineLatestMap3", "tail" : "(a1: Observable[A1], a2: Observable[A2], a3: Observable[A3])(f: (A1, A2, A3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap3", "link" : "monix\/reactive\/Observable$.html#combineLatestMap3[A1,A2,A3,R](a1:monix.reactive.Observable[A1],a2:monix.reactive.Observable[A2],a3:monix.reactive.Observable[A3])(f:(A1,A2,A3)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "combineLatest3", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3]): Observable[(A1, A2, A3)]", "member" : "monix.reactive.Observable.combineLatest3", "link" : "monix\/reactive\/Observable$.html#combineLatest3[A1,A2,A3](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3]):monix.reactive.Observable[(A1,A2,A3)]", "kind" : "def"}, {"label" : "combineLatestMap2", "tail" : "(oa1: Observable[A1], oa2: Observable[A2])(f: (A1, A2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap2", "link" : "monix\/reactive\/Observable$.html#combineLatestMap2[A1,A2,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2])(f:(A1,A2)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "combineLatest2", "tail" : "(oa1: Observable[A1], oa2: Observable[A2]): Observable[(A1, A2)]", "member" : "monix.reactive.Observable.combineLatest2", "link" : "monix\/reactive\/Observable$.html#combineLatest2[A1,A2](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2]):monix.reactive.Observable[(A1,A2)]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.empty", "link" : "monix\/reactive\/Observable$.html#empty[A]:monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "zipList", "tail" : "(sources: Observable[A]*): Observable[Seq[A]]", "member" : "monix.reactive.Observable.zipList", "link" : "monix\/reactive\/Observable$.html#zipList[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[Seq[A]]", "kind" : "def"}, {"label" : "zipMap6", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5], oa6: Observable[A6])(f: (A1, A2, A3, A4, A5, A6) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap6", "link" : "monix\/reactive\/Observable$.html#zipMap6[A1,A2,A3,A4,A5,A6,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5],oa6:monix.reactive.Observable[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "zip6", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5], oa6: Observable[A6]): Observable[(A1, A2, A3, A4, A5, A6)]", "member" : "monix.reactive.Observable.zip6", "link" : "monix\/reactive\/Observable$.html#zip6[A1,A2,A3,A4,A5,A6](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5],oa6:monix.reactive.Observable[A6]):monix.reactive.Observable[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "zipMap5", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5])(f: (A1, A2, A3, A4, A5) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap5", "link" : "monix\/reactive\/Observable$.html#zipMap5[A1,A2,A3,A4,A5,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "zip5", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5]): Observable[(A1, A2, A3, A4, A5)]", "member" : "monix.reactive.Observable.zip5", "link" : "monix\/reactive\/Observable$.html#zip5[A1,A2,A3,A4,A5](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5]):monix.reactive.Observable[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "zipMap4", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4])(f: (A1, A2, A3, A4) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap4", "link" : "monix\/reactive\/Observable$.html#zipMap4[A1,A2,A3,A4,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4])(f:(A1,A2,A3,A4)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "zip4", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4]): Observable[(A1, A2, A3, A4)]", "member" : "monix.reactive.Observable.zip4", "link" : "monix\/reactive\/Observable$.html#zip4[A1,A2,A3,A4](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4]):monix.reactive.Observable[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "zipMap3", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3])(f: (A1, A2, A3) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap3", "link" : "monix\/reactive\/Observable$.html#zipMap3[A1,A2,A3,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3])(f:(A1,A2,A3)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "zip3", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3]): Observable[(A1, A2, A3)]", "member" : "monix.reactive.Observable.zip3", "link" : "monix\/reactive\/Observable$.html#zip3[A1,A2,A3](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3]):monix.reactive.Observable[(A1,A2,A3)]", "kind" : "def"}, {"label" : "zipMap2", "tail" : "(oa1: Observable[A1], oa2: Observable[A2])(f: (A1, A2) ⇒ R): Observable[R]", "member" : "monix.reactive.Observable.zipMap2", "link" : "monix\/reactive\/Observable$.html#zipMap2[A1,A2,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2])(f:(A1,A2)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "zip2", "tail" : "(oa1: Observable[A1], oa2: Observable[A2]): Observable[(A1, A2)]", "member" : "monix.reactive.Observable.zip2", "link" : "monix\/reactive\/Observable$.html#zip2[A1,A2](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2]):monix.reactive.Observable[(A1,A2)]", "kind" : "def"}, {"label" : "switch", "tail" : "(sources: Observable[A]*): Observable[A]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/Observable$.html#switch[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "concatDelayError", "tail" : "(sources: Observable[A]*): Observable[A]", "member" : "monix.reactive.Observable.concatDelayError", "link" : "monix\/reactive\/Observable$.html#concatDelayError[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "concat", "tail" : "(sources: Observable[A]*): Observable[A]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/Observable$.html#concat[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(iterable: Iterable[A]): Observable[A]", "member" : "monix.reactive.Observable.fromIterable", "link" : "monix\/reactive\/Observable$.html#fromIterable[A](iterable:Iterable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "mergeDelayError", "tail" : "(sources: Observable[A]*)(os: OverflowStrategy[A]): Observable[A]", "member" : "monix.reactive.Observable.mergeDelayError", "link" : "monix\/reactive\/Observable$.html#mergeDelayError[A](sources:monix.reactive.Observable[A]*)(implicitos:monix.reactive.OverflowStrategy[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "merge", "tail" : "(sources: Observable[A]*)(os: OverflowStrategy[A]): Observable[A]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/Observable$.html#merge[A](sources:monix.reactive.Observable[A]*)(implicitos:monix.reactive.OverflowStrategy[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "flattenDelayError", "tail" : "(sources: Observable[A]*): Observable[A]", "member" : "monix.reactive.Observable.flattenDelayError", "link" : "monix\/reactive\/Observable$.html#flattenDelayError[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "flatten", "tail" : "(sources: Observable[A]*): Observable[A]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/Observable$.html#flatten[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "timerRepeated", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration, unit: A): Observable[A]", "member" : "monix.reactive.Observable.timerRepeated", "link" : "monix\/reactive\/Observable$.html#timerRepeated[A](initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration,unit:A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "toReactive", "tail" : "(source: Observable[A])(s: Scheduler): Publisher[A]", "member" : "monix.reactive.Observable.toReactive", "link" : "monix\/reactive\/Observable$.html#toReactive[A](source:monix.reactive.Observable[A])(implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[A]", "kind" : "def"}, {"label" : "fromAsyncStateAction", "tail" : "(f: (S) ⇒ Task[(A, S)])(seed: ⇒ S): Observable[A]", "member" : "monix.reactive.Observable.fromAsyncStateAction", "link" : "monix\/reactive\/Observable$.html#fromAsyncStateAction[S,A](f:S=>monix.eval.Task[(A,S)])(seed:=>S):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromStateAction", "tail" : "(f: (S) ⇒ (A, S))(seed: ⇒ S): Observable[A]", "member" : "monix.reactive.Observable.fromStateAction", "link" : "monix\/reactive\/Observable$.html#fromStateAction[S,A](f:S=>(A,S))(seed:=>S):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "range", "tail" : "(from: Long, until: Long, step: Long): Observable[Long]", "member" : "monix.reactive.Observable.range", "link" : "monix\/reactive\/Observable$.html#range(from:Long,until:Long,step:Long):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "repeatEvalF", "tail" : "(fa: F[A])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.repeatEvalF", "link" : "monix\/reactive\/Observable$.html#repeatEvalF[F[_],A](fa:F[A])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "repeatEval", "tail" : "(task: ⇒ A): Observable[A]", "member" : "monix.reactive.Observable.repeatEval", "link" : "monix\/reactive\/Observable$.html#repeatEval[A](task:=>A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(elems: A*): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/Observable$.html#repeat[A](elems:A*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "intervalAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration): Observable[Long]", "member" : "monix.reactive.Observable.intervalAtFixedRate", "link" : "monix\/reactive\/Observable$.html#intervalAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "intervalAtFixedRate", "tail" : "(period: FiniteDuration): Observable[Long]", "member" : "monix.reactive.Observable.intervalAtFixedRate", "link" : "monix\/reactive\/Observable$.html#intervalAtFixedRate(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "intervalWithFixedDelay", "tail" : "(delay: FiniteDuration): Observable[Long]", "member" : "monix.reactive.Observable.intervalWithFixedDelay", "link" : "monix\/reactive\/Observable$.html#intervalWithFixedDelay(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "interval", "tail" : "(delay: FiniteDuration): Observable[Long]", "member" : "monix.reactive.Observable.interval", "link" : "monix\/reactive\/Observable$.html#interval(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "intervalWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration): Observable[Long]", "member" : "monix.reactive.Observable.intervalWithFixedDelay", "link" : "monix\/reactive\/Observable$.html#intervalWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "interleave2", "tail" : "(oa1: Observable[A], oa2: Observable[A]): Observable[A]", "member" : "monix.reactive.Observable.interleave2", "link" : "monix\/reactive\/Observable$.html#interleave2[A](oa1:monix.reactive.Observable[A],oa2:monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "cons", "tail" : "(head: A, tail: Observable[A]): Observable[A]", "member" : "monix.reactive.Observable.cons", "link" : "monix\/reactive\/Observable$.html#cons[A](head:A,tail:monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: ⇒ Observable[A]): Observable[A]", "member" : "monix.reactive.Observable.defer", "link" : "monix\/reactive\/Observable$.html#defer[A](fa:=>monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: ⇒ Observable[A]): Observable[A]", "member" : "monix.reactive.Observable.suspend", "link" : "monix\/reactive\/Observable$.html#suspend[A](fa:=>monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromTask", "tail" : "(task: Task[A]): Observable[A]", "member" : "monix.reactive.Observable.fromTask", "link" : "monix\/reactive\/Observable$.html#fromTask[A](task:monix.eval.Task[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromIO", "tail" : "(fa: IO[A]): Observable[A]", "member" : "monix.reactive.Observable.fromIO", "link" : "monix\/reactive\/Observable$.html#fromIO[A](fa:cats.effect.IO[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(fa: F[A])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.fromEffect", "link" : "monix\/reactive\/Observable$.html#fromEffect[F[_],A](fa:F[A])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(factory: ⇒ Future[A]): Observable[A]", "member" : "monix.reactive.Observable.fromFuture", "link" : "monix\/reactive\/Observable$.html#fromFuture[A](factory:=>scala.concurrent.Future[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromEval", "tail" : "(fa: Eval[A]): Observable[A]", "member" : "monix.reactive.Observable.fromEval", "link" : "monix\/reactive\/Observable$.html#fromEval[A](fa:cats.Eval[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "coeval", "tail" : "(value: Coeval[A]): Observable[A]", "member" : "monix.reactive.Observable.coeval", "link" : "monix\/reactive\/Observable$.html#coeval[A](value:monix.eval.Coeval[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromReactivePublisher", "tail" : "(publisher: Publisher[A], requestCount: Int): Observable[A]", "member" : "monix.reactive.Observable.fromReactivePublisher", "link" : "monix\/reactive\/Observable$.html#fromReactivePublisher[A](publisher:org.reactivestreams.Publisher[A],requestCount:Int):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromReactivePublisher", "tail" : "(publisher: Publisher[A]): Observable[A]", "member" : "monix.reactive.Observable.fromReactivePublisher", "link" : "monix\/reactive\/Observable$.html#fromReactivePublisher[A](publisher:org.reactivestreams.Publisher[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromLinesReader", "tail" : "(in: BufferedReader): Observable[String]", "member" : "monix.reactive.Observable.fromLinesReader", "link" : "monix\/reactive\/Observable$.html#fromLinesReader(in:java.io.BufferedReader):monix.reactive.Observable[String]", "kind" : "def"}, {"label" : "fromCharsReader", "tail" : "(in: Reader, chunkSize: Int): Observable[Array[Char]]", "member" : "monix.reactive.Observable.fromCharsReader", "link" : "monix\/reactive\/Observable$.html#fromCharsReader(in:java.io.Reader,chunkSize:Int):monix.reactive.Observable[Array[Char]]", "kind" : "def"}, {"label" : "fromCharsReader", "tail" : "(in: Reader): Observable[Array[Char]]", "member" : "monix.reactive.Observable.fromCharsReader", "link" : "monix\/reactive\/Observable$.html#fromCharsReader(in:java.io.Reader):monix.reactive.Observable[Array[Char]]", "kind" : "def"}, {"label" : "fromInputStream", "tail" : "(in: InputStream, chunkSize: Int): Observable[Array[Byte]]", "member" : "monix.reactive.Observable.fromInputStream", "link" : "monix\/reactive\/Observable$.html#fromInputStream(in:java.io.InputStream,chunkSize:Int):monix.reactive.Observable[Array[Byte]]", "kind" : "def"}, {"label" : "fromInputStream", "tail" : "(in: InputStream): Observable[Array[Byte]]", "member" : "monix.reactive.Observable.fromInputStream", "link" : "monix\/reactive\/Observable$.html#fromInputStream(in:java.io.InputStream):monix.reactive.Observable[Array[Byte]]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(iterator: Iterator[A], onFinish: () ⇒ Unit): Observable[A]", "member" : "monix.reactive.Observable.fromIterator", "link" : "monix\/reactive\/Observable$.html#fromIterator[A](iterator:Iterator[A],onFinish:()=>Unit):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(iterator: Iterator[A]): Observable[A]", "member" : "monix.reactive.Observable.fromIterator", "link" : "monix\/reactive\/Observable$.html#fromIterator[A](iterator:Iterator[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "multicast", "tail" : "(multicast: MulticastStrategy[A], overflow: Synchronous[A])(s: Scheduler): (Sync[A], Observable[A])", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/Observable$.html#multicast[A](multicast:monix.reactive.MulticastStrategy[A],overflow:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):(monix.reactive.Observer.Sync[A],monix.reactive.Observable[A])", "kind" : "def"}, {"label" : "multicast", "tail" : "(multicast: MulticastStrategy[A])(s: Scheduler): (Sync[A], Observable[A])", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/Observable$.html#multicast[A](multicast:monix.reactive.MulticastStrategy[A])(implicits:monix.execution.Scheduler):(monix.reactive.Observer.Sync[A],monix.reactive.Observable[A])", "kind" : "def"}, {"label" : "create", "tail" : "(overflowStrategy: Synchronous[A])(f: (Sync[A]) ⇒ Cancelable): Observable[A]", "member" : "monix.reactive.Observable.create", "link" : "monix\/reactive\/Observable$.html#create[A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[A])(f:monix.reactive.observers.Subscriber.Sync[A]=>monix.execution.Cancelable):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "unsafeCreate", "tail" : "(f: (Subscriber[A]) ⇒ Cancelable): Observable[A]", "member" : "monix.reactive.Observable.unsafeCreate", "link" : "monix\/reactive\/Observable$.html#unsafeCreate[A](f:monix.reactive.observers.Subscriber[A]=>monix.execution.Cancelable):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Observable[Either[A, B]]): Observable[B]", "member" : "monix.reactive.Observable.tailRecM", "link" : "monix\/reactive\/Observable$.html#tailRecM[A,B](a:A)(f:A=>monix.reactive.Observable[Either[A,B]]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "never", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.never", "link" : "monix\/reactive\/Observable$.html#never[A]:monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "evalDelayed", "tail" : "(delay: FiniteDuration, a: ⇒ A): Observable[A]", "member" : "monix.reactive.Observable.evalDelayed", "link" : "monix\/reactive\/Observable$.html#evalDelayed[A](delay:scala.concurrent.duration.FiniteDuration,a:=>A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: ⇒ A): Observable[A]", "member" : "monix.reactive.Observable.eval", "link" : "monix\/reactive\/Observable$.html#eval[A](a:=>A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Observable[A]", "member" : "monix.reactive.Observable.raiseError", "link" : "monix\/reactive\/Observable$.html#raiseError[A](ex:Throwable):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "now", "tail" : "(elem: A): Observable[A]", "member" : "monix.reactive.Observable.now", "link" : "monix\/reactive\/Observable$.html#now[A](elem:A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "evalOnce", "tail" : "(f: ⇒ A): Observable[A]", "member" : "monix.reactive.Observable.evalOnce", "link" : "monix\/reactive\/Observable$.html#evalOnce[A](f:=>A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(a: ⇒ A): Observable[A]", "member" : "monix.reactive.Observable.delay", "link" : "monix\/reactive\/Observable$.html#delay[A](a:=>A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(elem: A): Observable[A]", "member" : "monix.reactive.Observable.pure", "link" : "monix\/reactive\/Observable$.html#pure[A](elem:A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(elems: A*): Observable[A]", "member" : "monix.reactive.Observable.apply", "link" : "monix\/reactive\/Observable$.html#apply[A](elems:A*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "Operator", "tail" : "", "member" : "monix.reactive.Observable.Operator", "link" : "monix\/reactive\/Observable$.html#Operator[-I,+O]=monix.reactive.observers.Subscriber[O]=>monix.reactive.observers.Subscriber[I]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Observable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Observable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Observable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Observable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Observable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Observable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Observable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Observable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Observable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Observable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Observable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Observable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Observable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Observable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Observable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Observable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/Observable.html", "kind" : "class"}, {"name" : "monix.reactive.Observer", "members_trait" : [{"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "monix\/reactive\/Observer.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Observer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Observer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "monix\/reactive\/Observer.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "monix\/reactive\/Observer.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "monix\/reactive\/Observer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "monix\/reactive\/Observer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "monix\/reactive\/Observer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.Observer.onComplete", "link" : "monix\/reactive\/Observer.html#onComplete():Unit", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.Observer.onError", "link" : "monix\/reactive\/Observer.html#onError(ex:Throwable):Unit", "kind" : "abstract def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.Observer.onNext", "link" : "monix\/reactive\/Observer.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "monix\/reactive\/Observer.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "The Observer from the Rx pattern is the trio of callbacks thatget subscribed to an Observablefor receiving events.", "object" : "monix\/reactive\/Observer$.html", "members_object" : [{"label" : "Extensions", "tail" : "", "member" : "monix.reactive.Observer.Extensions", "link" : "monix\/reactive\/Observer$.html#Extensions[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "feed", "tail" : "(target: Observer[A], subscription: BooleanCancelable, iterator: Iterator[A])(s: Scheduler): Future[Ack]", "member" : "monix.reactive.Observer.feed", "link" : "monix\/reactive\/Observer$.html#feed[A](target:monix.reactive.Observer[A],subscription:monix.execution.cancelables.BooleanCancelable,iterator:Iterator[A])(implicits:monix.execution.Scheduler):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "feed", "tail" : "(target: Observer[A], iterator: Iterator[A])(s: Scheduler): Future[Ack]", "member" : "monix.reactive.Observer.feed", "link" : "monix\/reactive\/Observer$.html#feed[A](target:monix.reactive.Observer[A],iterator:Iterator[A])(implicits:monix.execution.Scheduler):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "feed", "tail" : "(target: Observer[A], subscription: BooleanCancelable, iterable: Iterable[A])(s: Scheduler): Future[Ack]", "member" : "monix.reactive.Observer.feed", "link" : "monix\/reactive\/Observer$.html#feed[A](target:monix.reactive.Observer[A],subscription:monix.execution.cancelables.BooleanCancelable,iterable:Iterable[A])(implicits:monix.execution.Scheduler):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "feed", "tail" : "(target: Observer[A], iterable: Iterable[A])(s: Scheduler): Future[Ack]", "member" : "monix.reactive.Observer.feed", "link" : "monix\/reactive\/Observer$.html#feed[A](target:monix.reactive.Observer[A],iterable:Iterable[A])(implicits:monix.execution.Scheduler):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "toReactiveSubscriber", "tail" : "(observer: Observer[A], requestCount: Int)(s: Scheduler): Subscriber[A]", "member" : "monix.reactive.Observer.toReactiveSubscriber", "link" : "monix\/reactive\/Observer$.html#toReactiveSubscriber[A](observer:monix.reactive.Observer[A],requestCount:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Subscriber[A]", "kind" : "def"}, {"label" : "toReactiveSubscriber", "tail" : "(observer: Observer[A])(s: Scheduler): Subscriber[A]", "member" : "monix.reactive.Observer.toReactiveSubscriber", "link" : "monix\/reactive\/Observer$.html#toReactiveSubscriber[A](observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):org.reactivestreams.Subscriber[A]", "kind" : "def"}, {"label" : "fromReactiveSubscriber", "tail" : "(subscriber: Subscriber[A], subscription: Cancelable)(s: Scheduler): Observer[A]", "member" : "monix.reactive.Observer.fromReactiveSubscriber", "link" : "monix\/reactive\/Observer$.html#fromReactiveSubscriber[A](subscriber:org.reactivestreams.Subscriber[A],subscription:monix.execution.Cancelable)(implicits:monix.execution.Scheduler):monix.reactive.Observer[A]", "kind" : "def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Sync[A]", "member" : "monix.reactive.Observer.dump", "link" : "monix\/reactive\/Observer$.html#dump[A](prefix:String,out:java.io.PrintStream):monix.reactive.Observer.Sync[A]", "kind" : "def"}, {"label" : "stopped", "tail" : "(): Sync[A]", "member" : "monix.reactive.Observer.stopped", "link" : "monix\/reactive\/Observer$.html#stopped[A]:monix.reactive.Observer.Sync[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(r: UncaughtExceptionReporter): Sync[A]", "member" : "monix.reactive.Observer.empty", "link" : "monix\/reactive\/Observer$.html#empty[A](implicitr:monix.execution.UncaughtExceptionReporter):monix.reactive.Observer.Sync[A]", "kind" : "def"}, {"label" : "Sync", "tail" : "", "member" : "monix.reactive.Observer.Sync", "link" : "monix\/reactive\/Observer$.html#Sync[-A]extendsObserver[A]", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Observer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Observer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Observer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Observer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Observer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Observer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Observer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Observer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Observer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Observer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Observer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Observer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Observer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Observer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Observer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Observer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/reactive\/Observer.html", "kind" : "trait"}, {"name" : "monix.reactive.OverflowStrategy", "shortDescription" : "Represents the buffering overflowStrategy chosen for actions thatneed buffering, instructing the pipeline what to do whenthe buffer is full.", "object" : "monix\/reactive\/OverflowStrategy$.html", "members_class" : [{"label" : "isSynchronous", "tail" : ": Boolean", "member" : "monix.reactive.OverflowStrategy.isSynchronous", "link" : "monix\/reactive\/OverflowStrategy.html#isSynchronous:Boolean", "kind" : "val"}, {"label" : "isEvicted", "tail" : ": Boolean", "member" : "monix.reactive.OverflowStrategy.isEvicted", "link" : "monix\/reactive\/OverflowStrategy.html#isEvicted:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/OverflowStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/OverflowStrategy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/OverflowStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/OverflowStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/OverflowStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/OverflowStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/OverflowStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/OverflowStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/OverflowStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/OverflowStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/OverflowStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/OverflowStrategy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/OverflowStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/OverflowStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/OverflowStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/OverflowStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Default", "tail" : "(): OverflowStrategy[A]", "member" : "monix.reactive.OverflowStrategy.Default", "link" : "monix\/reactive\/OverflowStrategy$.html#Default[A]:monix.reactive.OverflowStrategy[A]", "kind" : "final def"}, {"label" : "Evicted", "tail" : "", "member" : "monix.reactive.OverflowStrategy.Evicted", "link" : "monix\/reactive\/OverflowStrategy$.html#Evicted[A]extendsOverflowStrategy.Synchronous[A]", "kind" : "sealed abstract class"}, {"label" : "Synchronous", "tail" : "", "member" : "monix.reactive.OverflowStrategy.Synchronous", "link" : "monix\/reactive\/OverflowStrategy$.html#Synchronous[+A]extendsOverflowStrategy[A]", "kind" : "sealed abstract class"}, {"label" : "ClearBufferAndSignal", "tail" : "", "member" : "monix.reactive.OverflowStrategy.ClearBufferAndSignal", "link" : "monix\/reactive\/OverflowStrategy$.html#ClearBufferAndSignal[A]extendsOverflowStrategy.Evicted[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "ClearBuffer", "tail" : "", "member" : "monix.reactive.OverflowStrategy.ClearBuffer", "link" : "monix\/reactive\/OverflowStrategy$.html#ClearBufferextendsOverflowStrategy.Evicted[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "DropOldAndSignal", "tail" : "", "member" : "monix.reactive.OverflowStrategy.DropOldAndSignal", "link" : "monix\/reactive\/OverflowStrategy$.html#DropOldAndSignal[A]extendsOverflowStrategy.Evicted[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "DropOld", "tail" : "", "member" : "monix.reactive.OverflowStrategy.DropOld", "link" : "monix\/reactive\/OverflowStrategy$.html#DropOldextendsOverflowStrategy.Evicted[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "DropNewAndSignal", "tail" : "", "member" : "monix.reactive.OverflowStrategy.DropNewAndSignal", "link" : "monix\/reactive\/OverflowStrategy$.html#DropNewAndSignal[A]extendsOverflowStrategy.Evicted[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "DropNew", "tail" : "", "member" : "monix.reactive.OverflowStrategy.DropNew", "link" : "monix\/reactive\/OverflowStrategy$.html#DropNewextendsOverflowStrategy.Evicted[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "BackPressure", "tail" : "", "member" : "monix.reactive.OverflowStrategy.BackPressure", "link" : "monix\/reactive\/OverflowStrategy$.html#BackPressureextendsOverflowStrategy[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Fail", "tail" : "", "member" : "monix.reactive.OverflowStrategy.Fail", "link" : "monix\/reactive\/OverflowStrategy$.html#FailextendsOverflowStrategy.Synchronous[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Unbounded", "tail" : "", "member" : "monix.reactive.OverflowStrategy.Unbounded", "link" : "monix\/reactive\/OverflowStrategy$.html#Unbounded", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/OverflowStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/OverflowStrategy$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/OverflowStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/OverflowStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/OverflowStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/OverflowStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/OverflowStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/OverflowStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/OverflowStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/OverflowStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/OverflowStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/OverflowStrategy$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/OverflowStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/OverflowStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/OverflowStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/OverflowStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/OverflowStrategy.html", "kind" : "class"}, {"name" : "monix.reactive.Pipe", "shortDescription" : "Represents a factory for an input\/output channel forbroadcasting input to multiple subscribers.", "object" : "monix\/reactive\/Pipe$.html", "members_class" : [{"label" : "transform", "tail" : "(f: (Observable[O]) ⇒ Observable[B]): Pipe[I, B]", "member" : "monix.reactive.Pipe.transform", "link" : "monix\/reactive\/Pipe.html#transform[B](f:monix.reactive.Observable[O]=>monix.reactive.Observable[B]):monix.reactive.Pipe[I,B]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(op: Operator[O, B]): Pipe[I, B]", "member" : "monix.reactive.Pipe.liftByOperator", "link" : "monix\/reactive\/Pipe.html#liftByOperator[B](op:monix.reactive.Observable.Operator[O,B]):monix.reactive.Pipe[I,B]", "kind" : "final def"}, {"label" : "concurrent", "tail" : "(strategy: Synchronous[I])(s: Scheduler): (Sync[I], Observable[O])", "member" : "monix.reactive.Pipe.concurrent", "link" : "monix\/reactive\/Pipe.html#concurrent(strategy:monix.reactive.OverflowStrategy.Synchronous[I])(implicits:monix.execution.Scheduler):(monix.reactive.Observer.Sync[I],monix.reactive.Observable[O])", "kind" : "def"}, {"label" : "concurrent", "tail" : "(s: Scheduler): (Sync[I], Observable[O])", "member" : "monix.reactive.Pipe.concurrent", "link" : "monix\/reactive\/Pipe.html#concurrent(implicits:monix.execution.Scheduler):(monix.reactive.Observer.Sync[I],monix.reactive.Observable[O])", "kind" : "def"}, {"label" : "multicast", "tail" : "(s: Scheduler): (Observer[I], Observable[O])", "member" : "monix.reactive.Pipe.multicast", "link" : "monix\/reactive\/Pipe.html#multicast(implicits:monix.execution.Scheduler):(monix.reactive.Observer[I],monix.reactive.Observable[O])", "kind" : "def"}, {"member" : "monix.reactive.Pipe#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Pipe.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Pipe.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Pipe.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Pipe.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Pipe.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Pipe.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Pipe.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Pipe.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Pipe.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Pipe.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Pipe.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Pipe.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Pipe.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Pipe.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Pipe.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Pipe.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unicast", "tail" : "(): (Observer[I], Observable[O])", "member" : "monix.reactive.Pipe.unicast", "link" : "monix\/reactive\/Pipe.html#unicast:(monix.reactive.Observer[I],monix.reactive.Observable[O])", "kind" : "abstract def"}], "members_object" : [{"label" : "replayLimited", "tail" : "(capacity: Int, initial: Seq[A]): Pipe[A, A]", "member" : "monix.reactive.Pipe.replayLimited", "link" : "monix\/reactive\/Pipe$.html#replayLimited[A](capacity:Int,initial:Seq[A]):monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int): Pipe[A, A]", "member" : "monix.reactive.Pipe.replayLimited", "link" : "monix\/reactive\/Pipe$.html#replayLimited[A](capacity:Int):monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(initial: Seq[A]): Pipe[A, A]", "member" : "monix.reactive.Pipe.replay", "link" : "monix\/reactive\/Pipe$.html#replay[A](initial:Seq[A]):monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(): Pipe[A, A]", "member" : "monix.reactive.Pipe.replay", "link" : "monix\/reactive\/Pipe$.html#replay[A]:monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "async", "tail" : "(): Pipe[A, A]", "member" : "monix.reactive.Pipe.async", "link" : "monix\/reactive\/Pipe$.html#async[A]:monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "behavior", "tail" : "(initial: A): Pipe[A, A]", "member" : "monix.reactive.Pipe.behavior", "link" : "monix\/reactive\/Pipe$.html#behavior[A](initial:A):monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "publishToOne", "tail" : "(): Pipe[A, A]", "member" : "monix.reactive.Pipe.publishToOne", "link" : "monix\/reactive\/Pipe$.html#publishToOne[A]:monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "publish", "tail" : "(): Pipe[A, A]", "member" : "monix.reactive.Pipe.publish", "link" : "monix\/reactive\/Pipe$.html#publish[A]:monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(strategy: MulticastStrategy[A]): Pipe[A, A]", "member" : "monix.reactive.Pipe.apply", "link" : "monix\/reactive\/Pipe$.html#apply[A](strategy:monix.reactive.MulticastStrategy[A]):monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Pipe$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Pipe$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Pipe$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Pipe$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Pipe$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Pipe$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Pipe$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Pipe$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Pipe$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Pipe$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Pipe$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Pipe$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Pipe$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Pipe$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Pipe$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Pipe$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/Pipe.html", "kind" : "class"}], "monix.tail" : [{"name" : "monix.tail.Iterant", "shortDescription" : "The Iterant is a type that describes lazy, possibly asynchronousstreaming of elements using a pull-based protocol.", "object" : "monix\/tail\/Iterant$.html", "members_class" : [{"label" : "zipWithIndex", "tail" : "(F: Sync[F]): Iterant[F, (A, Long)]", "member" : "monix.tail.Iterant.zipWithIndex", "link" : "monix\/tail\/Iterant.html#zipWithIndex(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(rhs: Iterant[F, B])(f: (A, B) ⇒ C)(F: Sync[F]): Iterant[F, C]", "member" : "monix.tail.Iterant.zipMap", "link" : "monix\/tail\/Iterant.html#zipMap[B,C](rhs:monix.tail.Iterant[F,B])(f:(A,B)=>C)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,C]", "kind" : "final def"}, {"label" : "zip", "tail" : "(rhs: Iterant[F, B])(F: Sync[F]): Iterant[F, (A, B)]", "member" : "monix.tail.Iterant.zip", "link" : "monix\/tail\/Iterant.html#zip[B](rhs:monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,(A,B)]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(F: Sync[F]): F[List[A]]", "member" : "monix.tail.Iterant.toListL", "link" : "monix\/tail\/Iterant.html#toListL(implicitF:cats.effect.Sync[F]):F[List[A]]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(F: Sync[F], A: Numeric[A]): F[A]", "member" : "monix.tail.Iterant.sumL", "link" : "monix\/tail\/Iterant.html#sumL(implicitF:cats.effect.Sync[F],implicitA:Numeric[A]):F[A]", "kind" : "final def"}, {"label" : "skipSuspendL", "tail" : "(F: Sync[F]): F[Iterant[F, A]]", "member" : "monix.tail.Iterant.skipSuspendL", "link" : "monix\/tail\/Iterant.html#skipSuspendL(implicitF:cats.effect.Sync[F]):F[monix.tail.Iterant[F,A]]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) ⇒ B)(F: Sync[F], B: Monoid[B]): Iterant[F, B]", "member" : "monix.tail.Iterant.scanMap", "link" : "monix\/tail\/Iterant.html#scanMap[B](f:A=>B)(implicitF:cats.effect.Sync[F],implicitB:cats.Monoid[B]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[S])(F: Sync[F]): Iterant[F, S]", "member" : "monix.tail.Iterant.scanEval", "link" : "monix\/tail\/Iterant.html#scanEval[S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S)(F: Sync[F]): Iterant[F, S]", "member" : "monix.tail.Iterant.scan", "link" : "monix\/tail\/Iterant.html#scan[S](seed:=>S)(op:(S,A)=>S)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,S]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(F: Effect[F], ec: Scheduler): Publisher[A]", "member" : "monix.tail.Iterant.toReactivePublisher", "link" : "monix\/tail\/Iterant.html#toReactivePublisher(implicitF:cats.effect.Effect[F],implicitec:monix.execution.Scheduler):org.reactivestreams.Publisher[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(rhs: Iterant[F, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.interleave", "link" : "monix\/tail\/Iterant.html#interleave[B>:A](rhs:monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "tail", "tail" : "(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.tail", "link" : "monix\/tail\/Iterant.html#tail(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.takeEveryNth", "link" : "monix\/tail\/Iterant.html#takeEveryNth(n:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "takeWhileWithIndex", "tail" : "(p: (A, Long) ⇒ Boolean)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.takeWhileWithIndex", "link" : "monix\/tail\/Iterant.html#takeWhileWithIndex(p:(A,Long)=>Boolean)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.takeWhile", "link" : "monix\/tail\/Iterant.html#takeWhile(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.takeLast", "link" : "monix\/tail\/Iterant.html#takeLast(n:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.take", "link" : "monix\/tail\/Iterant.html#take(n:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "unsafeFlatMap", "tail" : "(f: (A) ⇒ Iterant[F, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.unsafeFlatMap", "link" : "monix\/tail\/Iterant.html#unsafeFlatMap[B](f:A=>monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "parZipMap", "tail" : "(rhs: Iterant[F, B])(f: (A, B) ⇒ C)(F: Sync[F], P: Parallel[F, G]): Iterant[F, C]", "member" : "monix.tail.Iterant.parZipMap", "link" : "monix\/tail\/Iterant.html#parZipMap[G[_],B,C](rhs:monix.tail.Iterant[F,B])(f:(A,B)=>C)(implicitF:cats.effect.Sync[F],implicitP:cats.Parallel[F,G]):monix.tail.Iterant[F,C]", "kind" : "final def"}, {"label" : "parZip", "tail" : "(rhs: Iterant[F, B])(F: Sync[F], P: Parallel[F, G]): Iterant[F, (A, B)]", "member" : "monix.tail.Iterant.parZip", "link" : "monix\/tail\/Iterant.html#parZip[G[_],B](rhs:monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F],implicitP:cats.Parallel[F,G]):monix.tail.Iterant[F,(A,B)]", "kind" : "final def"}, {"label" : "onErrorIgnore", "tail" : "(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.onErrorIgnore", "link" : "monix\/tail\/Iterant.html#onErrorIgnore(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) ⇒ B)(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.onErrorHandle", "link" : "monix\/tail\/Iterant.html#onErrorHandle[B>:A](f:Throwable=>B)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.onErrorRecover", "link" : "monix\/tail\/Iterant.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) ⇒ Iterant[F, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.onErrorHandleWith", "link" : "monix\/tail\/Iterant.html#onErrorHandleWith[B>:A](f:Throwable=>monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Iterant[F, B]])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.onErrorRecoverWith", "link" : "monix\/tail\/Iterant.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.tail.Iterant[F,B]])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.repeat", "link" : "monix\/tail\/Iterant.html#repeat(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "reduceL", "tail" : "(op: (A, A) ⇒ A)(F: Sync[F]): F[Option[A]]", "member" : "monix.tail.Iterant.reduceL", "link" : "monix\/tail\/Iterant.html#reduceL(op:(A,A)=>A)(implicitF:cats.effect.Sync[F]):F[Option[A]]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Iterant[F, A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.switchIfEmpty", "link" : "monix\/tail\/Iterant.html#switchIfEmpty(backup:monix.tail.Iterant[F,A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "minL", "tail" : "(F: Sync[F], A: Order[A]): F[Option[A]]", "member" : "monix.tail.Iterant.minL", "link" : "monix\/tail\/Iterant.html#minL(implicitF:cats.effect.Sync[F],implicitA:cats.Order[A]):F[Option[A]]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) ⇒ K)(F: Sync[F], K: Order[K]): F[Option[A]]", "member" : "monix.tail.Iterant.minByL", "link" : "monix\/tail\/Iterant.html#minByL[K](key:A=>K)(implicitF:cats.effect.Sync[F],implicitK:cats.Order[K]):F[Option[A]]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(F: Sync[F], A: Order[A]): F[Option[A]]", "member" : "monix.tail.Iterant.maxL", "link" : "monix\/tail\/Iterant.html#maxL(implicitF:cats.effect.Sync[F],implicitA:cats.Order[A]):F[Option[A]]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) ⇒ K)(F: Sync[F], K: Order[K]): F[Option[A]]", "member" : "monix.tail.Iterant.maxByL", "link" : "monix\/tail\/Iterant.html#maxByL[K](key:A=>K)(implicitF:cats.effect.Sync[F],implicitK:cats.Order[K]):F[Option[A]]", "kind" : "final def"}, {"label" : "liftMapK", "tail" : "(f: FunctionK[F, G])(G: Sync[G]): Iterant[G, A]", "member" : "monix.tail.Iterant.liftMapK", "link" : "monix\/tail\/Iterant.html#liftMapK[G[_]](f:cats.arrow.FunctionK[F,G])(implicitG:cats.effect.Sync[G]):monix.tail.Iterant[G,A]", "kind" : "final def"}, {"label" : "liftMap", "tail" : "(f1: (F[Iterant[F, A]]) ⇒ G[Iterant[F, A]], f2: (F[Unit]) ⇒ G[Unit])(F: Applicative[F], G: Sync[G]): Iterant[G, A]", "member" : "monix.tail.Iterant.liftMap", "link" : "monix\/tail\/Iterant.html#liftMap[G[_]](f1:F[monix.tail.Iterant[F,A]]=>G[monix.tail.Iterant[F,A]],f2:F[Unit]=>G[Unit])(implicitF:cats.Applicative[F],implicitG:cats.effect.Sync[G]):monix.tail.Iterant[G,A]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: A, separator: A, end: A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.intersperse", "link" : "monix\/tail\/Iterant.html#intersperse(start:A,separator:A,end:A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.intersperse", "link" : "monix\/tail\/Iterant.html#intersperse(separator:A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "foldRightL", "tail" : "(b: F[B])(f: (A, F[B], F[Unit]) ⇒ F[B])(F: Sync[F]): F[B]", "member" : "monix.tail.Iterant.foldRightL", "link" : "monix\/tail\/Iterant.html#foldRightL[B](b:F[B])(f:(A,F[B],F[Unit])=>F[B])(implicitF:cats.effect.Sync[F]):F[B]", "kind" : "final def"}, {"label" : "foldWhileLeftEvalL", "tail" : "(seed: F[S])(op: (S, A) ⇒ F[Either[S, S]])(F: Sync[F]): F[S]", "member" : "monix.tail.Iterant.foldWhileLeftEvalL", "link" : "monix\/tail\/Iterant.html#foldWhileLeftEvalL[S](seed:F[S])(op:(S,A)=>F[Either[S,S]])(implicitF:cats.effect.Sync[F]):F[S]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ S)(F: Sync[F]): F[S]", "member" : "monix.tail.Iterant.foldLeftL", "link" : "monix\/tail\/Iterant.html#foldLeftL[S](seed:=>S)(op:(S,A)=>S)(implicitF:cats.effect.Sync[F]):F[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(F: Sync[F], A: Monoid[A]): F[A]", "member" : "monix.tail.Iterant.foldL", "link" : "monix\/tail\/Iterant.html#foldL(implicitF:cats.effect.Sync[F],implicitA:cats.Monoid[A]):F[A]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) ⇒ Boolean)(F: Sync[F]): F[Option[A]]", "member" : "monix.tail.Iterant.findL", "link" : "monix\/tail\/Iterant.html#findL(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):F[Option[A]]", "kind" : "def"}, {"label" : "mapEval", "tail" : "(f: (A) ⇒ F[B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.mapEval", "link" : "monix\/tail\/Iterant.html#mapEval[B](f:A=>F[B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(F: Sync[F]): F[Option[A]]", "member" : "monix.tail.Iterant.headOptionL", "link" : "monix\/tail\/Iterant.html#headOptionL(implicitF:cats.effect.Sync[F]):F[Option[A]]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B)(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.map", "link" : "monix\/tail\/Iterant.html#map[B](f:A=>B)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "completeL", "tail" : "(F: Sync[F]): F[Unit]", "member" : "monix.tail.Iterant.completeL", "link" : "monix\/tail\/Iterant.html#completeL(implicitF:cats.effect.Sync[F]):F[Unit]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) ⇒ Unit)(F: Sync[F]): F[Unit]", "member" : "monix.tail.Iterant.foreach", "link" : "monix\/tail\/Iterant.html#foreach(cb:A=>Unit)(implicitF:cats.effect.Sync[F]):F[Unit]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) ⇒ Boolean)(F: Sync[F]): F[Boolean]", "member" : "monix.tail.Iterant.forallL", "link" : "monix\/tail\/Iterant.html#forallL(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):F[Boolean]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.filter", "link" : "monix\/tail\/Iterant.html#filter(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: ⇒ S)(op: (S, A) ⇒ Either[S, S])(F: Sync[F]): F[S]", "member" : "monix.tail.Iterant.foldWhileLeftL", "link" : "monix\/tail\/Iterant.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S])(implicitF:cats.effect.Sync[F]):F[S]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) ⇒ Boolean)(F: Sync[F]): F[Boolean]", "member" : "monix.tail.Iterant.existsL", "link" : "monix\/tail\/Iterant.html#existsL(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):F[Boolean]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.dump", "link" : "monix\/tail\/Iterant.html#dump(prefix:String,out:java.io.PrintStream)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) ⇒ Boolean)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.dropWhileWithIndex", "link" : "monix\/tail\/Iterant.html#dropWhileWithIndex(p:(A,Int)=>Boolean)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.dropWhile", "link" : "monix\/tail\/Iterant.html#dropWhile(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.dropLast", "link" : "monix\/tail\/Iterant.html#dropLast(n:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.drop", "link" : "monix\/tail\/Iterant.html#drop(n:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "doOnFinish", "tail" : "(f: (Option[Throwable]) ⇒ F[Unit])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.doOnFinish", "link" : "monix\/tail\/Iterant.html#doOnFinish(f:Option[Throwable]=>F[Unit])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(f: F[Unit])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.doOnEarlyStop", "link" : "monix\/tail\/Iterant.html#doOnEarlyStop(f:F[Unit])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) ⇒ K)(F: Sync[F], K: Eq[K]): Iterant[F, A]", "member" : "monix.tail.Iterant.distinctUntilChangedByKey", "link" : "monix\/tail\/Iterant.html#distinctUntilChangedByKey[K](key:A=>K)(implicitF:cats.effect.Sync[F],implicitK:cats.Eq[K]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(F: Sync[F], A: Eq[A]): Iterant[F, A]", "member" : "monix.tail.Iterant.distinctUntilChanged", "link" : "monix\/tail\/Iterant.html#distinctUntilChanged(implicitF:cats.effect.Sync[F],implicitA:cats.Eq[A]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(F: Sync[F]): F[Long]", "member" : "monix.tail.Iterant.countL", "link" : "monix\/tail\/Iterant.html#countL(implicitF:cats.effect.Sync[F]):F[Long]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Iterant[F, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.flatMap", "link" : "monix\/tail\/Iterant.html#flatMap[B](f:A=>monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) ⇒ Iterant[F, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.concatMap", "link" : "monix\/tail\/Iterant.html#concatMap[B](f:A=>monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Iterant[F, B]], F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.flatten", "link" : "monix\/tail\/Iterant.html#flatten[B](implicitev:A<:<monix.tail.Iterant[F,B],implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Iterant[F, B]], F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.concat", "link" : "monix\/tail\/Iterant.html#concat[B](implicitev:A<:<monix.tail.Iterant[F,B],implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.collect", "link" : "monix\/tail\/Iterant.html#collect[B](pf:PartialFunction[A,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int)(F: Sync[F]): Iterant[F, Seq[A]]", "member" : "monix.tail.Iterant.bufferSliding", "link" : "monix\/tail\/Iterant.html#bufferSliding(count:Int,skip:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int)(F: Sync[F]): Iterant[F, Seq[A]]", "member" : "monix.tail.Iterant.bufferTumbling", "link" : "monix\/tail\/Iterant.html#bufferTumbling(count:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,Seq[A]]", "kind" : "def"}, {"label" : "batched", "tail" : "(count: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.batched", "link" : "monix\/tail\/Iterant.html#batched(count:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(F: Sync[F]): Iterant[F, Either[Throwable, A]]", "member" : "monix.tail.Iterant.attempt", "link" : "monix\/tail\/Iterant.html#attempt(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,Either[Throwable,A]]", "kind" : "final def"}, {"label" : "upcast", "tail" : "(): Iterant[F, B]", "member" : "monix.tail.Iterant.upcast", "link" : "monix\/tail\/Iterant.html#upcast[B>:A]:monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "++", "tail" : "(rhs: Iterant[F, B])(F: Applicative[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.++", "link" : "monix\/tail\/Iterant.html#++[B>:A](rhs:monix.tail.Iterant[F,B])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B)(F: Applicative[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.:+", "link" : "monix\/tail\/Iterant.html#:+[B>:A](elem:B)(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(head: B)(F: Applicative[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.+:", "link" : "monix\/tail\/Iterant.html#+:[B>:A](head:B)(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "++", "tail" : "(rhs: F[Iterant[F, B]])(F: Applicative[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.++", "link" : "monix\/tail\/Iterant.html#++[B>:A](rhs:F[monix.tail.Iterant[F,B]])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "monix\/tail\/Iterant.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "monix\/tail\/Iterant.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/Iterant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/Iterant.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/Iterant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/Iterant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/Iterant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/Iterant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/Iterant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/Iterant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/Iterant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/Iterant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/Iterant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/Iterant.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/Iterant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/Iterant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/Iterant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/Iterant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "earlyStop", "tail" : "(F: Applicative[F]): F[Unit]", "member" : "monix.tail.Iterant.earlyStop", "link" : "monix\/tail\/Iterant.html#earlyStop(implicitF:cats.Applicative[F]):F[Unit]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "monix\/tail\/Iterant.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "monix\/tail\/Iterant.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "monix\/tail\/Iterant.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "CatsAsyncInstances", "tail" : "", "member" : "monix.tail.IterantInstances1.CatsAsyncInstances", "link" : "monix\/tail\/Iterant$.html#CatsAsyncInstances[F[_]]extendsIterantInstances1.this.CatsSyncInstances[F]withAsync[[α]monix.tail.Iterant[F,α]]", "kind" : "class"}, {"label" : "CatsSyncInstances", "tail" : "", "member" : "monix.tail.IterantInstances0.CatsSyncInstances", "link" : "monix\/tail\/Iterant$.html#CatsSyncInstances[F[_]]extendsSync[[α]monix.tail.Iterant[F,α]]withMonoidK[[α]monix.tail.Iterant[F,α]]withCoflatMap[[α]monix.tail.Iterant[F,α]]", "kind" : "class"}, {"label" : "Halt", "tail" : "", "member" : "monix.tail.Iterant.Halt", "link" : "monix\/tail\/Iterant$.html#Halt[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Suspend", "tail" : "", "member" : "monix.tail.Iterant.Suspend", "link" : "monix\/tail\/Iterant$.html#Suspend[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "NextBatch", "tail" : "", "member" : "monix.tail.Iterant.NextBatch", "link" : "monix\/tail\/Iterant$.html#NextBatch[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "NextCursor", "tail" : "", "member" : "monix.tail.Iterant.NextCursor", "link" : "monix\/tail\/Iterant$.html#NextCursor[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Last", "tail" : "", "member" : "monix.tail.Iterant.Last", "link" : "monix\/tail\/Iterant$.html#Last[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Next", "tail" : "", "member" : "monix.tail.Iterant.Next", "link" : "monix\/tail\/Iterant$.html#Next[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "intervalWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(F: Async[F], timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.Iterant.intervalWithFixedDelay", "link" : "monix\/tail\/Iterant$.html#intervalWithFixedDelay[F[_]](initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(implicitF:cats.effect.Async[F],implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"label" : "intervalWithFixedDelay", "tail" : "(delay: FiniteDuration)(F: Async[F], timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.Iterant.intervalWithFixedDelay", "link" : "monix\/tail\/Iterant$.html#intervalWithFixedDelay[F[_]](delay:scala.concurrent.duration.FiniteDuration)(implicitF:cats.effect.Async[F],implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"label" : "intervalAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(F: Async[F], timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.Iterant.intervalAtFixedRate", "link" : "monix\/tail\/Iterant$.html#intervalAtFixedRate[F[_]](initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(implicitF:cats.effect.Async[F],implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"label" : "intervalAtFixedRate", "tail" : "(period: FiniteDuration)(F: Async[F], timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.Iterant.intervalAtFixedRate", "link" : "monix\/tail\/Iterant$.html#intervalAtFixedRate[F[_]](period:scala.concurrent.duration.FiniteDuration)(implicitF:cats.effect.Async[F],implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Iterant[F, A]", "member" : "monix.tail.Iterant.empty", "link" : "monix\/tail\/Iterant$.html#empty[F[_],A]:monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "repeatEvalF", "tail" : "(fa: F[A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.repeatEvalF", "link" : "monix\/tail\/Iterant$.html#repeatEvalF[F[_],A](fa:F[A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "repeatEval", "tail" : "(thunk: ⇒ A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.repeatEval", "link" : "monix\/tail\/Iterant$.html#repeatEval[F[_],A](thunk:=>A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(elems: A*)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.repeat", "link" : "monix\/tail\/Iterant$.html#repeat[F[_],A](elems:A*)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "range", "tail" : "(from: Int, until: Int, step: Int)(F: Applicative[F]): Iterant[F, Int]", "member" : "monix.tail.Iterant.range", "link" : "monix\/tail\/Iterant$.html#range[F[_]](from:Int,until:Int,step:Int)(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,Int]", "kind" : "def"}, {"label" : "fromStateActionL", "tail" : "(f: (S) ⇒ F[(A, S)])(seed: ⇒ F[S])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromStateActionL", "link" : "monix\/tail\/Iterant$.html#fromStateActionL[F[_],S,A](f:S=>F[(A,S)])(seed:=>F[S])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromStateAction", "tail" : "(f: (S) ⇒ (A, S))(seed: ⇒ S)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromStateAction", "link" : "monix\/tail\/Iterant$.html#fromStateAction[F[_],S,A](f:S=>(A,S))(seed:=>S)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(xs: Iterator[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromIterator", "link" : "monix\/tail\/Iterant$.html#fromIterator[F[_],A](xs:Iterator[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(xs: Iterable[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromIterable", "link" : "monix\/tail\/Iterant$.html#fromIterable[F[_],A](xs:Iterable[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIndexedSeq", "tail" : "(xs: IndexedSeq[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromIndexedSeq", "link" : "monix\/tail\/Iterant$.html#fromIndexedSeq[F[_],A](xs:IndexedSeq[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromList", "tail" : "(xs: LinearSeq[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromList", "link" : "monix\/tail\/Iterant$.html#fromList[F[_],A](xs:scala.collection.immutable.LinearSeq[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(xs: Seq[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromSeq", "link" : "monix\/tail\/Iterant$.html#fromSeq[F[_],A](xs:Seq[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(xs: Array[A])(arg0: ClassTag[A], F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromArray", "link" : "monix\/tail\/Iterant$.html#fromArray[F[_],A](xs:Array[A])(implicitevidence$1:scala.reflect.ClassTag[A],implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Iterant[F, Either[A, B]])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.tailRecM", "link" : "monix\/tail\/Iterant$.html#tailRecM[F[_],A,B](a:A)(f:A=>monix.tail.Iterant[F,Either[A,B]])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Iterant[F, A]", "member" : "monix.tail.Iterant.raiseError", "link" : "monix\/tail\/Iterant$.html#raiseError[F[_],A](ex:Throwable):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspendS", "tail" : "(rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.Iterant.suspendS", "link" : "monix\/tail\/Iterant$.html#suspendS[F[_],A](rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(rest: F[Iterant[F, A]])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.suspend", "link" : "monix\/tail\/Iterant$.html#suspend[F[_],A](rest:F[monix.tail.Iterant[F,A]])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: ⇒ Iterant[F, A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.suspend", "link" : "monix\/tail\/Iterant$.html#suspend[F[_],A](fa:=>monix.tail.Iterant[F,A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: ⇒ Iterant[F, A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.defer", "link" : "monix\/tail\/Iterant$.html#defer[F[_],A](fa:=>monix.tail.Iterant[F,A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "haltS", "tail" : "(e: Option[Throwable]): Iterant[F, A]", "member" : "monix.tail.Iterant.haltS", "link" : "monix\/tail\/Iterant$.html#haltS[F[_],A](e:Option[Throwable]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextBatchS", "tail" : "(items: Batch[A], rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.Iterant.nextBatchS", "link" : "monix\/tail\/Iterant$.html#nextBatchS[F[_],A](items:monix.tail.batches.Batch[A],rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextCursorS", "tail" : "(items: BatchCursor[A], rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.Iterant.nextCursorS", "link" : "monix\/tail\/Iterant$.html#nextCursorS[F[_],A](items:monix.tail.batches.BatchCursor[A],rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextS", "tail" : "(item: A, rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.Iterant.nextS", "link" : "monix\/tail\/Iterant$.html#nextS[F[_],A](item:A,rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "liftF", "tail" : "(fa: F[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.liftF", "link" : "monix\/tail\/Iterant$.html#liftF[F[_],A](fa:F[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: ⇒ A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.eval", "link" : "monix\/tail\/Iterant$.html#eval[F[_],A](a:=>A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "lastS", "tail" : "(item: A): Iterant[F, A]", "member" : "monix.tail.Iterant.lastS", "link" : "monix\/tail\/Iterant$.html#lastS[F[_],A](item:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.Iterant.now", "link" : "monix\/tail\/Iterant$.html#now[F[_],A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: F[A])(use: (A) ⇒ Iterant[F, B], release: (A) ⇒ F[Unit])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.bracket", "link" : "monix\/tail\/Iterant$.html#bracket[F[_],A,B](acquire:F[A])(use:A=>monix.tail.Iterant[F,B],release:A=>F[Unit])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.Iterant.pure", "link" : "monix\/tail\/Iterant$.html#pure[F[_],A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: From[F]): Builders", "member" : "monix.tail.Iterant.apply", "link" : "monix\/tail\/Iterant$.html#apply[F[_]](implicitF:monix.tail.IterantBuilders.From[F]):F.Builders", "kind" : "def"}, {"label" : "catsInstancesForIO", "tail" : ": CatsAsyncInstances[IO]", "member" : "monix.tail.IterantInstances.catsInstancesForIO", "link" : "monix\/tail\/Iterant$.html#catsInstancesForIO:IterantInstances.this.CatsAsyncInstances[cats.effect.IO]", "kind" : "implicit val"}, {"label" : "catsInstancesForCoeval", "tail" : ": CatsSyncInstances[Coeval]", "member" : "monix.tail.IterantInstances.catsInstancesForCoeval", "link" : "monix\/tail\/Iterant$.html#catsInstancesForCoeval:IterantInstances.this.CatsSyncInstances[monix.eval.Coeval]", "kind" : "implicit val"}, {"label" : "catsInstancesForTask", "tail" : ": CatsAsyncInstances[Task]", "member" : "monix.tail.IterantInstances.catsInstancesForTask", "link" : "monix\/tail\/Iterant$.html#catsInstancesForTask:IterantInstances.this.CatsAsyncInstances[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "catsAsyncInstances", "tail" : "(F: Async[F]): CatsAsyncInstances[F]", "member" : "monix.tail.IterantInstances1.catsAsyncInstances", "link" : "monix\/tail\/Iterant$.html#catsAsyncInstances[F[_]](implicitF:cats.effect.Async[F]):IterantInstances1.this.CatsAsyncInstances[F]", "kind" : "implicit def"}, {"label" : "catsSyncInstances", "tail" : "(F: Sync[F]): CatsSyncInstances[F]", "member" : "monix.tail.IterantInstances0.catsSyncInstances", "link" : "monix\/tail\/Iterant$.html#catsSyncInstances[F[_]](implicitF:cats.effect.Sync[F]):IterantInstances0.this.CatsSyncInstances[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/Iterant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/Iterant$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/Iterant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/Iterant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/Iterant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/Iterant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/Iterant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/Iterant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/Iterant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/Iterant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/Iterant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/Iterant$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/Iterant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/Iterant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/Iterant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/Iterant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/Iterant.html", "kind" : "class"}, {"name" : "monix.tail.IterantBuilders", "shortDescription" : "Class defining curried Iterant builders, relieving the user fromspecifying the A parameter explicitly.", "object" : "monix\/tail\/IterantBuilders$.html", "members_class" : [{"label" : "raiseError", "tail" : "(ex: Throwable): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.raiseError", "link" : "monix\/tail\/IterantBuilders.html#raiseError[A](ex:Throwable):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.empty", "link" : "monix\/tail\/IterantBuilders.html#empty[A]:monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "haltS", "tail" : "(e: Option[Throwable]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.haltS", "link" : "monix\/tail\/IterantBuilders.html#haltS[A](e:Option[Throwable]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "lastS", "tail" : "(item: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.lastS", "link" : "monix\/tail\/IterantBuilders.html#lastS[A](item:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspendS", "tail" : "(rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.suspendS", "link" : "monix\/tail\/IterantBuilders.html#suspendS[A](rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextBatchS", "tail" : "(batch: Batch[A], rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextBatchS", "link" : "monix\/tail\/IterantBuilders.html#nextBatchS[A](batch:monix.tail.batches.Batch[A],rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextCursorS", "tail" : "(cursor: BatchCursor[A], rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextCursorS", "link" : "monix\/tail\/IterantBuilders.html#nextCursorS[A](cursor:monix.tail.batches.BatchCursor[A],rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextS", "tail" : "(item: A, rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextS", "link" : "monix\/tail\/IterantBuilders.html#nextS[A](item:A,rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.pure", "link" : "monix\/tail\/IterantBuilders.html#pure[A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.now", "link" : "monix\/tail\/IterantBuilders.html#now[A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"member" : "monix.tail.IterantBuilders#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/IterantBuilders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/IterantBuilders.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/IterantBuilders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/IterantBuilders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/IterantBuilders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/IterantBuilders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/IterantBuilders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuilders.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuilders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuilders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/IterantBuilders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/IterantBuilders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/IterantBuilders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/IterantBuilders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/IterantBuilders.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/IterantBuilders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/IterantBuilders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/IterantBuilders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/IterantBuilders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "From", "tail" : "", "member" : "monix.tail.IterantBuilders.From", "link" : "monix\/tail\/IterantBuilders$.html#From", "kind" : "object"}, {"label" : "From", "tail" : "", "member" : "monix.tail.IterantBuilders.From", "link" : "monix\/tail\/IterantBuilders$.html#From[F[_]]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/IterantBuilders$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/IterantBuilders$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/IterantBuilders$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/IterantBuilders$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/IterantBuilders$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/IterantBuilders$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/IterantBuilders$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuilders$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuilders$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuilders$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/IterantBuilders$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/IterantBuilders$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/IterantBuilders$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/IterantBuilders$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/IterantBuilders$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/IterantBuilders$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/IterantBuilders$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/IterantBuilders$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/IterantBuilders$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/IterantBuilders.html", "kind" : "class"}, {"name" : "monix.tail.IterantBuildersApplicative", "shortDescription" : "Class defining curried Iterant builders for data types thatimplement cats.Applicative.", "members_class" : [{"label" : "range", "tail" : "(from: Int, until: Int, step: Int): Iterant[F, Int]", "member" : "monix.tail.IterantBuildersApplicative.range", "link" : "monix\/tail\/IterantBuildersApplicative.html#range(from:Int,until:Int,step:Int):monix.tail.Iterant[F,Int]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(xs: Iterator[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromIterator", "link" : "monix\/tail\/IterantBuildersApplicative.html#fromIterator[A](xs:Iterator[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(xs: Iterable[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromIterable", "link" : "monix\/tail\/IterantBuildersApplicative.html#fromIterable[A](xs:Iterable[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(xs: Seq[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromSeq", "link" : "monix\/tail\/IterantBuildersApplicative.html#fromSeq[A](xs:Seq[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIndexedSeq", "tail" : "(xs: IndexedSeq[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromIndexedSeq", "link" : "monix\/tail\/IterantBuildersApplicative.html#fromIndexedSeq[A](xs:IndexedSeq[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromList", "tail" : "(xs: LinearSeq[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromList", "link" : "monix\/tail\/IterantBuildersApplicative.html#fromList[A](xs:scala.collection.immutable.LinearSeq[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(xs: Array[A])(arg0: ClassTag[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromArray", "link" : "monix\/tail\/IterantBuildersApplicative.html#fromArray[A](xs:Array[A])(implicitevidence$1:scala.reflect.ClassTag[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(rest: F[Iterant[F, A]]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.suspend", "link" : "monix\/tail\/IterantBuildersApplicative.html#suspend[A](rest:F[monix.tail.Iterant[F,A]]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "liftF", "tail" : "(a: F[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.liftF", "link" : "monix\/tail\/IterantBuildersApplicative.html#liftF[A](a:F[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "of", "tail" : "(elems: A*): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.of", "link" : "monix\/tail\/IterantBuildersApplicative.html#of[A](elems:A*):monix.tail.Iterant[F,A]", "kind" : "def"}, {"member" : "monix.tail.IterantBuildersApplicative#<init>", "error" : "unsupported entity"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.raiseError", "link" : "monix\/tail\/IterantBuildersApplicative.html#raiseError[A](ex:Throwable):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.empty", "link" : "monix\/tail\/IterantBuildersApplicative.html#empty[A]:monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "haltS", "tail" : "(e: Option[Throwable]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.haltS", "link" : "monix\/tail\/IterantBuildersApplicative.html#haltS[A](e:Option[Throwable]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "lastS", "tail" : "(item: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.lastS", "link" : "monix\/tail\/IterantBuildersApplicative.html#lastS[A](item:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspendS", "tail" : "(rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.suspendS", "link" : "monix\/tail\/IterantBuildersApplicative.html#suspendS[A](rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextBatchS", "tail" : "(batch: Batch[A], rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextBatchS", "link" : "monix\/tail\/IterantBuildersApplicative.html#nextBatchS[A](batch:monix.tail.batches.Batch[A],rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextCursorS", "tail" : "(cursor: BatchCursor[A], rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextCursorS", "link" : "monix\/tail\/IterantBuildersApplicative.html#nextCursorS[A](cursor:monix.tail.batches.BatchCursor[A],rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextS", "tail" : "(item: A, rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextS", "link" : "monix\/tail\/IterantBuildersApplicative.html#nextS[A](item:A,rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.pure", "link" : "monix\/tail\/IterantBuildersApplicative.html#pure[A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.now", "link" : "monix\/tail\/IterantBuildersApplicative.html#now[A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/IterantBuildersApplicative.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/IterantBuildersApplicative.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/IterantBuildersApplicative.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/IterantBuildersApplicative.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/IterantBuildersApplicative.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/IterantBuildersApplicative.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/IterantBuildersApplicative.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuildersApplicative.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuildersApplicative.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuildersApplicative.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/IterantBuildersApplicative.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/IterantBuildersApplicative.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/IterantBuildersApplicative.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/IterantBuildersApplicative.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/IterantBuildersApplicative.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/IterantBuildersApplicative.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/IterantBuildersApplicative.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/IterantBuildersApplicative.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/IterantBuildersApplicative.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/IterantBuildersApplicative.html", "kind" : "class"}, {"name" : "monix.tail.IterantBuildersAsync", "shortDescription" : "Class defining curried Iterant builders for data types thatimplement cats.effect.Async.", "members_class" : [{"label" : "intervalWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.IterantBuildersAsync.intervalWithFixedDelay", "link" : "monix\/tail\/IterantBuildersAsync.html#intervalWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"label" : "intervalWithFixedDelay", "tail" : "(delay: FiniteDuration)(timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.IterantBuildersAsync.intervalWithFixedDelay", "link" : "monix\/tail\/IterantBuildersAsync.html#intervalWithFixedDelay(delay:scala.concurrent.duration.FiniteDuration)(implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"label" : "intervalAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.IterantBuildersAsync.intervalAtFixedRate", "link" : "monix\/tail\/IterantBuildersAsync.html#intervalAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"label" : "intervalAtFixedRate", "tail" : "(period: FiniteDuration)(timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.IterantBuildersAsync.intervalAtFixedRate", "link" : "monix\/tail\/IterantBuildersAsync.html#intervalAtFixedRate(period:scala.concurrent.duration.FiniteDuration)(implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"member" : "monix.tail.IterantBuildersAsync#<init>", "error" : "unsupported entity"}, {"label" : "repeatEvalF", "tail" : "(fa: F[A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.repeatEvalF", "link" : "monix\/tail\/IterantBuildersAsync.html#repeatEvalF[A](fa:F[A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "repeatEval", "tail" : "(thunk: ⇒ A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.repeatEval", "link" : "monix\/tail\/IterantBuildersAsync.html#repeatEval[A](thunk:=>A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(elems: A*)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.repeat", "link" : "monix\/tail\/IterantBuildersAsync.html#repeat[A](elems:A*)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromStateActionL", "tail" : "(f: (S) ⇒ F[(A, S)])(seed: ⇒ F[S])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.fromStateActionL", "link" : "monix\/tail\/IterantBuildersAsync.html#fromStateActionL[S,A](f:S=>F[(A,S)])(seed:=>F[S])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromStateAction", "tail" : "(f: (S) ⇒ (A, S))(seed: ⇒ S)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.fromStateAction", "link" : "monix\/tail\/IterantBuildersAsync.html#fromStateAction[S,A](f:S=>(A,S))(seed:=>S)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Iterant[F, Either[A, B]])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.IterantBuildersSync.tailRecM", "link" : "monix\/tail\/IterantBuildersAsync.html#tailRecM[A,B](a:A)(f:A=>monix.tail.Iterant[F,Either[A,B]])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: ⇒ Iterant[F, A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.defer", "link" : "monix\/tail\/IterantBuildersAsync.html#defer[A](fa:=>monix.tail.Iterant[F,A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: ⇒ Iterant[F, A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.suspend", "link" : "monix\/tail\/IterantBuildersAsync.html#suspend[A](fa:=>monix.tail.Iterant[F,A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: F[A])(use: (A) ⇒ Iterant[F, B], release: (A) ⇒ F[Unit])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.IterantBuildersSync.bracket", "link" : "monix\/tail\/IterantBuildersAsync.html#bracket[A,B](acquire:F[A])(use:A=>monix.tail.Iterant[F,B],release:A=>F[Unit])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: ⇒ A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.eval", "link" : "monix\/tail\/IterantBuildersAsync.html#eval[A](a:=>A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "range", "tail" : "(from: Int, until: Int, step: Int): Iterant[F, Int]", "member" : "monix.tail.IterantBuildersApplicative.range", "link" : "monix\/tail\/IterantBuildersAsync.html#range(from:Int,until:Int,step:Int):monix.tail.Iterant[F,Int]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(xs: Iterator[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromIterator", "link" : "monix\/tail\/IterantBuildersAsync.html#fromIterator[A](xs:Iterator[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(xs: Iterable[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromIterable", "link" : "monix\/tail\/IterantBuildersAsync.html#fromIterable[A](xs:Iterable[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(xs: Seq[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromSeq", "link" : "monix\/tail\/IterantBuildersAsync.html#fromSeq[A](xs:Seq[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIndexedSeq", "tail" : "(xs: IndexedSeq[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromIndexedSeq", "link" : "monix\/tail\/IterantBuildersAsync.html#fromIndexedSeq[A](xs:IndexedSeq[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromList", "tail" : "(xs: LinearSeq[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromList", "link" : "monix\/tail\/IterantBuildersAsync.html#fromList[A](xs:scala.collection.immutable.LinearSeq[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(xs: Array[A])(arg0: ClassTag[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromArray", "link" : "monix\/tail\/IterantBuildersAsync.html#fromArray[A](xs:Array[A])(implicitevidence$1:scala.reflect.ClassTag[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(rest: F[Iterant[F, A]]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.suspend", "link" : "monix\/tail\/IterantBuildersAsync.html#suspend[A](rest:F[monix.tail.Iterant[F,A]]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "liftF", "tail" : "(a: F[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.liftF", "link" : "monix\/tail\/IterantBuildersAsync.html#liftF[A](a:F[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "of", "tail" : "(elems: A*): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.of", "link" : "monix\/tail\/IterantBuildersAsync.html#of[A](elems:A*):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.raiseError", "link" : "monix\/tail\/IterantBuildersAsync.html#raiseError[A](ex:Throwable):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.empty", "link" : "monix\/tail\/IterantBuildersAsync.html#empty[A]:monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "haltS", "tail" : "(e: Option[Throwable]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.haltS", "link" : "monix\/tail\/IterantBuildersAsync.html#haltS[A](e:Option[Throwable]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "lastS", "tail" : "(item: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.lastS", "link" : "monix\/tail\/IterantBuildersAsync.html#lastS[A](item:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspendS", "tail" : "(rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.suspendS", "link" : "monix\/tail\/IterantBuildersAsync.html#suspendS[A](rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextBatchS", "tail" : "(batch: Batch[A], rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextBatchS", "link" : "monix\/tail\/IterantBuildersAsync.html#nextBatchS[A](batch:monix.tail.batches.Batch[A],rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextCursorS", "tail" : "(cursor: BatchCursor[A], rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextCursorS", "link" : "monix\/tail\/IterantBuildersAsync.html#nextCursorS[A](cursor:monix.tail.batches.BatchCursor[A],rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextS", "tail" : "(item: A, rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextS", "link" : "monix\/tail\/IterantBuildersAsync.html#nextS[A](item:A,rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.pure", "link" : "monix\/tail\/IterantBuildersAsync.html#pure[A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.now", "link" : "monix\/tail\/IterantBuildersAsync.html#now[A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/IterantBuildersAsync.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/IterantBuildersAsync.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/IterantBuildersAsync.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/IterantBuildersAsync.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/IterantBuildersAsync.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/IterantBuildersAsync.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/IterantBuildersAsync.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuildersAsync.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuildersAsync.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuildersAsync.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/IterantBuildersAsync.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/IterantBuildersAsync.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/IterantBuildersAsync.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/IterantBuildersAsync.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/IterantBuildersAsync.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/IterantBuildersAsync.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/IterantBuildersAsync.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/IterantBuildersAsync.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/IterantBuildersAsync.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/IterantBuildersAsync.html", "kind" : "class"}, {"name" : "monix.tail.IterantBuildersSync", "shortDescription" : "Class defining curried Iterant builders for data types thatimplement cats.effect.Sync.", "members_class" : [{"label" : "repeatEvalF", "tail" : "(fa: F[A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.repeatEvalF", "link" : "monix\/tail\/IterantBuildersSync.html#repeatEvalF[A](fa:F[A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "repeatEval", "tail" : "(thunk: ⇒ A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.repeatEval", "link" : "monix\/tail\/IterantBuildersSync.html#repeatEval[A](thunk:=>A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(elems: A*)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.repeat", "link" : "monix\/tail\/IterantBuildersSync.html#repeat[A](elems:A*)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromStateActionL", "tail" : "(f: (S) ⇒ F[(A, S)])(seed: ⇒ F[S])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.fromStateActionL", "link" : "monix\/tail\/IterantBuildersSync.html#fromStateActionL[S,A](f:S=>F[(A,S)])(seed:=>F[S])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromStateAction", "tail" : "(f: (S) ⇒ (A, S))(seed: ⇒ S)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.fromStateAction", "link" : "monix\/tail\/IterantBuildersSync.html#fromStateAction[S,A](f:S=>(A,S))(seed:=>S)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) ⇒ Iterant[F, Either[A, B]])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.IterantBuildersSync.tailRecM", "link" : "monix\/tail\/IterantBuildersSync.html#tailRecM[A,B](a:A)(f:A=>monix.tail.Iterant[F,Either[A,B]])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: ⇒ Iterant[F, A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.defer", "link" : "monix\/tail\/IterantBuildersSync.html#defer[A](fa:=>monix.tail.Iterant[F,A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: ⇒ Iterant[F, A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.suspend", "link" : "monix\/tail\/IterantBuildersSync.html#suspend[A](fa:=>monix.tail.Iterant[F,A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: F[A])(use: (A) ⇒ Iterant[F, B], release: (A) ⇒ F[Unit])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.IterantBuildersSync.bracket", "link" : "monix\/tail\/IterantBuildersSync.html#bracket[A,B](acquire:F[A])(use:A=>monix.tail.Iterant[F,B],release:A=>F[Unit])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: ⇒ A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersSync.eval", "link" : "monix\/tail\/IterantBuildersSync.html#eval[A](a:=>A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"member" : "monix.tail.IterantBuildersSync#<init>", "error" : "unsupported entity"}, {"label" : "range", "tail" : "(from: Int, until: Int, step: Int): Iterant[F, Int]", "member" : "monix.tail.IterantBuildersApplicative.range", "link" : "monix\/tail\/IterantBuildersSync.html#range(from:Int,until:Int,step:Int):monix.tail.Iterant[F,Int]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(xs: Iterator[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromIterator", "link" : "monix\/tail\/IterantBuildersSync.html#fromIterator[A](xs:Iterator[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(xs: Iterable[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromIterable", "link" : "monix\/tail\/IterantBuildersSync.html#fromIterable[A](xs:Iterable[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(xs: Seq[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromSeq", "link" : "monix\/tail\/IterantBuildersSync.html#fromSeq[A](xs:Seq[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIndexedSeq", "tail" : "(xs: IndexedSeq[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromIndexedSeq", "link" : "monix\/tail\/IterantBuildersSync.html#fromIndexedSeq[A](xs:IndexedSeq[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromList", "tail" : "(xs: LinearSeq[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromList", "link" : "monix\/tail\/IterantBuildersSync.html#fromList[A](xs:scala.collection.immutable.LinearSeq[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(xs: Array[A])(arg0: ClassTag[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.fromArray", "link" : "monix\/tail\/IterantBuildersSync.html#fromArray[A](xs:Array[A])(implicitevidence$1:scala.reflect.ClassTag[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(rest: F[Iterant[F, A]]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.suspend", "link" : "monix\/tail\/IterantBuildersSync.html#suspend[A](rest:F[monix.tail.Iterant[F,A]]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "liftF", "tail" : "(a: F[A]): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.liftF", "link" : "monix\/tail\/IterantBuildersSync.html#liftF[A](a:F[A]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "of", "tail" : "(elems: A*): Iterant[F, A]", "member" : "monix.tail.IterantBuildersApplicative.of", "link" : "monix\/tail\/IterantBuildersSync.html#of[A](elems:A*):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.raiseError", "link" : "monix\/tail\/IterantBuildersSync.html#raiseError[A](ex:Throwable):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.empty", "link" : "monix\/tail\/IterantBuildersSync.html#empty[A]:monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "haltS", "tail" : "(e: Option[Throwable]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.haltS", "link" : "monix\/tail\/IterantBuildersSync.html#haltS[A](e:Option[Throwable]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "lastS", "tail" : "(item: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.lastS", "link" : "monix\/tail\/IterantBuildersSync.html#lastS[A](item:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspendS", "tail" : "(rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.suspendS", "link" : "monix\/tail\/IterantBuildersSync.html#suspendS[A](rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextBatchS", "tail" : "(batch: Batch[A], rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextBatchS", "link" : "monix\/tail\/IterantBuildersSync.html#nextBatchS[A](batch:monix.tail.batches.Batch[A],rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextCursorS", "tail" : "(cursor: BatchCursor[A], rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextCursorS", "link" : "monix\/tail\/IterantBuildersSync.html#nextCursorS[A](cursor:monix.tail.batches.BatchCursor[A],rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextS", "tail" : "(item: A, rest: F[Iterant[F, A]], stop: F[Unit]): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.nextS", "link" : "monix\/tail\/IterantBuildersSync.html#nextS[A](item:A,rest:F[monix.tail.Iterant[F,A]],stop:F[Unit]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.pure", "link" : "monix\/tail\/IterantBuildersSync.html#pure[A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.IterantBuilders.now", "link" : "monix\/tail\/IterantBuildersSync.html#now[A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/IterantBuildersSync.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/IterantBuildersSync.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/IterantBuildersSync.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/IterantBuildersSync.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/IterantBuildersSync.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/IterantBuildersSync.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/IterantBuildersSync.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuildersSync.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuildersSync.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuildersSync.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/IterantBuildersSync.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/IterantBuildersSync.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/IterantBuildersSync.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/IterantBuildersSync.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/IterantBuildersSync.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/IterantBuildersSync.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/IterantBuildersSync.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/IterantBuildersSync.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/IterantBuildersSync.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/IterantBuildersSync.html", "kind" : "class"}]};